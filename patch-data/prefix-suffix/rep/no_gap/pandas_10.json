{"candidate": "        if axis != 0:\n            raise AssertionError(\"Axis other than 0 is not supported.\")\n\n        if transpose:\n            mask = mask.T\n", "entropy": 25.6525837453393}
{"candidate": "        if transpose:\n            mask = mask.T\n            new_values = new_values.T\n        else:\n            mask = mask[:, None]\n\n        if is_array_like(new):\n            new = self._maybe_coerce_values(new)\n", "entropy": 39.0323416414493}
{"candidate": "        new = self._maybe_coerce_values(new)\n\n        if transpose:\n            mask = mask.T\n", "entropy": 9.385698490141099}
{"candidate": "        if transpose:\n            new = np.asarray(new)\n", "entropy": 14.576272582368}
{"candidate": "        if transpose:\n            new = np.asarray(new).T\n        new = _extract_array(new, extract_numpy=True)\n        if isinstance(new, ExtensionArray):\n\n            new = new.astype(self.dtype)\n            if axis == 0:\n                new = new.ravel()\n", "entropy": 48.149610249738004}
{"candidate": "        if transpose:\n            new = _safe_reshape(new, new_values.shape)\n        else:\n", "entropy": 11.696498619759}
{"candidate": "        if self.ndim == 2:\n            # TODO(EA2D): unnecessary with 2D EAs\n", "entropy": 15.917204239058}
{"candidate": "        new = self._maybe_coerce_values(new)\n        if new.shape != mask.shape:\n            # pandas the broadcast\n", "entropy": 39.819869163223096}
{"candidate": "        if self.ndim == 2 and not transpose:\n            new = np.array(new, dtype=object)\n", "entropy": 24.196855390623}
{"candidate": "        if self.ndim == 2:\n            # TODO(EA2D): this is unnecessary with 2D EAs\n            new = np.asarray(new)\n            if new.ndim == 1:\n                new = new[:, np.newaxis]\n            if transpose:\n                new = new.T\n", "entropy": 35.7810000938585}
{"candidate": "        new = self._maybe_coerce_values(new)\n        if len(new) != new_values.shape[0] and len(new) != 0:\n            raise ValueError(\"Length of replaced values does not match\")\n\n        new = self._try_coerce_args(new, mask)\n\n        if new_values.shape[0] == 0:\n            # reassign the whole array\n            new_values = new", "entropy": 63.854317965253806}
{"candidate": "        # TODO: Break out each of these cases into separate methods.\n        # Handles:\n        #   - Masking with a value.\n        #   - Transposing / setting the wrong axis.\n        #   - Setting with a ndarray\n        #   - Setting with a Series\n\n        if not is_list_like(new) and not isinstance(new, self._holder):\n            new = new_values.fill_value if", "entropy": 108.18465481959996}
{"candidate": "        # We may get a boolean mask from a Series with a non-boolean dtype,\n        # e.g. pd.Series([\"foo\", \"bar\"], dtype=\"category\")[0] yields \"foo\".\n        # Fill the mask with True values for the missing positions.\n        if mask.dtype == np.bool_:\n            mask = np.asarray(\n                mask.reindex(np.arange(len(", "entropy": 95.52764894442242}
{"candidate": "        if axis >= self.ndim:\n            raise IndexError(f\"Axis out of range: {axis} > {self.ndim}\")\n        elif axis < 0:\n            axis = self.ndim + axis\n\n        if transpose:\n            new = np.asarray(new).T\n            mask = mask.T\n\n        if axis:\n            shape = list(new_values.shape)\n            shape[axis]", "entropy": 41.937284164335175}
{"candidate": "        if isinstance(new, ExtensionArray):\n            new = new.values\n\n        # 2D case, we are setting values item-by-item\n        if self.ndim == 2:\n            if mask.ndim != 2:\n                raise NotImplementedError(\"invalid mask\")\n\n            new = self._maybe_coerce_values(new)\n            new = new.ravel()\n\n            # We are setting values column-by", "entropy": 66.54116383868603}
{"candidate": "        if not len(new):\n            if not inplace:\n                return [self]\n            return []\n\n        if not isinstance(new, self._holder):\n            # TODO: need a fastpath for when we have duck-dtype blocks\n            raise ValueError(\n                f\"{self} cannot hold non-{self._holder} values, attempted to \"\n                f\"put {repr(new)}\"\n            )\n\n       ", "entropy": 91.65287727522104}
{"candidate": "        if not isinstance(new, self._holder):\n            new = self.maybe_cast_slice_to_object(new)\n            new = construct_1d_object_array_from_listlike(new)\n\n        if isinstance(new, ExtensionArray):\n            new = new.astype(self.dtype)\n        else:\n            new = self._maybe_coerce_values(new)\n\n        # convert the", "entropy": 51.87573997810321}
{"candidate": "        if transpose and self.ndim == 2 and new.ndim == 1:\n            new = new[mask]\n\n        mask = _safe_reshape(mask, new_values.shape)\n\n        new_values[mask] = new\n        return [self.make_block(values=new_values)]\n\n    def putmask(\n        self, mask, new, inplace: bool = False, axis: int = 0, transpose", "entropy": 20.880798308159505}
{"candidate": "        # Try to align the input masks.\n        if isinstance(new, np.ndarray):\n            new = np.asarray(new)\n            if new.ndim == 1:\n                if isinstance(mask, np.ndarray):\n                    mask = mask.ravel()\n                new = new[mask]\n        elif isinstance(new, np.ndarray):\n            new = np.asarray(new)\n            if", "entropy": 53.14370028079191}
{"candidate": "        new = _maybe_promote(new)\n\n        # TODO(EA2D): remove this promotion logic once we separate out 1-D and\n        #  2-D extension arrays / blocks.\n        new = self._maybe_coerce_values(new)\n        if new.ndim == 1:\n            if mask.ndim == 1:\n                pass\n            else:\n                mask = mask[0]\n        else:", "entropy": 83.9114100557453}
