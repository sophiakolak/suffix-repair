{"candidate": "            return state.get_pending_tasks(self)\n", "entropy": 14.160313827612}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.tasks.values())\n\n    @property", "entropy": 6.991523833084001}
{"candidate": "            return six.moves.filter(state.has_task, self.tasks)\n\n    def get_running_tasks(self):\n        \"\"\"\n        Get RUNNING tasks for this worker.\n        \"\"\"\n        return six.moves.filter(lambda task: task.status == RUNNING, self.tasks)\n", "entropy": 20.152241608234373}
{"candidate": "            return self.tasks\n\n    @property", "entropy": 13.817722098897}
{"candidate": "            return [task for task in self.tasks if task.status in [PENDING, RUNNING]]\n", "entropy": 15.8574562812375}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.get_pending_tasks())\n", "entropy": 5.049255350414999}
{"candidate": "            return six.moves.filter(lambda task_id: state.get_task(task_id).status in [PENDING, RUNNING],\n                                    self.tasks)\n", "entropy": 9.591114411969802}
{"candidate": "            return [task for task in self.tasks if task.status in [PENDING, RUNNING]]\n\n    @property\n    def num_pending_tasks(self):\n        return len(self.tasks)\n", "entropy": 18.014884068577498}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.get_tasks().values())\n", "entropy": 9.211827232585499}
{"candidate": "            current_tasks = self.tasks\n            self.tasks = set()\n\n            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    current_tasks)\n\n    @property\n    def num_pending_tasks(self):\n        return len(self.get_pending_tasks(self))\n\n    @property", "entropy": 41.854235161224594}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    six.itervalues(state.tasks))\n\n    def get_total_num_tasks(self, state):\n        \"\"\"\n        Get PENDING (and RUNNING) tasks for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        if len(self.tasks", "entropy": 18.729925350915504}
{"candidate": "            return self.tasks\n\n    def get_pending_batches(self, state):\n        \"\"\"\n        Get PENDING batches for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        if len(self.batches) < state.num_pending_batches():\n            return six.moves.filter(lambda batch: batch.status in [PENDING, RUNNING],\n                ", "entropy": 15.459244205575992}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.pending_tasks())\n\n    def is_idle(self, state):\n        \"\"\"\n        Check if a worker is idle.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        return not self.get_pending_tasks(state)\n\n    def add_task(self", "entropy": 24.4780448555129}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.pending_tasks_for(self))\n\n    def get_active_tasks(self, state):\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING, SUSPENDED],\n                                self.tasks)\n\n    def get_completed_", "entropy": 30.1295471998295}
{"candidate": "            # Find all tasks that aren't done. Optimization for the case when\n            # there are many tasks.\n            return six.moves.filter(lambda task: not task.done(), self.tasks)\n\n    @property\n    def active_tasks(self):\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], self.tasks)\n\n    @property\n    def pending", "entropy": 59.95706008914699}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.tasks.values())\n\n    def get_job_ids(self, state):\n        \"\"\"\n        Get the ids of all pending jobs for this worker.\n\n        You have to pass the state for optimization reasons.\n        \"\"\"\n        return {task.job_id for task in self.get_pending_t", "entropy": 33.0702184703245}
{"candidate": "            return self.tasks\n\n    def get_disabled_tasks(self):\n        \"\"\"\n        Get DISABLED tasks for this worker.\n        \"\"\"\n        return six.moves.filter(lambda task: task.status == DISABLED, self.tasks)\n\n    def get_batches_pending_tasks(self, state):\n        return six.moves.filter(lambda task: task.status in [PEND", "entropy": 31.591436066858606}
{"candidate": "            tasks = state.tasks_by_worker(self.id)\n            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    tasks.values())\n\n    def get_batches(self, state):\n        \"\"\"\n        Get all BATCHED tasks for this worker.\n        \"\"\"\n        if len(self.tasks) < state.num_batches():\n            return", "entropy": 31.111666958097008}
{"candidate": "            return six.moves.filter(lambda task: task.status == PENDING,\n                                    self.tasks)\n\n    def get_tasks(self, task_ids, state):\n        \"\"\"Get Task objects for provided ids.\n\n        You have to pass in the state for optimization reasons.\"\"\"\n        return [state.get_task(task_id) for task_id in task_ids]\n\n    def get_running_", "entropy": 44.130567453223804}
{"candidate": "            return list(self.tasks)\n\n    def get_tasks_to_restart(self, state):\n        \"\"\"\n        Get the tasks for this worker where we should restart them.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        return six.moves.filter(lambda task: task.status == PENDING and task.should_restart(),\n                                self.get_pending_tasks", "entropy": 45.9758930325087}
