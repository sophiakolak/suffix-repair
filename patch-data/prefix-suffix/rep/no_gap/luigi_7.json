{"candidate": "        if assistant:\n            task.assistant = assistant\n\n        if status is not None:\n", "entropy": 14.743547024300002}
{"candidate": "        if task.status != status and status in (FAILED, EXPIRED, DONE):\n            task.time_done = time.time()\n            if status == FAILED:\n                task.failures += 1\n", "entropy": 44.77803037855139}
{"candidate": "        if owners is not None:\n            # if we've started running a task, we should clear the owners\n            # if the task fails, the owners will get set again\n            if status != RUNNING:\n                task.owners = set()\n            task.owners.update(owners)\n\n        if status is not None:\n", "entropy": 80.21263214709603}
{"candidate": "        task.state = state\n\n        if priority is not None:\n            task.priority = priority\n\n        task.date_updated = date_updated\n\n        if status is not None:\n", "entropy": 42.67752113332}
{"candidate": "        # update the status before the task\n        # so that get_running_jobs() works (ie: it won't return the task)\n        if status is not None:\n", "entropy": 66.23918090019998}
{"candidate": "        status_old = task.status\n        if status is not None:\n            # We actually changed the status.\n", "entropy": 35.8210438307}
{"candidate": "        if status == FAILED or status == SUCCESS:\n            task.time_complete = time.time()\n            task.worker_running = None\n            del task.resources_running\n\n        if status is not None:\n", "entropy": 32.626442336497}
{"candidate": "        if owners is not None:\n            task.stakeholders.update(owners)\n\n        if assistants is not None:\n            task.stakeholders.update(assistants)\n\n        if status:  # Status will be None when we just want to update the db.\n", "entropy": 51.457555788387}
{"candidate": "        if status == FAILED:\n            task.time_fail = time.time()\n\n        if status != task.status:\n", "entropy": 19.868574842530002}
{"candidate": "        if priority is not None:\n            task.priority = priority\n\n        if meta is not None:\n            task.meta = meta\n\n        if assistant is not None:\n            task.assistant = assistant\n\n        if task.status != RUNNING:\n", "entropy": 35.582719358990005}
{"candidate": "        if owners is not None:\n            task.stakeholders.update(owners)\n\n        if priority is not None:\n            if priority > task.priority:\n                task.priority = priority\n                if task.batch_id is not None:\n                    for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                        batch_task.priority = priority\n\n        # always update status to SUSP", "entropy": 33.9694521238254}
{"candidate": "        if finish_time is not None:\n            task.finish_time = finish_time\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.finish_time = finish_time\n\n        if task.status == RUNNING and status != RUNNING:\n            task.worker_running = None\n            task", "entropy": 21.160267608659403}
{"candidate": "        if priority is not None:\n            task.priority = priority\n\n        if new_metadata:\n            if task.metadata is None:\n                task.metadata = new_metadata\n            else:\n                task.metadata.update(new_metadata)\n\n        if last_modified is not None:\n            task.last_modified = last_modified\n\n        if status == DISABLED:\n            task.disable(reason, self._config)\n            self", "entropy": 49.87832839182669}
{"candidate": "        if service is not None:\n            task.service = service\n\n        if task.priority is None:\n            set_priority = True\n        elif task.priority != priority:\n            if status in (FAILED, EXPIRED):\n                set_priority = False\n            else:\n                new_priority = priority\n                set_priority = True\n\n        if set_priority:\n            task.priority = max(new_priority, task.priority", "entropy": 62.861646403314}
{"candidate": "        if priority is not None and task.priority != priority:\n            # note that you cannot change priority if task is running\n            if task.status != RUNNING:\n                task.priority = priority\n                if batch_id:\n                    for batch_task in self._state.get_batch_running_tasks(batch_id):\n                        batch_task.priority = priority\n            else:\n                self._logger.info('Task {0}", "entropy": 52.426690421006505}
{"candidate": "        cancellation_time = time.time()\n        if task.status == SUSPENDED:\n            task.status = status\n            if status != CANCELLED:\n                task.time_suspended += cancellation_time - task.time_updated\n            self._state.set_status(task, status, self._config)\n        else:\n            # record suspension time only if the task was running\n            if status == SUSPENDED:", "entropy": 76.06202587186714}
{"candidate": "        if details is not None:\n            task.details = _get_default(details, {})\n\n        # only update status if it changed (except when it went back to pending)\n        if not assistant:\n            self._update_status(task, status, worker_id, family)\n            self._enforce_live_settings()\n        else:\n            if status != PENDING:\n                task.status = status\n                if task.", "entropy": 104.128637470812}
{"candidate": "        if priority is not None:\n            task.priority = priority\n\n        if status == SUCCESS or status == FAILED:\n            task.worker_running = None\n            task.time_running = None\n            if status == FAILED and task.status != DISABLED:\n                if expl is not None and re.search(self._config.disable_re, expl):\n                    task.status = DISABLED\n                    status = DIS", "entropy": 46.68870684814651}
{"candidate": "        if priority is not None:\n            task.priority = priority\n\n        if assistant is not None:\n            task.assistant = assistant\n\n        if status == SUCCESS and task.batchable and task.batch_id is not None:\n            # merge all resources from the batch\n            all_resources = defaultdict(float)\n            all_used_resources = defaultdict(float)\n            for batch_task in self._state.get_batch", "entropy": 60.287665984854996}
{"candidate": "        if owners is not None:\n            for owner in owners:\n                task.stakeholders.add(owner)\n\n        if priority is not None and priority != task.priority:\n            task.priority = priority\n            self._update_task_priority(task)\n            self._state.set_priority(task)\n\n        if status == RUNNING:\n            self._state.set_status(task, PENDING, self._config)\n", "entropy": 41.422606513866}
