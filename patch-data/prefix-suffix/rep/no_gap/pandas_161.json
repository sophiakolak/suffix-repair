{"candidate": "                mask = (codes == -1) & (value.index.isin(self.index))\n\n                if mask.any():\n                    if (values_codes[mask] == -1).any():\n                        raise ValueError(\"fill value must be in categories\")\n\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 29.18026747351899}
{"candidate": "                mask = (codes == -1) & (~value.isna())\n                codes = np.where(mask, values_codes, codes)\n", "entropy": 14.24800249915}
{"candidate": "\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask.nonzero()[0]]\n", "entropy": 10.137987408919999}
{"candidate": "                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes.take(\n                        mask.nonzero()[0] % len(value)\n                    )\n", "entropy": 12.054475618632905}
{"candidate": "                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 5.700816079264001}
{"candidate": "\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 6.496149257204}
{"candidate": "                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 6.221611951262001}
{"candidate": "                mask = codes == -1\n                codes = codes.copy()\n                codes[mask] = values_codes[mask]\n", "entropy": 8.578266881455}
{"candidate": "                na_mask = value.isna()\n                mask = codes == -1\n                codes = codes.copy()\n                codes[mask] = values_codes[mask]\n                if na_mask.any():\n                    codes[mask & na_mask] = -1\n", "entropy": 18.892090085072297}
{"candidate": "                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 14.4418055308995}
{"candidate": "                codes = np.where(codes == -1, values_codes, codes)\n", "entropy": 7.162021463325}
{"candidate": "                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 6.748384149361001}
{"candidate": "                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n", "entropy": 5.414162736940499}
{"candidate": "                mask = codes == -1\n                codes = codes.copy()\n                codes[mask] = values_codes[mask]\n", "entropy": 5.895804641354999}
{"candidate": "                values_codes[-value.isna()] = codes[-value.isna()]\n\n                # If value is a dict, check that it matches the size of the\n                # Categorical.\n                if isinstance(value, ABCSeries):\n                    if len(self) != len(value):\n                        raise ValueError(\n                            \"cannot assign a len={len(value)} \"\n                            \"i.e. {", "entropy": 59.38701779354702}
{"candidate": "\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes[mask]\n\n            # If value is a dict or a Series (a dict value has already\n            # been converted to a Series)\n            elif isinstance(value, ABCIndex):\n                if not value[~value.isin(self.categories)].isna().all():\n                    raise ValueError", "entropy": 13.113429242419798}
{"candidate": "\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes\n\n            # If value is a dict, then we have to align the values\n            # to the categories\n            elif isinstance(value, dict):\n                # TODO: If we align we don't need to check that all the\n                #  dict keys are in the code, just all the values\n", "entropy": 88.91079346816204}
{"candidate": "                values_codes[value.isna()] = -1\n\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes\n\n            # a Series of length 0, or a dict with columns not in self\n            elif value == {}:\n                pass\n\n            # If value is a list/tuple, comvert it to an array\n            elif is_", "entropy": 68.30492575536121}
{"candidate": "                values_codes = values_codes.take(codes)\n\n                mask = codes == -1\n                if mask.any():\n                    codes = values_codes\n\n            # If value is a dict, it should be a dict of scalars.\n            elif isinstance(value, dict):\n                # NOTE: \"or {}\" is used to avoid modifying the dictionary in\n                # case it's empty\n                for k in value or {}:\n                   ", "entropy": 83.06037019460594}
{"candidate": "                values_codes = values_codes.reindex(self.index)\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    codes[mask] = values_codes\n\n            elif isinstance(value, dict):\n                if not all(is_hashable(k) and isna(v) for k, v in value.items()):\n                    raise ValueError(\"fill value must be", "entropy": 22.911669766548197}
