{"candidate": "CLI_EXTRA_OPTS = ('--' + m.group(1) for m in RE_OPTS.finditer(CLI_EXTRA_DOC))\n\n# usually doesn't make sense to expand iterable\n# TODO: add custom support?\nUNSUPPORTED_OPTS = ('iterable',)\n\n# usually doesn't make sense to expand iterable", "entropy": 75.04192395439219}
{"candidate": "RE_SPLIT = re.compile(r'([\\w/]+)=(\\S+)')\n\n# TODO: add custom support for some of the following?\nUNSUPPORTED_CLS = ('default', 'file')", "entropy": 36.910413336727}
{"candidate": "RE_ARGS = re.compile(r'\\s*-+(\\S+)\\s*(.+)\\s*$').split\n# boolean flags\nRE_FLAGS = re.compile(r'\\s*-+(no-)?(\\S+)')\n# options with no default value\nRE_NO_DEFAULT = re.compile(r'\\s*-+(\\S+)\\s*$').search\n# i.", "entropy": 80.29737382601158}
{"candidate": "RE_ARGS = re.compile(r'\\n {8}(\\S+(?:\\s*=\\s*\\S+)*)\\s*')\n# [((short, long), type), ...]\nRE_PARSED_ARGS = re.compile(r'\\n {8}(\\[((?:\\w, )*\\w)\\])\\s{2,}:\\s*([^,]+)')\n", "entropy": 64.35841949950502}
{"candidate": "RE_CLI = re.compile(r'\\s+(-+\\w+)')\n\nSUPPORTED_OPTS = ('miniters', 'ncols', 'smoothing', 'bar_format',\n                  'initial', 'maxinterval', 'mininterval', 'desc',\n                  'unit', 'unit_scale', 'unit_divisor', 'postfix',\n                  'dynamic_ncols', '", "entropy": 54.12460931392198}
{"candidate": "RE_CLI = re.compile(r'^[\\s]+')\n# to filter out unsupported options (listed in <UNSUPPORTED_OPTS>)\nRE_UNSUP = re.compile(r'|'.join(UNSUPPORTED_OPTS))\n\n# TODO: update/add optional/positional\n# TODO: allow for custom doc\n# TODO: get from actual .__init__.py file", "entropy": 130.18785257979278}
{"candidate": "RE_ARGS = re.compile(r'(-\\w+) (\\S)')\n\n\ndef get_args(doc):\n    \"\"\"Parse docstring for args\"\"\"\n    _, doc_args = doc.split('Parameters\\n----------', 1)\n    cli_args = []\n    for opt, type_ in RE_OPTS.findall(doc_args):\n        if opt in UNSUPPORTED_OPTS", "entropy": 66.79443734746425}
{"candidate": "RE_ARGS = re.compile(r'\\n {8}(\\S+)\\s{2,}:\\s*([^,]+)')\n# find all text in first 'class' docstring\nRE_DOC = re.compile(r'class\\s*[^:]+:\\s*\\n {8}\"\"\"\\s*(.+)\\n\\s*\"\"\"',\n                    flags=re.DOTALL)", "entropy": 71.97532440636802}
{"candidate": "RE_ARGS = re.compile(r'((?:[^\\s,\"]|\"[^\"]*\")+)')\n\n# TODO: create argparser from docstring instead\n# TODO: allow multiple groups of optional arguments per function\n# TODO: handle positional args, ignoring them in the following search\narg_types = dict(RE_OPTS.findall(__doc__))\n\n# TODO: check if default value is", "entropy": 128.09943537314797}
{"candidate": "RE_ARGV = re.compile(r'\\s{2,}')\n# (name, opts_dict)\nRE_DEF = re.compile(\n    r'^\\s*def\\s+(\\S+)\\s*\\(([^)]*)\\)\\s*:\\s*$', re.MULTILINE | re.DOTALL)\n\ntry:\n    import fire\nexcept ImportError:\n", "entropy": 70.728973982378}
{"candidate": "RE_SPLIT = re.compile(r'--([\\w-]+)')\n# sys.argv[0] is always '-c' or <path to file>\nCMD = sys.argv[1]\n\n# N.B.: dynamically generated CLI will always be unicode\nRE_UNICODE = re.compile('[^\\000-\\177]', re.UNICODE)\n\n# Progress", "entropy": 112.20917145206298}
{"candidate": "CLI_ARGS = shlex.split(__doc__[:__doc__.index('Args:')])\nRE_TYPES = re.compile(r'(?<!:)\\b[A-Z]\\w+')\nRE_NON_ALNUM = re.compile(r'[^a-zA-Z0-9]')\nDEFAULT_OPTS = {'unit_scale': False,", "entropy": 72.55778559681546}
{"candidate": "RE_ARGS = re.compile(r'(?:[^,\\s]++\\s++|[^,])')\n# re compatible escape\nRE_ESC = re.compile(r'(?<!\\\\)(?P<special>[\"\\'\\\\\\n])')\n# is the arg a flag\nRE_ISFLAG = re.compile(r'^\\s*-[^\\d\\W]\\w", "entropy": 93.55700188762549}
{"candidate": "RE_ARGS = re.compile(r'\\s*([-._\\w]+)')\n\n# opts, _ = RE_OPTS.findall(main.__doc__.split('\\n\\n')[-1])\n# opts = dict(opt for opt in opts if opt[0] not in UNSUPPORTED_OPTS)\nopts = dict(\n    filter(lambda opt: opt[", "entropy": 68.13703857404899}
{"candidate": "# ( (name, opts), ... )\nRE_ARGS = re.compile(r'\\n {8}(-(-(\\w+)([ \\w]*))|(\\w+)( \\w*)):')\n\n# TODO: this is redundant now, remove?\nFALSE_VALS = ('0', 'n', 'no', 'false', 'off')\n\n# TODO: turn this into a nice function\n", "entropy": 124.47707659939402}
{"candidate": "# re.findall(r'(\\n +[^:]+)\\s{2,}:\\s*([^\\n]+)', CLI_EXTRA_DOC)\nPOSSIBLE_OPTS = RE_OPTS.findall(CLI_EXTRA_DOC)\nCLI_OPTS_TYPES = OrderedDict(POSSIBLE_OPTS)\nCLI_ARGS = tuple(opt for opt, _", "entropy": 61.43968716289842}
{"candidate": "# (ie, all args begin with '--')\n#   ..., '--log=DEBUG', '--'\nRE_SYNOPSIS = re.compile(r'\\n.*\\n +(-.+)\\n.*', re.DOTALL)\nRE_SYNOPSIS_SPLIT = re.compile(r'(--[^\\s=]+)')\n# TODO: add support for nargs='+", "entropy": 116.13706301043159}
{"candidate": "# CLI_OPT_SPLIT = re.compile(r'--?|\\s+').split\n# assume spaces, dashes and underscores are separators\nCLI_OPT_SPLIT = re.compile(r'[-_\\s]+').split\n\n# CLI_OPTS = (('unit', 'str'), ('unit_scale', 'bool'), ('unit_divisor', 'int'),\n#            ", "entropy": 67.470127102498}
{"candidate": "RE_SPLIT = re.compile(r'--(\\S+)\\s+([^-].*)')\n\nCLI_HELP_OPTS = r\"\"\"\n        CLI Options\n        -----------\n\"\"\"\n\nRE_UNSUPPORTED_OPTS = re.compile(r'|'.join(\n    r\"\\n {8}{}(?:\\s*:.*?)?\\n\".format(re.escape", "entropy": 72.23022264289297}
{"candidate": "# re.split(r'\\n(?=\\s{8}\\S+\\s{2,}:\\s*)',\n#          '\\n'.join(cli.__doc__.split('\\n')[1:]))[1:]  # skip header\n\n# re.split(r'\\n(?=\\s{8}\\S+\\s{2,}:\\s*)',\n#          '\\n'.join", "entropy": 54.85568415275999}
