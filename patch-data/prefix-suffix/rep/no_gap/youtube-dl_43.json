{"candidate": "    m = re.match(u'http://[^/]*(.*)$', url)\n", "entropy": 33.58773027103}
{"candidate": "    import re\n    m = re.search(ur'[^/]+(?=/?$)', url)\n", "entropy": 16.364837837259994}
{"candidate": "    m = re.search(r'(?:[a-z]+://)?([^/]+)(?:/|$)', url)\n", "entropy": 35.887872847779995}
{"candidate": "    \"\"\"Extract the last part of a URL (i.e. the file basename)\n    >>> url_basename('http://example.com/foo/bar.html')\n    'bar.html'\n    \"\"\"\n    import re\n    m = re.search(r'/([^/]+)$', url)\n", "entropy": 41.44081668056498}
{"candidate": "    m = re.match(r'(?:[a-z]+://)?([^/]*)/', url)\n", "entropy": 18.53606533036}
{"candidate": "    '''Return the basename of a URL'''\n    import re\n    m = re.search(r'/([^/?#]+)$', url)\n", "entropy": 23.124294827264997}
{"candidate": "    import re\n    m = re.search(r'/([^/]+?)/?$', url)\n", "entropy": 14.325866020029999}
{"candidate": "    import re\n    m = re.search(r'/([^/?]+)/?$', url)\n", "entropy": 20.981509054529994}
{"candidate": "    import re\n    m = re.match(r'^.*/([^/?#]*)', url)\n", "entropy": 20.078855047799998}
{"candidate": "    import re\n    m = re.match(r'.*://.*/(.*)', url)\n", "entropy": 26.874808039730002}
{"candidate": "    \"\"\"\n    >>> url_basename('http://user:password@example.com/a/b/c/d/e.mp3')\n    u'e.mp3'\n    \"\"\"\n    import re\n    m = re.search(r'[^:/]*/([^:/]*)$', url)\n", "entropy": 45.01324171962698}
{"candidate": "    m = re.search(r'([^/]+)$', url)\n", "entropy": 13.29965319041}
{"candidate": "    import re\n    m = re.search(r'://[^/]+(/.*)$', url)\n", "entropy": 19.990959732870003}
{"candidate": "    \"\"\" From http://example.com/foo/bar returns 'bar' \"\"\"\n    import urlparse\n    return urlparse.urlparse(url).path.rsplit('/', 1)[-1]\n\n\ndef ignore_exception_with_message(exception_type, msg, func, *args, **kwargs):\n    \"\"\"\n    Execute func(*args, **kwargs), don't catch any exception.\n    If an", "entropy": 81.48786101612251}
{"candidate": "    import urlparse\n\n    url = urlparse.urlsplit(url)\n    if url.path:\n        base_path = url.path.split('/')[-1]\n        if '.' in base_path:\n            return base_path\n    return 'index.html'\n\n\ndef extract_id_from_url(url, pattern):\n    from urlparse import urlparse\n    from re import search\n\n    if not url", "entropy": 60.04403221090698}
{"candidate": "    \"\"\"\n    Get basename from an url.\n    >>> url_basename('http://example.com/foo/bar.txt')\n    'bar.txt'\n    >>> url_basename('http://example.com/foo/')\n    'foo/'\n    >>> url_basename('http://example.com/foo')\n    'foo'\n    >>> url_basename('http://example.com/')\n   ", "entropy": 33.409446551256}
{"candidate": "    \"\"\"Return the basename of a url\"\"\"\n    pth = urlparse.urlsplit(url).path\n    return os.path.basename(pth)\n\n\n# This is not a proper XML parser and the output is not proper XML\n# but for our purpose this is enough\n# This is needed, because I was too lazy to fix lxml to accept our crappy XML files\ndef correct_xml_error(xml_str):\n    \"\"\"", "entropy": 140.82500141753493}
{"candidate": "    import re\n    import posixpath\n\n    m = re.search(r'//+[^/]+/(.*?)$', url)\n    if not m:\n        return u''\n    # Unquote according to RFC 2396 Section 2.4.2 that says:\n    #   ... triple slash, \"///\", means that the authority component is empty\n    #   for relative URI.\n    path = posixpath.normpath(", "entropy": 96.1058010172748}
{"candidate": "    \"\"\"Return the filename part of the url\"\"\"\n    import urlparse\n    path = urlparse.urlsplit(url).path\n    base = os.path.basename(path)\n    return base\n\n\ndef url_filename(url):\n    import urlparse\n    path = urlparse.urlsplit(url).path\n    return os.path.splitext(path)[0]\n\n\ndef extract_xml_encoding(data):", "entropy": 52.0528748800152}
{"candidate": "    \"\"\"\n    Get the basename of an URL.\n    >>> url_basename('http://example.com')\n    u'http://example.com'\n    >>> url_basename('http://example.com/foo/')\n    u'http://example.com/foo/'\n    >>> url_basename('http://example.com/foo/bar')\n    u'bar'\n    >>> url_basename('http", "entropy": 29.457132217088688}
