{"candidate": "        r'&(#x[0-9a-fA-F]+|#[0-9]+|[a-zA-Z_:][a-zA-Z0-9.\\-_:]*)(;|(?=\\s|$))',\n        _htmlentity_transform,\n        s)", "entropy": 23.340959830671302}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef unescapeHTMLTags(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n\n    return re.sub(r'</?[^<>]+>', '', s)", "entropy": 16.321602526264495}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    if html is None:\n        return None\n    assert type(html) == compat_str\n\n    # Newline vs <br />\n   ", "entropy": 9.587460724651603}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef fix_xml_ampersands(xml_str):\n    \"\"\"Fixes ampersands in HTML standard escaping style into XML standard.\n\n    :param xml_str: an XML-like string that may contain HTML-style ampersands", "entropy": 72.58425723035559}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef clean_html(html):\n    if html is None:\n        return None\n    assert isinstance(html, compat_str)\n    return re.sub(r'<.*?>', '', html).strip()\n\n\n", "entropy": 16.353709460123845}
{"candidate": "        r'(?s)<!--.*?-->|<[^>]+>|&(' +\n        '|'.join(re.escape(e[1:]) for e in compat_html_entities.name2codepoint) +\n        r\");\", lambda m: (\n            m.group(1) is not None and _htmlentity_transform(m.group(0)) or\n            (m.group(0)[", "entropy": 46.06822530780487}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef unescapeURL(url):\n    if not isinstance(url, compat_str):\n        return url\n    # Unescape any %xx (TODO: check whether this is required)\n    url = compat_urllib", "entropy": 45.13393635625409}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s).replace(r'&;', ';')\n\n\ndef strip_jsonp(s, callback_name='callback'):\n    \"\"\"\n    Return a tuple of json data and a boolean representing if the input\n    is probably JSONP, that is", "entropy": 67.0881712267749}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef unescapeHTML_(s):\n    return unescapeHTML(s).replace('&amp;', '&')\n\n\ndef std_headers():\n    return {\n        'User-Agent': USER_AGENT,\n        '", "entropy": 21.705873266928602}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef remove_start(s, start):\n    start_len = len(start)\n    if s.startswith(start):\n        return s[start_len:]\n    return s\n\n\ndef remove_end(s,", "entropy": 15.172302152236199}
{"candidate": "        r'&(#\\d{1,4}(;|(?=\\s))|#x[0-9a-fA-F]{1,4}(;|(?=\\s))|\\w+;)',\n        _htmlentity_transform,\n        s)\n\n\ndef compat_urllib_request_urlopen(req, data=None):\n    if sys.version_info >= (", "entropy": 21.291165330387575}
{"candidate": "        r'&([^;]+;)',\n        lambda m: _htmlentity_transform(m.group(1)), s)\n\n\ndef unescapeHTMLNFC(s):\n    return unescapeHTML(s).replace('&#39;', \"'\")\n\n\ndef clean_html(html_fragment):\n    html_fragment = re.sub(\n        r'<!--.*?-->', '', html_fr", "entropy": 35.77078920365438}
{"candidate": "        r'&([^;]+;)',\n        lambda m: _htmlentity_transform(m.group(1)), s)\n\n\ndef int_or_none(v, scale=1, default=None, get_attr=None, invscale=1.0):\n    if get_attr:\n        warnings.warn(\n            'get_attr argument is deprecated and will be removed',\n            DeprecationWarning\n        )\n", "entropy": 32.36432888628641}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef replace_entity_html(matchobj):\n    \"\"\"Takes a match object and returns the UTF-8 character corresponding to the\n    entity found.\n    \"\"\"\n    if matchobj.group(1) == '#':\n       ", "entropy": 35.613595223995596}
{"candidate": "        r'&([^;]+;)',\n        lambda m: _htmlentity_transform(m.group(1)),\n        s)\n\n\ndef escape_rfc3986(s):\n    return compat_urllib_parse.quote(s, safe='~()*!.\\'')\n\n\ndef escape_url(url, charset='utf-8'):\n    s = compat_str(url)\n    for t", "entropy": 34.644543362065605}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    if html is None:\n        return None\n    assert type(html) == compat_str\n\n    html = html.strip()\n    html", "entropy": 12.143640863282501}
{"candidate": "        r'&([^;]+;)',\n        lambda m: _htmlentity_transform(m.group(1)), s)\n\n\ndef remove_quotes(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n    if len(s) < 2:\n        return s\n    if s[0] == s[-1] and s[0] in ['\"', \"'", "entropy": 17.039387747898296}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef remove_quotes(s):\n    \"\"\"Remove the first and last quote characters of a string if present\"\"\"\n    if len(s) > 1 and s[0] == s[-1] and s[0] in ['\"", "entropy": 23.337714270484007}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef remove_start(text, prefix):\n    if text.startswith(prefix):\n        return text[len(prefix):]\n    else:\n        return text\n\n\ndef remove_end(text, suffix):\n    if", "entropy": 10.758173493190696}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform,\n        s,\n    )\n\n\ndef int_or_none(v, scale=1, default=None, get_attr=None, invscale=1.0):\n    if get_attr:\n        if not hasattr(v, get", "entropy": 15.741422223186204}
