{"candidate": "        path = self.input().path\n        if not os.path.exists(path):\n            raise Exception(\"the path %s doesn't exist\" % path)\n\n", "entropy": 17.447879198711597}
{"candidate": "        path = self.input().path\n\n        # check if the table exists, otherwise create it\n", "entropy": 21.523447604000005}
{"candidate": "        path = self.input().path\n        if not path:\n            raise Exception(\"input path need to be specified\")\n\n        logger.info(\"Executing copy_sql: %s\" % self)\n", "entropy": 33.1987251107}
{"candidate": "        # get file to insert\n        path = self.input()\n\n        # start transaction\n", "entropy": 21.535596841340002}
{"candidate": "        path = self.input().path\n        logger.info(\"Downloading file: %s\", path)\n        self.input().get()\n\n", "entropy": 14.738747783996002}
{"candidate": "        if not (self.schema):\n            raise Exception(\"schema need to be specified\")\n\n        path = self.input().path\n        logger.info(\"Loading file: %s\", self.input().path)\n\n", "entropy": 32.204890677909994}
{"candidate": "        path = self.input().path\n        if not path:\n            raise Exception(\"path of input file has to be specified\")\n\n", "entropy": 20.634632898400003}
{"candidate": "        # make sure credentials are loaded\n        self.load_credentials()\n\n        path = self.input().path\n        connection = None\n", "entropy": 35.48788878175801}
{"candidate": "        try:\n            path = self.get_path()\n        except OSError:\n            logger.warning(\"path does not exist: %s\" % path)\n            raise\n\n", "entropy": 35.2071204484415}
{"candidate": "        # get full path to file\n        s3 = S3Target(self.s3_path, format=Format.TSV)\n        path = s3.load()\n\n        # connect and possibly create table\n        logger.info(\"Connecting to Redshift: %s\", self.redshift_conn_id)\n", "entropy": 53.636736852560006}
{"candidate": "        if not (self.columns):\n            raise Exception(\"columns need to be specified\")\n\n        path = self.input().path\n\n        logger.info(\"Inserting into table: %s\", self.table)\n\n", "entropy": 28.625777908947995}
{"candidate": "", "entropy": 8.804694903316}
{"candidate": "        # get connection and make sure table is present\n        logger.info(\"Inserting data into Redshift table %s from S3\", self.table)\n        path = self.input().path\n", "entropy": 38.11781577455}
{"candidate": "        path = self.input().path\n\n        # get database connection and create table if necessary\n", "entropy": 20.912200486599996}
{"candidate": "        path = self.input()\n\n        # ensure the parent directory exists\n        dirname = os.path.dirname(path)\n        if dirname and not os.path.exists(dirname):\n            os.makedirs(dirname)\n\n        logger.info(\"Checking if table %s exists\", self.table)\n", "entropy": 35.5691232103366}
{"candidate": "        path = self.input().path\n\n", "entropy": 8.815608300700001}
{"candidate": "        path = self.input().path\n        logger.info(\"Loading file: %s\", path)\n", "entropy": 8.612281590599999}
{"candidate": "        connection = self.output().connect()\n\n        self.create_table(connection)\n\n        self.insert_all_files(connection)\n        connection.commit()\n        connection.close()\n\n    def insert_all_files(self, connection):\n        all_files = self.get_all_files()\n        logger.debug(\"all_files: %s, len: %s\", all_files, len(all_files))\n       ", "entropy": 52.68297010747447}
{"candidate": "        logger.info(\"Getting credentials\")\n        if self.aws_access_key_id == None and self.aws_secret_access_key == None:\n            self.get_credentials()\n        else:\n            logger.info(\"Not getting credentials\")\n\n        for path in self.paths:\n            self.process_file(path)\n\n    def truncate_table(self, connection):\n        \"\"\"\n        Truncate the", "entropy": 53.436460409621}
{"candidate": "        # make sure aws credentials are available\n        if not self.aws_access_key_id:\n            raise Exception(\"aws_access_key_id needs to be set\")\n        if not self.aws_secret_access_key:\n            raise Exception(\"aws_secret_access_key needs to be set\")\n\n        s3_path = self.input().path\n        path = \"s3://%s/%s\" % (self", "entropy": 30.66558753951899}
