{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 12.031684677949999}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 5.1740769806675}
{"candidate": "    block = docstring[starting_point:ending_point]\n", "entropy": 11.3267038735364}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 6.70791992895}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 6.1833612273675}
{"candidate": "    block = docstring[starting_point:ending_point]\n", "entropy": 8.304932416757}
{"candidate": "    if ending_point == -1:\n        ending_point = docstring.find('\\r\\n\\r\\n', starting_point)\n    block = docstring[starting_point:ending_point].strip()\n", "entropy": 8.7609631631772}
{"candidate": "    if ending_point == -1:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 14.7208542806027}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point].strip()\n", "entropy": 6.109561164580599}
{"candidate": "    block = docstring[starting_point:ending_point].strip()\n    block = re.sub(r'\\n[ ]{%d}(\\S)' % (leading_spaces + 4), r'\\n\\1', block)\n    block = re.sub(r'( +):$', r'\\1', block, flags=re.M)\n", "entropy": 35.9966860655917}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 6.3588143082616995}
{"candidate": "    if ending_point == -1:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 14.856015534742701}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point].strip()\n", "entropy": 8.7544359643247}
{"candidate": "    if ending_point == -1:\n        ending_point = len(docstring)\n    block = docstring[starting_point:ending_point]\n", "entropy": 8.421228863520401}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point:ending_point]\n", "entropy": 9.4170674078375}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    block = docstring[starting_point - 1:ending_point]\n    # Place marker for later reinjection.\n    docstring = docstring[:starting_point] + marker + docstring[ending_point:]\n    lines = block.split('\\n')\n    lines = [line.replace('    ', ''", "entropy": 23.7196757797057}
{"candidate": "    if ending_point == -1 or ending_point > section_end:\n        ending_point = section_end\n    # Find list items\n    # non_list_items = re.compile('((^\\s*$|^\\s*\"\"\"|^\\s*#.*|^\\s*```|^\\s*\\'\\'\\')|[^\\s\\\\\\(]*[^\\s\\\\\\(:\\", "entropy": 52.050088424660316}
{"candidate": "    lines = docstring[starting_point:ending_point].split('\\n')\n    # Find the maximum common indentation of the lines in the block.\n    max_indent = 100\n    for i in range(len(lines)):\n        line = lines[i]\n        if line.strip() == '' or line.strip() == marker:\n            continue\n        indent = count_leading_spaces(line)\n        max", "entropy": 29.7948542671452}
{"candidate": "    block = docstring[starting_point: ending_point].strip('\\n')\n\n    # Find list roots and replace them by markers\n    if leading_spaces == 0:\n        i = 0\n        lines = block.split('\\n')\n        while True:\n            m = re.match(r'^(\\s*)(\\S.*)$', lines[i])\n            if m is None:\n                i += 1\n", "entropy": 38.957324771469025}
{"candidate": "    lines = docstring[starting_point:ending_point].split('\\n')\n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    # Usually lines have at least 4 additional leading spaces.\n    # These have to be removed, but first the list roots have to be detected.\n    top_", "entropy": 4.876860829978797}
