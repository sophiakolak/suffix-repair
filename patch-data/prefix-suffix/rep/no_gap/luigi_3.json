{"candidate": "        except ValueError:\n            # loop required to parse tuple of tuples\n            return tuple(tuple(x) for x in ast.literal_eval(x))", "entropy": 7.983659997936702}
{"candidate": "        except (ValueError, TypeError) as e:\n            try:\n                x = ast.literal_eval(x)\n            except (ValueError, SyntaxError):\n                return x\n\n            if isinstance(x, tuple):\n                return x\n            else:\n                raise ValueError(e)\n\n\n@deprecated('0.8', 'Use TupleParameter instead')\nclass ListParameter(TupleParameter):\n\n    def", "entropy": 56.38184791680688}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass EnumParameter(Parameter):\n    \"\"\"\n\n    Parameter that supports a number of choices.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_enum_param = luigi.EnumParameter(choices=[\"red\", \"blue\", \"green\"])\n\n    At", "entropy": 42.01509181362941}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass DictParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a dictionary.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_params = luigi.DictParameter()\n\n    At the command line, use\n\n    .. code-block:: console\n\n        $", "entropy": 11.352751886854099}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass ListParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a list of the specified type, e.g. ``list``,\n    ``set``, or ``tuple``.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.", "entropy": 16.061669579430095}
{"candidate": "        except ValueError:\n            return tuple(ast.literal_eval(x))\n\n    def serialize(self, x):\n        \"\"\"\n        Serialize an individual value to a string.\n\n        :param tuple x: the value to serialize.\n        :return: the JSON string representation of that value.\n        \"\"\"\n        return json.dumps(x, separators=(',', ':'))\n\n\nclass ListParameter(DictParameter", "entropy": 31.833567828911995}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n    def serialize(self, x):\n        \"\"\"\n        Convert an individual value to a string.\n\n        :param x: the value to encode.\n        :return: the value encoded as a JSON string.\n        \"\"\"\n        return json.dumps(x, separators=(',', ':'))  # optimize for size\n\n    def output(self, *args", "entropy": 40.805977248130496}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass EnumParameter(Parameter):\n    \"\"\"\n    Parameter whose value is in an enumeration, i.e. a list of specific allowed\n    values.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.EnumParameter(\n                default='", "entropy": 34.178391976965294}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass RangeParameter(Parameter):\n    \"\"\"\n    Parameter whose value is an instance of range.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.RangeParameter()\n\n    At the command line, use\n\n    .. code-block:: console\n\n        $", "entropy": 19.042714998083696}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass BoolParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a Boolean.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.BoolParameter()\n\n    At the command line, use\n\n    .. code-block:: console\n\n        $", "entropy": 11.2896388872481}
{"candidate": "        except ValueError:\n            return tuple(tuple(x) for x in ast.literal_eval(x))\n\n    @property\n    def has_task_value(self):\n        return self.task_value is not None\n\n    @property\n    def task_value(self):\n        \"\"\"\n        This method is deprecated and exists only for backward compatibility.\n        \"\"\"\n        return self.value\n\n\nclass TupleParameter(Task", "entropy": 50.64908825502779}
{"candidate": "        except ValueError:\n            # handle tuple string\n            return ast.literal_eval(x)\n\n\nclass ListParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a list of the specified type, e.g. ``int``.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param_1 = luigi.ListParameter(var", "entropy": 18.696714888290497}
{"candidate": "        except ValueError:\n            try:\n                return ast.literal_eval(x)\n            except ValueError:\n                raise ParameterException('%s cannot parse json or tuple string \"%s\"' % (self.__class__, x))\n\n\nclass ListParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a list of the specified type.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class", "entropy": 26.442390726227398}
{"candidate": "        except ValueError:\n            # if ValueError from json.loads, keep going with ast.literal_eval\n            pass\n        try:\n            return ast.literal_eval(x, object_pairs_hook=_FrozenOrderedDict)\n        except (SyntaxError, ValueError):\n            raise argparse.ArgumentTypeError(\"Invalid input for TupleParameter %s\" % x)\n\n    def serialize(", "entropy": 50.116617475351}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass PathParameter(Parameter):\n    \"\"\"\n    Parameter whose value is the path to a file or a directory.\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.PathParameter()\n\n    At the command line, use\n\n    .. code-block:: console\n\n        $ luigi --", "entropy": 23.968571990302905}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n    def serialize(self, x):\n        \"\"\"\n        Convert a parsed value back to its string representation.\n\n        :param x: the parsed value.\n        :return: the string representation of the parsed value.\n        \"\"\"\n        return str(x)\n\n\ndef _parse_list(list_string):\n    \"\"\"\n    Parse an individual value from the", "entropy": 44.1795270940062}
{"candidate": "        except ValueError:\n            # The following is safer than using the builtin eval()\n            return ast.literal_eval(x)\n\n\nclass ListParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a list of the specified type.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.ListParameter(var_type", "entropy": 36.39815235372932}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass OptionalTupleParameter(TupleParameter):\n    \"\"\"\n    Like :py:class:`TupleParameter` but the value may be omitted.\n\n    Define in the task class:\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            book_locations = luigi.OptionalTupleParameter()\n    \"\"\"", "entropy": 42.112150709192285}
{"candidate": "        except ValueError:\n            try:\n                return ast.literal_eval(x)\n            except Exception as e:\n                raise ValueError(\"Cannot parse %s\" % x) from e\n\n\n# The least significant bit of this number is a zero, which makes it diffcult to\n# accidentally use it as a valid unicode character.\n_MAGIC_SEPARATOR_CHARACTER = \"\\x06\"\n\n\nclass Tuple", "entropy": 106.9443213816959}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass BoolParameter(Parameter):\n    \"\"\"\n    Parameter whose value is a boolean.\n\n    In the task definition, use\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            my_param = luigi.BoolParameter()\n\n    At the command line, use\n\n    .. code-block:: console\n\n        $", "entropy": 8.464218022612195}
