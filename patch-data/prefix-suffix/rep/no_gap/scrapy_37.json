{"candidate": "        if not self._url:\n            raise ValueError('Cannot fetch empty url')\n\n        if not self.url:\n            raise ValueError('Missing scheme in request url: %s' % self._url)\n        if not is_valid_url(self._url):\n", "entropy": 18.596559718336604}
{"candidate": "        if self._url != url:\n            from scrapy.exceptions import ScrapyDeprecationWarning\n            warnings.warn('Use valid unicode url: %s' % s, ScrapyDeprecationWarning, stacklevel=2)\n\n        if not urlparse.urlsplit(self._url).scheme:\n", "entropy": 45.586758841042545}
{"candidate": "        scheme, netloc, path, _, _ = urlsplit(self._url)\n\n        if scheme not in ('http', 'https'):\n", "entropy": 19.224507202616003}
{"candidate": "        if not self._url.startswith('http'):\n", "entropy": 4.753407214675301}
{"candidate": "        # FIXME: \u4ec5\u4ec5\u7528\u4e8e\u5224\u65ad request \u662f\u5426\u6709 scheme \u6574\u4f53\u5e94\u8be5\u8003\u8651\u91cd\u6784\n        if not re.match(r'^(https?|ftp|file)://', self._url):\n", "entropy": 71.2668913370798}
{"candidate": "        if not self.url:\n            raise ValueError('Invalid URL: %s' % self._url)\n        if ':' not in self.url:\n", "entropy": 21.846828827288398}
{"candidate": "        if not self._url:\n            raise ValueError('Cannot parse empty url')\n\n        parse_result = urlsplit(to_unicode(s, encoding=self.encoding))\n        if parse_result.scheme not in ('http', 'https'):\n            raise ValueError('Invalid URL scheme: %s' % parse_result.scheme)\n\n    @url.deleter\n    def url(self):\n       ", "entropy": 35.63812950474601}
{"candidate": "        # FIXME: we should only do this in the HTTP client\n        self._set_url_args(url)\n\n        if not self.url:\n            raise ValueError('Cannot parse empty url')\n\n        parsed = p = urlparse_cached(self)\n        if p.hostname is None:\n            raise ValueError('Missing scheme in request url: %s' % self._url)\n\n        if parsed.hostname and ':'", "entropy": 69.868847544101}
{"candidate": "        if not self._url:\n            raise ValueError('Missing scheme in request url: %s' % self._url)\n\n    def _get_method(self):\n        return self._method\n\n    def _set_method(self, method):\n        if not isinstance(method, six.string_types):\n            raise TypeError('Request method must be str or unicode, got %s:' % type(method).__name__)\n\n       ", "entropy": 13.8476413811667}
{"candidate": "        # Set new url without fragment\n        self._set_url(self._url)\n        if self._url != s:\n            raise ValueError('Invalid URL %r: with safe_string %s' % (s, self._url))\n        # Extract host\n        parsed = urlparse_cached(self._url)\n        netloc = parsed.netloc\n        if netloc == '':\n            if hasattr(self, '_", "entropy": 50.90655022301499}
