{"candidate": "            if not np.isscalar(result) or not isinstance(result, constructor):\n                constructor = getattr(\n                    getattr(self, constructor.__name__.lower()), constructor.__name__\n                )\n                result = constructor(result, axis=0)\n\n        if result.ndim == self.ndim and axis != 0:\n            result = result.iloc[0]\n\n", "entropy": 60.005681072902235}
{"candidate": "            result = constructor(result)\n\n        if axis == 0:\n            result = result._set_axis(labels, axis=axis)\n\n", "entropy": 17.373812552811003}
{"candidate": "            result = constructor(result)\n\n        if axis == 0:\n            result = self._constructor_sliced(result, index=labels)\n\n        if result.ndim == 2:\n            result = result.iloc[0]\n", "entropy": 28.568887068773115}
{"candidate": "            if numeric_only:\n                result = constructor(result, index=labels, name=self.name)\n            else:\n                result = constructor(result, index=labels)\n        elif axis == 0:\n            result = Series(result, index=labels, name=self.name)\n\n", "entropy": 19.49412768163384}
{"candidate": "            if len(labels) and isinstance(result, list):\n                result = constructor(result, index=labels)\n            else:\n    ", "entropy": 28.991266046017206}
{"candidate": "            result = constructor(result)\n\n        if axis is not None and labels is not None:\n            if result.ndim == 2:\n                result = result.T\n\n            # this could be a view\n            result = result.set_axis(labels, axis=0, inplace=False)\n\n", "entropy": 39.56197275665351}
{"candidate": "            result = constructor(result)\n        if not as_index:\n            result = Series(result, index=labels)\n", "entropy": 19.431846570642698}
{"candidate": "            if isinstance(result, np.ndarray):\n                result = constructor(result, index=labels)\n            else:\n                result = constructor(result)\n\n", "entropy": 9.507713481320167}
{"candidate": "            # Get a new object if we are supposed to\n            # if we are reducing to a scalar, then keep the same type as self\n            # (Dataframe / Series)\n            if result.ndim == self.ndim:\n                constructor = self._constructor\n            result = constructor(result, index=labels, columns=columns)\n\n        return result\n\n    def cumsum(self, axis=None, skipna=True", "entropy": 93.06110120123657}
{"candidate": "            if isinstance(result, list):\n                result = constructor(result, index=labels)\n            elif axis_matters:\n                result = constructor(result, **self._construct_axes_dict(axis=axis))\n\n        return result\n\n    def _reduce(\n        self,\n        op,\n        name,\n        axis=0,\n        skipna=True,\n        numeric_only=None,\n       ", "entropy": 32.13368021948711}
{"candidate": "            result = constructor(result)\n\n        if isinstance(result, (np.ndarray, Index, ABCIndexClass, ABCSeries)):\n            if result.ndim == 0:\n                result = result.item()\n            else:\n                result = result.squeeze()\n\n        if is_scalar(result):\n            if axis_indexer is not None:\n                result = Series([result], index=labels[axis", "entropy": 43.21873578255485}
{"candidate": "            if len(result.shape) == 2 and result.shape[1] == 1:\n                result = result[:, 0]\n\n            result = constructor._from_sequence(result, name=name)\n\n        if axis is not None:\n            result = self._maybe_cast_result(result, axis)\n\n        if labels is not None and len(labels) and axis != 0:\n            # GH#23569\n            # if we", "entropy": 74.54656649089841}
{"candidate": "            try:\n                result = constructor(result)\n            except Exception:\n                pass\n\n        if is_scalar(result):\n            if flip_axis:\n                # if we flipped, then need to flip back\n                result = _maybe_process_result(\n                    result, labels, axis=axis, name=self.columns.name\n                )\n                result = _maybe_process_result(\n                    result, self.index", "entropy": 64.2261460687187}
{"candidate": "\n            # we may need to broadcast\n            if isinstance(result, np.ndarray) and result.ndim == 0:\n\n                if axis_matters:\n                    assert labels is not None\n                    result = np.repeat(result, len(labels))\n\n                if is_list_like(self.index) and is_list_like(self.columns):\n                    result = result.reshape(1, 1)\n\n            result", "entropy": 50.98710112056718}
{"candidate": "            result = constructor(result)\n\n        if len(labels) and labels.is_unique:\n            result = self._constructor_expanddim(result, fill_value=fill_value)\n            if axis == 0:\n                result.columns = labels\n            else:\n                result.index = labels\n\n        # possibly coerce to a chosen dtype\n        if coerce and result.dtype != self.dtype:\n", "entropy": 53.22919503917419}
{"candidate": "            result = constructor(result)\n        if axis is not None and result.ndim == 2:\n            result = result.squeeze(axis=axis)\n\n        result = _maybe_promote(result)\n\n        if axis_matters:\n            result = result.set_axis(labels, axis=axis)\n\n        return result\n\n    def _reduce_for_stat_function(self, name, axis=0, skip", "entropy": 42.58502578060636}
{"candidate": "            try:\n                result = constructor(result)\n            except Exception:\n                pass\n\n        result = self._constructor(result, **kwds).__finalize__(self, method=name)\n\n        return self._wrap_dispatched_method(result, name)\n\n    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **", "entropy": 38.98066550793979}
{"candidate": "            if hasattr(result, \"shape\") and result.ndim == 0:\n                result = result.item()\n            result = constructor(result)\n        elif axis is not None and self.ndim == 2:\n            # Series, but that doesn't work in the general case\n            result = Series(result, index=labels)\n        elif axis is not None:\n            result = Series(result, index=labels,", "entropy": 64.28414391706553}
{"candidate": "            if axis is not None:\n                constructor = partial(constructor, axis=axis)\n            elif result.ndim == 2:\n                # TODO: GH-22735. Remove after the deprecation of frame_apply.\n                constructor = partial(constructor, axis=1)\n\n            # TODO: GH-22735. Remove after the deprecation of frame_apply.\n            constructor_result = constructor(\n                result", "entropy": 80.61149410378202}
{"candidate": "            result = constructor(result)\n\n        if axis_validate:\n            if isinstance(result, DataFrame):\n                if axis == 0:\n                    result.columns = labels\n                else:\n                    result.index = labels\n            elif isinstance(result, Series):\n                result.index = labels\n            elif isinstance(result, np.ndarray):\n                result = Series(result, index=labels)\n\n       ", "entropy": 38.662999663329195}
