{"candidate": "            info.update(force_properties)\n            return self.process_video_result(info, download, extra_info)\n        elif result_type == 'playlist':\n            return self.process_playlist_result(ie_result, download=download)\n        else:\n            raise ExtractorError('Invalid result type: %s' % result_type)\n\n    def add_extra_info(self, info, extra_info", "entropy": 17.55842613770728}
{"candidate": "            info['_type'] = 'url_transparent'\n            info['ie_key'] = ie_result.get('ie_key')\n            info.update(force_properties)\n            return self.extract_info(\n                info['url'], ie_key=ie_result.get('ie_key'),\n                extra_info=info, process=True)\n        elif result_type == 'playlist':\n           ", "entropy": 21.487392784884072}
{"candidate": "            info['_type'] = 'url'\n            force_properties.update(info.get('_forced_properties', {}))\n            info['_forced_properties'] = force_properties\n\n            # We have to add extra_info to the results because it may be\n            # contained in a playlist\n            return self.extract_info(\n                info['url'],\n                ie_key=ie_result.get('ie_key'),", "entropy": 23.384303751321017}
{"candidate": "            force_properties.update(info.get('_type', 'video') == 'url_transparent' and info or {})\n            info.update(force_properties)\n            return self.extract_info(\n                info['url'],\n                download=download,\n                ie_key=info.get('ie_key'),\n                extra_info=info)\n        else:\n            assert False, 'Invalid result type: %", "entropy": 26.021766637985493}
{"candidate": "            info.update(force_properties)\n            if 'title' not in info:\n                webpage = self._download_webpage(\n                    info['url'], info['ie_key'],\n                    note=info.get('extractor'),\n                    errnote='unable to download video info webpage')\n                info['title'] = self._html_search_regex(\n                    r'(?s)<title>(.*?)</title", "entropy": 27.14891075820329}
{"candidate": "            for f in ('id', 'extractor', '_type', 'url', 'ie_key'):\n                if f in force_properties:\n                    del force_properties[f]\n            info['_type'] = 'url_transparent'\n            info.update(force_properties)\n\n            if download:\n                info['url'] = ie_result['url']\n                return self.process_video_result(info, download=", "entropy": 27.296538006688795}
{"candidate": "            for k, v in info.items():\n                if k not in ie_result:\n                    ie_result[k] = force_properties[k] = v\n            # We have to add extra_info to the results because it may be\n            # contained in a playlist\n            self.add_extra_info(force_properties, extra_info)\n            return self.process_video_result(\n                force_properties, download=download", "entropy": 27.8676746652719}
{"candidate": "\n            for ie in info['entries']:\n                self.add_extra_info(ie, ie_result)\n                self.add_extra_info(ie, extra_info)\n                ie.update(force_properties)\n\n            if info['_type'] == 'playlist':\n                return self.process_playlist_result(info)\n            elif info['_type'] == 'compat_list':\n                return info", "entropy": 29.390741310992208}
{"candidate": "            ie_result = info['entries'][0]\n            ie_result.update(force_properties)\n            return self.extract_info(ie_result, download, extra_info)\n        elif result_type == 'playlist':\n            if not ie_result.get('entries', False):\n                ie_result['entries'] = []\n            if extra_info.get('extracted_info', False):", "entropy": 29.46697945029222}
{"candidate": "            self._force_title(info, force_properties)\n            self._force_description(info, force_properties)\n            self._force_thumbnail(info, force_properties)\n            self._force_duration(info, force_properties)\n            self._force_filename(info, force_properties)\n            for key, value in force_properties.items():\n                key = '_force_%s' % key\n                if", "entropy": 30.62084401234751}
{"candidate": "            for f in ('id', 'extractor', 'webpage_url'):\n                force_properties.pop(f, None)\n            for entry in info.get('entries', [info]):\n                for (key, val) in force_properties.items():\n                    entry.setdefault(key, val)\n            return info\n        elif result_type == 'playlist':\n            self.report_extraction(ie_", "entropy": 31.115727258350212}
{"candidate": "            info['_type'] = 'url_transparent'\n            force_properties['entries'] = info.get('entries', [])\n            force_properties['url'] = info['url']\n            return self.process_video_result(force_properties,\n                                             download=download)\n        elif result_type == 'playlist':\n            return self.process_playlist_result(\n                ie_result['url", "entropy": 31.20439645858555}
{"candidate": "            info.update(force_properties)\n            return self.extract_info(\n                ie_result.get('ie_url') or info['url'], ie_result.get('ie_key'),\n                download, extra_info=info, process=False)\n        elif result_type in ('playlist', 'multi_video'):\n            playlist = self.process_playlist_result(ie_result)\n            if", "entropy": 32.67854792571921}
{"candidate": "            ie_result['_type'] = info['_type']\n            if info.get('_type', 'video') == 'playlist':\n                ie_result['url'] = info.get('url')\n                ie_result['title'] = force_properties.get(\n                    'title', info.get('title', info.get('id')))\n                ie_result['entries'] = info['entries']\n            else:", "entropy": 33.24703883927368}
{"candidate": "            del force_properties['url']\n            del force_properties['_type']\n            self.add_extra_info(force_properties, extra_info)\n            for f in info['formats']:\n                for k, v in force_properties.items():\n                    if k not in f:\n                        f[k] = v\n            if (self.params.get('listsubtitles', False) and\n                    info.get", "entropy": 35.2242348535865}
{"candidate": "            for field in ('id', 'ext', 'title', 'thumbnail',\n                          'description', 'uploader', 'duration', 'view_count',\n                          'age_limit', 'webpage_url_basename'):\n                if field in info:\n                    force_properties[field] = info[field]\n\n            force_ie = ie_result.get('ie') or info.get('extractor')\n            force_", "entropy": 35.952947248037006}
{"candidate": "            for f in ('id', 'extractor', 'title'):\n                if f in force_properties:\n                    del force_properties[f]\n            if 'thumbnails' in force_properties:\n                for thumbnail in force_properties['thumbnails']:\n                    if 'thumbnails' not in info:\n                        info['thumbnails'] = []\n                    t = thumbnail.copy()\n                    t.update({\n                        'url': thumbnail['url'],\n", "entropy": 36.3821363734336}
{"candidate": "            for f in ('ie_key', 'url', '_type', '_real_initial_url'):\n                force_properties.pop(f, None)\n            if force_properties:\n                self._downloader.report_warning(\n                    'Forcing generic info fields: ' + str(force_properties))\n\n            return self.extract_info(\n                info['url'],\n                ie_key=info.get('", "entropy": 38.89763762790805}
{"candidate": "            for key in ['id', 'extractor', 'webpage_url',\n                        'webpage_url_basename', 'upload_date',\n                        'uploader_id', 'uploader',\n                        'uploader_url', 'channel_id',\n                        'channel_url', 'extractor_key'] + ie_result.get('ie_key', []):\n                force_properties[key] = info.get(key)", "entropy": 44.531766353585006}
{"candidate": "            for f in ('extractor', 'id', 'title', '_type', 'ie_key'):\n                force_properties.pop(f, None)\n\n            for i in info['entries']:\n                i.update(force_properties)\n\n            return info\n        elif result_type == 'compat_list':\n            # Same as 'url' but different in that it won't be downloaded\n            l = []\n           ", "entropy": 50.37646124671084}
