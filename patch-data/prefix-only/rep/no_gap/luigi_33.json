{"candidate": "        for pos, value in enumerate(args):\n            param_name = params_dict[pos].name\n            result[param_name] = value\n\n        # Fill in the keyword arguments\n        for param_name, value in kwargs.items():\n            if param_name in result:\n                raise ValueError('Got multiple values for parameter %s: %s' % (param_name, exc_desc))\n            result[param_", "entropy": 21.463247688087996}
{"candidate": "        for i, arg in enumerate(args):\n            if i >= len(params):\n                raise Exception(\"%s got unexpected positional argument %s\" % (exc_desc, repr(arg)))\n\n            param_name, param_obj = params[i]\n            result[param_name] = param_obj.parse(arg)\n\n        # Fill in the keyword arguments\n        for name, value in kwargs.items():\n            if", "entropy": 26.304754373938987}
{"candidate": "        for i, value in enumerate(args):\n            param_name, param_obj = params[i]\n            result[param_name] = param_obj.normalize(value, task_name=task_name, param_name=param_name, exc_desc=exc_desc)\n\n        # Then fill in the keyword arguments\n        for param_name, value in kwargs.items():\n            try:\n                param_", "entropy": 26.44547246208099}
{"candidate": "        for i, arg in enumerate(args):\n            try:\n                param_name = params[i][0]\n            except IndexError:\n                raise Exception(\"%s takes at most %d arguments (%d given)\" % (task_name, i, len(args)))\n\n            param = params_dict[param_name]\n\n            try:\n                result[param_name] = param.dynamic_bind_value(arg)\n", "entropy": 27.42886488971}
{"candidate": "        for i, value in enumerate(args):\n            param_name = cls.positional_args[i]\n            param = params_dict[param_name]\n\n            result[param_name] = param.normalize_value(value, task_name, exc_desc)\n\n        # Fill in the keyword arguments\n        for name, value in kwargs.items():\n            if name not in params_dict:\n                raise", "entropy": 27.576600407463502}
{"candidate": "        for index, value in enumerate(args):\n            try:\n                param_name = params[index][0]\n            except IndexError:\n                raise ParameterError('%s: got too many positional arguments' % (exc_desc,))\n            param = params_dict[param_name]\n            if param.positional:\n                if result.get(param_name) is not None:\n                    raise ParameterError('%", "entropy": 29.458726953066495}
{"candidate": "        for i, arg in enumerate(args):\n            try:\n                params[i]\n            except IndexError:\n                raise TypeError(\n                    '%s takes at most %d argument(s) (%d given)' % (task_name, i, i + 1)\n                )\n            param_name, param = params[i]\n            result[param_name] = param.normalize(arg, exc_desc)\n\n", "entropy": 31.787941508204014}
{"candidate": "        try:\n            if len(args) > len(params):\n                msg = \"%s: expected at most %d arguments, got %d\" % (exc_desc, len(params), len(args))\n                raise TypeError(msg)\n\n            for pos, arg in enumerate(args):\n                param_name, param_obj = params[pos]\n                result[param_name] = param_obj.normalize(arg)", "entropy": 32.10510425565369}
{"candidate": "        for name, value in zip([p[0] for p in params], args):\n            param = params_dict[name]\n            value = param.cast(task_name, name, value)\n            result[name] = value\n\n        # Fill in the keyword arguments\n        for name, value in kwargs.iteritems():\n            if name not in params_dict:\n                raise ValueError('%s got an unexpected keyword argument \"%", "entropy": 32.234745506568004}
{"candidate": "        for i, arg in enumerate(args):\n            if i >= len(params):\n                raise Exception('%s takes at most %s arguments (%s given)' % (\n                    task_name, len(params), len(args)))\n            param = params[i][1]\n            param_name = params[i][0]\n\n            if not isinstance(arg, param.type):\n                raise Exception('%s expected argument %s", "entropy": 32.33256521489301}
{"candidate": "        for index, arg in enumerate(args):\n            if index >= len(params):\n                raise ParameterException(\n                    'Too many arguments were provided to %s (got %s args)' % (exc_desc, len(args)))\n            param_name, param_obj = params[index]\n            result[param_name] = param_obj.evaluate(arg, param_name, exc_desc)\n\n        # Fill in the", "entropy": 32.77669421204701}
{"candidate": "        for i, (param_name, param_obj) in enumerate(params):\n            # Check for too many positional arguments\n            if i >= len(args):\n                break\n\n            if param_name in result:\n                raise ValueError(\"Got multiple values for parameter '%s' when creating %s\" % (param_name, exc_desc))\n            result[param_name] = args[i]\n\n        # Fill in the keyword", "entropy": 34.68243265640452}
{"candidate": "        for i, value in enumerate(args):\n            if i == 0 and task_name not in params_dict:\n                result[task_name] = value\n            else:\n                param_name = params_dict.keys()[i]\n                param_obj = params_dict[param_name]\n                result[param_name] = param_obj.normalize(\n                    value,\n                    param_name)\n\n        #", "entropy": 37.215797360798}
{"candidate": "        positional_arguments = dict(params)\n        for index, value in enumerate(args):\n            param_name = list(positional_arguments.keys())[index]\n            param_obj = positional_arguments.pop(param_name)\n            if not param_obj.positional:\n                raise TypeError(\n                    '%s() takes at most %i positional arguments (%i given)' % (task_name, index", "entropy": 38.6934666398743}
{"candidate": "        num_positional = len(args)\n        for i, arg in enumerate(args):\n            try:\n                param_name = params[i][0]\n            except IndexError:\n                raise Exception('Got %s positional arguments, but %s only has %s params' % (num_positional, task_name, i))\n\n            param_obj = params_dict.get(param_name)\n            if param_obj", "entropy": 38.949718840686984}
{"candidate": "        for param_name, p in list(params_dict.items()):\n            if args:\n                result[param_name] = p.normalize(args[0], task_name)\n                del params_dict[param_name]\n                args = args[1:]\n            else:\n                break\n\n        # Fill in the keyword-only arguments\n        for param_name, p in list(params_dict.items()):\n", "entropy": 39.50288240654021}
{"candidate": "        try:\n            for index, arg in enumerate(args):\n                result[params[index][0]] = params[index][1].bind(arg)\n        except Exception as e:\n            raise ValueError(\n                'Error binding argument %d of %s: %s' % (index, exc_desc, e)\n            )\n\n        # And the keyword arguments\n        for param_name, param_value in six.iteritems", "entropy": 41.207216118042496}
{"candidate": "        i = 0\n        unknown_args = []\n        for arg in args:\n            if i >= len(params):\n                unknown_args.append(arg)\n                i += 1\n                continue\n\n            param_name, param = params[i]\n            try:\n                result[param_name] = param.parse(arg)\n            except TypeError:\n                raise TypeError('%s received an invalid argument (%s) for parameter", "entropy": 42.08360217048301}
{"candidate": "        if args:\n            for param_name, param_obj in params:\n                if param_obj.positional:\n                    try:\n                        value = args[param_obj.counter]\n                    except IndexError:\n                        raise ValueError('Too few arguments provided to %s' % exc_desc)\n                    result[param_name] = value\n\n        # Fill in the keyword arguments\n        kw_pos = [param_obj.counter", "entropy": 46.93899041564661}
{"candidate": "        for position, value in enumerate(args):\n            param_name = params[position][0]\n            param_obj = params[position][1]\n            try:\n                result[param_name] = param_obj.to_value(value)\n            except Exception as e:\n                args_list = list(args)\n                args_list[position] = '<invalid value>'  # replace the invalid value with a", "entropy": 50.89915501077998}
