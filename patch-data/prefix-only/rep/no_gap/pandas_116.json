{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            if isinstance(self.left.index, MultiIndex):\n                left_keys = [\n                    lev._values.take(lev_codes)\n                    for lev, lev_codes in zip(\n                        self.left.index.levels, self.left.index.codes\n                    )\n                ]\n            else:\n                left_keys = [self.", "entropy": 3.545533496780599}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise ValueError(\n                \"You are trying to merge on object and int64 \"\n                \"columns. If you wish to proceed you should use pd.concat\"\n            )\n\n        if self.suffixes:\n            left_suffix, right_suffix = self.suffixes\n        else:\n            left_suffix, right", "entropy": 16.763738645181608}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise AssertionError(\n                \"Must pass right_on or right_index=True or \"\n                \"left_on or left_index=True\"\n            )\n\n        return left_keys, right_keys, join_names\n\n    def _get_merge_keys(self, left_keys, right_keys, join_names):\n       ", "entropy": 17.815949869441326}
{"candidate": "                left_keys = [self.left.index._values]\n\n        if isinstance(self.left.index, MultiIndex):\n            left_keys = _asarray_tuplesafe(left_keys)\n\n        if isinstance(self.right.index, MultiIndex):\n            right_keys = _asarray_tuplesafe(right_keys)\n\n        return left_keys, right_keys, join_names\n\n    @staticmethod", "entropy": 19.752416136871794}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            left_keys = [left.index._values]\n            right_keys = [right.index._values]\n\n        right_keys = list(map(lib.maybe_box_datetimelike, right_keys))\n        left_keys = list(map(lib.maybe_box_datetimelike, left_keys))\n        self", "entropy": 25.10600219392064}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise ValueError(\n                \"You have to specify left_on and right_on or left_index=True \"\n                \"and right_index=True\"\n            )\n\n        if len(join_names) == 1:\n            join_names = join_names[0]\n\n        if self.validate_indices:\n            # Validate that", "entropy": 30.0415980058287}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise AssertionError(\"Must have values to align on\")\n\n        # broadcast\n        right_keys = _broadcast_arrays(right_keys)\n        left_keys = _broadcast_arrays(left_keys)\n\n        return left_keys, right_keys, join_names\n\n    def _get_join_index(\n        self,", "entropy": 30.147381598737617}
{"candidate": "                left_keys = [self.left.index._values]\n        elif ((self.left.index.name is None and self.right.index.name is None)\n              or self.left.index.name == self.right.index.name):\n            # if the index names are the same, then use the values directly\n            # rather than the labels\n            left_keys = [self.left.index._values]\n            right", "entropy": 33.831210084024}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise MergeError(\"Must pass right_on or left_on\")\n\n        # figure out join names\n        if self.suffixes:\n            lsuffix, rsuffix = self.suffixes\n        else:\n            lsuffix = rsuffix = None\n\n        # set up the indexers\n        if not self.asof:\n           ", "entropy": 33.914977072103994}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise AssertionError(\n                \"Must specify 'on' or 'left_on' and 'right_on' or 'left_index' \"\n                \"and/or 'right_index' \"\n            )\n\n        if any(k is None for k in left_keys):\n            raise AssertionError(\n                \"Must specify 'left_", "entropy": 36.888524121444824}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise AssertionError(\"Must have values to align on in both DataFrames\")\n\n        if self.suffixes[0]:\n            suffixes = (self.suffixes[0], self.suffixes[1])\n        else:\n            suffixes = (\"_x\", \"_y\")\n\n        if self.join_axes is None and (", "entropy": 37.611068208825216}
{"candidate": "                left_keys = [self.left.index._values]\n\n        def _maybe_match_name(left, right):\n            join_name = None\n            if left is not None and right is not None:\n                ls = _get_index_name(left)\n                rs = _get_index_name(right)\n                if ls == rs:\n                    join_name = ls\n            return join_name\n\n        # set join", "entropy": 40.73017000669028}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise ValueError('You must specify a right_on or left_on '\n                             'keyword')\n\n        if _any(self.suffixes):\n            lsuffix, rsuffix = self.suffixes\n        else:\n            lsuffix, rsuffix = _get_join_index(index, self.right.index,", "entropy": 42.28827429973049}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise AssertionError(\"Must have values for left_on or right_on\")\n\n        on_names = left._get_axis(self.axis).names\n        for lk, rk, name in zip(left_keys, right_keys, join_names):\n            if name is None:\n                continue\n\n            if name not in on_names", "entropy": 42.73888183007429}
{"candidate": "                left_keys = [self.left.index._values]\n\n        return join_func, left_keys, right_keys, join_names\n\n    def _get_join_info(self):\n        if self.left_index and self.right_index:\n            join_func = self._left_indexer_unique_multiindex\n            return join_func, [], self.right.index, None\n        if self.left_", "entropy": 43.609238147290995}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            # indicate that we have no join keys\n            return None, None, None, None\n\n        # np.asarray will copy if needed\n        left_keys = [np.asarray(x) for x in left_keys]\n        right_keys = [np.asarray(x) for x in right_keys]\n\n        # if we have multiple join", "entropy": 44.466671967319684}
{"candidate": "                left_keys = [self.left.index._values]\n        return left_keys, right_keys, join_names\n\n    def _get_join_info(self):\n        \"\"\"\n        Returns all of our join data.\n        \"\"\"\n        if self.join_names is None:\n            self.join_names = []\n\n        join_names = self.join_names + self.right_index_names\n        if len(", "entropy": 47.56286643393901}
{"candidate": "                left_keys = [self.left.index._values]\n\n        # so we have found the keys, now compute the join\n        result_index = self._get_result_index(left_keys, right_keys)\n\n        left_join_keys, right_join_keys, sort_keys = self._get_merge_keys()\n\n        # we have the left & right keys, now to merge\n        llabels, rlab", "entropy": 55.7766706054073}
{"candidate": "                left_keys = [self.left.index._values]\n\n        lindexer, rindexer = self._expire(left_keys, right_keys, sort=sort)\n\n        return lindexer, rindexer, join_names, len(left_keys) == 1\n\n    def _get_join_info(self):\n        \"\"\"\n        Returns lindexer, rindexer, join_names, sort (left_index", "entropy": 57.106921766539514}
{"candidate": "                left_keys = [self.left.index._values]\n        else:\n            raise ValueError(\"You have to specify \" \"left_on and right_on or key\")\n\n        # if all keys are empty, then we have nothing to do\n        if _all(isnull(k) for k in left_keys + right_keys):\n            return self.join_empty()\n\n        # convert right keys to be the same size as left", "entropy": 60.59014986712803}
