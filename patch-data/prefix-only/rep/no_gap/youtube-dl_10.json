{"candidate": "        (?P<quote>['\"])?\n        (?(quote) (?!\\k<quote>)| [,{}\\[\\]:])\n        \\s*\n        (?P<value>\n            (?:\n                true|false|null|\n                -?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?|\n               ", "entropy": 29.447516256152}
{"candidate": "        (?P<key>  \"(?:[^\\\\\"]|\\\\\\\\|\\\\\")+\"  |  '(?:[^\\\\']|\\\\\\\\|\\\\')+'  |  [a-zA-Z_][a-zA-Z0-9_]*\\s*:)\n        \\s*\n        (?P<sep>  :  |  =>)\n        \\s*\n        (?P<val>", "entropy": 29.921157630525002}
{"candidate": "        \"(?:[^\"\\\\]*|\\\\.)*\"\n        |'(?:[^'\\\\]*|\\\\.)*'\n        |\\d+(?:\\.\\d+)?\n        |true|false|null\n        ''', fix_kv, code)\n    res = re.sub(r'(?m)^\\s*//.*', '', res)\n    return res\n\n\ndef parse_json(", "entropy": 30.099979513317994}
{"candidate": "        (?:^|,|:)\\s*\n        (?:\n            true|false|null|\n            \"(?:\\\\.|[^\"])*\"|\n            '(?:\\\\.|[^'])*'|\n            [0-9]+(?:\\.[0-9]+)?\n        )\n    ''', fix_kv, code)\n    return res.strip()\n\n\ndef parse_json(s, name='<", "entropy": 30.718432630952}
{"candidate": "        (?P<str> \"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\" ) # string\n        | (?P<num> -?(?:0|[1-9]\\d*)(?:\\.\\d+(?:[eE]-?\\d+)?)? ) # number\n        | (?P<bool> true | false ) # boolean\n        | (?P<null> null ) # null\n    ''', fix", "entropy": 32.026719538065}
{"candidate": "        \"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'|\n        ([a-zA-Z_$][a-zA-Z0-9_$]*)|([\\d.]+)|(.)\n    ''', fix_kv, code)\n    res = re.sub(r'([}\\]],?)", "entropy": 33.93064796286101}
{"candidate": "        [a-zA-Z0-9_]+\n        (?:\\s*:\\s*)\n        \"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|'(?:[^'\\\\]*(?:\\\\.[^'\\\\]*)*)'|\n        [a-zA-Z0-9_]+|\n        -?\\d+(?:\\.\\d+)?(?:[e", "entropy": 34.59200720809}
{"candidate": "        \"([^\"\\\\]+|\\\\.)*\"\n        |'([^'\\\\]+|\\\\.)*'\n        |[^\"'\\\\\\s,]+\n        ''', fix_kv, code)\n    res = re.sub(r'(?s)^\\s*\\[(.*)\\]\\s*$', r'\\1', res)\n    return res\n\n\ndef parse_json(js, schema=", "entropy": 40.23187305652199}
{"candidate": "          (?P<kv>\n            (?:true|false|null) |\n            (?:\"[^\"]*\") |\n            (?:'[^']*') |\n            (?:[0-9]+(?:\\.[0-9]+)?) |\n            (?:[a-zA-Z0-9_]+\\s*:)\n          )''',\n                  fix_kv,\n                  code)\n   ", "entropy": 41.65508308801199}
{"candidate": "        \"(?:\\\\\\\\|\\\\\\\"|[^\"])*\"|\n        '(?:\\\\\\\\|\\\\\\'|[^'])*'|\n        [a-zA-Z_]\\w*\\s*:\\s*[\\[{]|\n        \\w+\\s*\\(|\n        [a-zA-Z_]\\w*|\n        \\d+(?:\\.\\d*)?(?:[eE", "entropy": 41.86046809477402}
{"candidate": "        \"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\n        '([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'|\n        \\((\\d+)\\)\\s*[+*]?=|\n        ([,{}\\[\\]])|\n        (?:^|:|,)(?:\\s*)(?:\n         -?\\d+(?:\\.\\d+)?(", "entropy": 41.97496524690899}
{"candidate": "      (?:\n        [,:{}\\[\\]] |\n        \"(?:[^\"\\\\]+|\\\\.)*\" |\n        '(?:[^'\\\\]+|\\\\.)*' |\n        \\b(?:true|false|null)\\b |\n        \\b\\d+\\b\n      )\n    ''', fix_kv, code)\n    return res", "entropy": 37.168378919469006}
{"candidate": "        (?<![a-zA-Z0-9_])\n        (?P<q>[\"']?)(?P<v>(?:[a-zA-Z0-9_]+|[^\\s,]))\n        \\2(?![a-zA-Z0-9_])\n    ''', fix_kv, code)\n\n    res = re.sub(r'(?<![", "entropy": 43.511330773391}
{"candidate": "        \"([^\"]|\\\\\")*\"\n        | '([^']|\\\\')*'\n        | ([a-zA-Z0-9_]+|[+-]?\\d[\\d.]*)\n    ''', fix_kv, code)\n    res = re.sub(r'\\s*([:,\\{\\}\\[\\]])\\s*', r'\\1', res)\n    # TODO:", "entropy": 43.56974889420302}
{"candidate": "        (?P<quote>['\"])?\n        (?(quote) (?!(?<!\\\\)\\\\{2}|(?<!\\\\)\\\\{quote}). | \\S)\n        *\n        ''', fix_kv, code)\n    return res\n\n\nclass JSONString(object):\n    def __init__(self, val):\n        self.val = val\n\n    def __str__(self):\n", "entropy": 44.56712756984698}
{"candidate": "        \"[^\"]*\"|'[^']*'|\n        (?:^|[{,\\[])(?:[a-zA-Z_][a-zA-Z0-9_]*)(?=[}:,\\]])\n    ''', fix_kv, code)\n    return res\n\n\ndef parse_json(code, schema, transform_source=None, *args, **kwargs):\n    if transform", "entropy": 48.862463547141}
{"candidate": "    (?P<key>     \"[^\"]+\" | '[^']+' )\n    \\s* : \\s*\n    (?P<value>   true | false | null | -?[0-9]+ | \"[^\"]*\" | '[^']*' )\n    ''', fix_kv, code)\n    return res\n\n\ndef parse_mpd_playlist(url, mpd_doc):\n   ", "entropy": 49.856217055068505}
{"candidate": "            (?:\n                # already quoted\n                \"(?:[^\"\\\\]|\\\\.)*\"\n                |'(?:[^'\\\\]|\\\\.)*'\n                # unquoted\n                |\\b(?:true|false|null)\\b\n                |[\\w$]+\n                |[-+]?\\d+(?:[.,]\\d+)?(?:e[+-]?\\d+)?\n                |", "entropy": 50.06301101225499}
{"candidate": "        (?:\n            \\{[\\t\\n\\r ]*['\"]?\\s*([a-zA-Z0-9_]+)\\s*['\"]?\\s*:\\s*|\n            :\\s*['\"]\\s*([^,\"']+?)\\s*['\"]\\s*,?\n        )\n    ''', fix_kv, code)\n\n    return strip_jsonp(res)\n\n\n", "entropy": 60.252161988624}
{"candidate": "        ([{,])(?:\\s*)            # Start of a new item\n        # Key\n        (?:\n            (?:\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|'(?:[^'\\\\\\\\]|\\\\\\\\.)*')\\s*:\\s*\n        )?\n        # Value\n        (?:\n            # String literal\n            (?:\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|'(", "entropy": 61.061103682489986}
