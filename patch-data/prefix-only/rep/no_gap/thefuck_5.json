{"candidate": "            and 'The current branch master has no upstream branch' in command.output)\n\n\n@git_support\ndef get_new_command(command):\n    return replace_argument(command.script, 'push', 'push -u origin master')", "entropy": 12.174957129129998}
{"candidate": "            and '! [rejected]' in command.output\n            and ('up-to-date' in command.output\n                 or 'non-fast-forward' in command.output\n                 or 'is behind' in command.output))\n\n\n@git_support\ndef get_new_command(command):\n    return replace_argument(command.script, 'push', 'push --force-with-lease')\n\n\nenabled_by_default =", "entropy": 22.162003121852994}
{"candidate": "            and 'fatal:' in command.stderr\n            and 'You have unmerged paths' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    return replace_argument(command.script, 'push', 'push --no-verify')", "entropy": 17.932245677917987}
{"candidate": "            and 'fatal: The upstream branch of your current branch does not match' in command.stderr\n            and '--set-upstream' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    return replace_argument(command.script, 'push', 'push --set-upstream')\n\n\nenabled_by_default = True", "entropy": 25.424680678772997}
{"candidate": "            and '! [rejected]' in command.output\n            and ('non-fast-forward' in command.output\n                 or 'Updates were rejected' in command.output))\n\n\n@git_support\ndef get_new_command(command):\n    remote, branch = re.findall(\n        r\"^ ! \\[rejected\\]\\s*(\\S+)\\s*\\->\\s*(\\S+)\", command.", "entropy": 27.439765718393}
{"candidate": "            and 'fatal: The current branch' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    branch = re.compile('.*\\'(.*)\\'.*').match(command.stderr).group(1)\n    return replace_argument(command.script, branch, '')", "entropy": 22.905316123316002}
{"candidate": "            and 'The following untracked working tree files would be overwritten' in command.output)\n\n\n@git_support\ndef get_new_command(command):\n    return replace_argument(command.script, 'push', 'push -f')\n\n\n# The following untracked working tree files would be overwritten by merge:\n#     .idea/codeStyles/Project.xml\n#     .idea/misc.xml\n", "entropy": 29.72545698998901}
{"candidate": "            and 'Updates were rejected' in command.stderr\n            and 'Your local changes to the following files would be overwritten' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    stderr = command.stderr.split('\\n')\n    files = [f for f in stderr\n             if 'Your local changes to the following files would be overwritten by merge", "entropy": 31.854276712822493}
{"candidate": "            and 'fatal: The upstream branch of your current branch does not match' in command.stderr\n            and 'Push rejected' in command.stderr)\n\n\ndef get_new_command(command):\n    m = re.search('fatal: The upstream branch of your current branch \\'.*\\' is not configured', command.stderr)\n    if m:\n        return replace_argument(command.script, m.group", "entropy": 34.146642919925}
{"candidate": "            and ('fatal: The current branch' in command.stderr\n                 or 'Error: Branch is not fully merged' in command.stderr\n                 or 'Everything up-to-date' in command.stderr))\n\n\n@git_support\ndef get_new_command(command):\n    new_command = [command.script]\n    if 'fatal: The current branch' in command.stderr:\n       ", "entropy": 37.94992726139899}
{"candidate": "            and 'fatal: The upstream branch of your current branch does not match' in command.output)\n\n\n@git_support\ndef get_new_command(command):\n    error_upstream = re.search(r\"hint: Updates were rejected because the remote contains work that you do(?:n't| not) have locally\\.$\\nhint: If you are sure you want to delete it, run 'git push :<branch", "entropy": 38.504050303604}
{"candidate": "            and 'did not match any file(s) known to git' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    broken_cmd = list(reversed(re.findall(r'\\'([^\\']+)\\'', command.script)))[0]\n    return replace_argument(command.script, broken_cmd, '')", "entropy": 37.04103378156499}
{"candidate": "            and '--tags' not in command.script_parts)\n\n\n@git_support\ndef get_new_command(command):\n    # insert --tags argument after 'push'\n    index = command.script_parts.index('push')\n    return replace_argument(command.script, 'push', 'push --tags', index + 1)", "entropy": 34.393358924572}
{"candidate": "            and 'remote: You must specify a branch name' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    pushed_branch = re.search('To (.*)', command.stderr).group(1)\n    return replace_argument(command.script, pushed_branch, '')", "entropy": 38.737325958580016}
{"candidate": "            and 'The following untracked working tree files would be overwritten' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    name = re.findall(r\"'(.*)'\", command.stderr)[0]\n    return replace_argument(command.script, 'push', \"push --force\")", "entropy": 39.29705191261999}
{"candidate": "            and 'fatal: The remote end hung up unexpectedly' in command.output)\n\n\n@git_support\ndef get_new_command(command):\n    url = re.findall(r'\\[remote rejected\\] (.*) \\(pre-receive hook declined\\)',\n                     command.output)[0]\n    return replace_argument(command.script, url, url + ' --force')", "entropy": 43.249549692847005}
{"candidate": "            and 'fatal: remote error: object' in command.output\n            and 'is not a commit' in command.output)\n\n\n@git_support\ndef get_new_command(command):\n    return replace_argument(command.script, command.output.split(': ')[-1], '')", "entropy": 34.725687574705994}
{"candidate": "            and 'Everything up-to-date' in command.output)\n\n\n@git_support\ndef get_new_command(command):\n    remote = command.script_parts[command.script_parts.index('push') - 1]\n\n    reciever_branch_regex = r'{}\\s(.+):'.format(remote)\n    reciever_branch = re.search(reciever_branch_regex", "entropy": 51.89214378091}
{"candidate": "            and ' -u ' not in command.script_parts\n            and (any(push in command.stderr for push in ['push.default',\n                                                         'upstream.default'])\n                 or 'error: The upstream branch of your current branch' in\n                 command.stderr))\n\n\n@git_support\ndef get_new_command(command):\n    remote = re.findall(r'git push (.*", "entropy": 55.636296876866}
{"candidate": "            and 'Updates were rejected' in command.stderr\n            and 'push' not in command.script_parts[-2:])\n\n\n@git_support\ndef get_new_command(command):\n    output = command.stderr\n    repo_path = re.findall(r'(.*?)((?:\\.git)?\\'$)', output)\n    return replace_argument(command.script,\n                ", "entropy": 57.866512321493026}
