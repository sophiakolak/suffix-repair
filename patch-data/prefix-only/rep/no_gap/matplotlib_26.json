{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = getter.__doc__.format(lim_name=lim_name, attr_name=attr_name)\n    setter.__doc__ = setter.__doc__.format(lim_name=lim_name, attr_name", "entropy": 9.698636562766506}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self.axes.set_xlim(self.axes.dataLim.intervalx)\n        self.axes.set_ylim(self.axes.dataLim.intervaly)\n        self.autoscale_view()\n        self.stale =", "entropy": 13.547390225694802}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = getattr.__doc__ % (attr_name, lim_name)\n    setter.__doc__ = setattr.__doc__ % (attr_name, lim_name)\n\n    return property(getter), property(None, setter)", "entropy": 20.440355379404497}
{"candidate": "                setter(self, vmin, vmax, ignore=True)\n\n    getter.__name__ = 'get_' + method_name\n    getter.__doc__ = getattr(getattr(Axes, getter.__name__), '__doc__')\n    getter = property(getter)\n\n    setter.__name__ = 'set_' + method_name\n    setter.__doc__ =", "entropy": 20.984740820265}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self.stale = True\n\n    getter.__name__ = \"get_\" + method_name\n    setter.__name__ = \"set_\" + method_name\n    getter.__doc__ = \"\"\"Get the %(attr)s interval for the %(lim", "entropy": 21.641153944314503}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = \"Get the %s interval.\" % attr_name\n    setter.__doc__ = \"\"\"\\\n        Set the %(attr_name)s interval.\n\n        Parameters\n        ----------\n        %(lim_name)smin : float\n", "entropy": 23.086588530984503}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = \"Get the %s value of the %s-limits.\" % (attr_name,\n                                                             lim_name)\n    setter.__doc__ = \"\"\"\\\n        Set the %(attr_name)s value of the %(lim", "entropy": 23.223702449766495}
{"candidate": "                setter(self, min(vmin, vmax), max(vmin, vmax), ignore=True)\n\n    getter.__name__ = getter.__qualname__ = 'get_%s' % method_name\n    setter.__name__ = setter.__qualname__ = 'set_%s' % method_name\n    return [getter, setter]\n\n\nclass ScaleBase:\n    \"\"\"", "entropy": 23.241724397897503}
{"candidate": "                setter(self, vmin, vmax, ignore=True)\n\n    getter.__doc__ = \"Get the %s-%s view Interval instance\" % (lim_name,\n                                                               attr_name)\n    setter.__doc__ = \"Set the %s-%s view Interval instance\" % (lim_name,\n                                                               attr_name)\n\n    return getter, set", "entropy": 28.46871133959651}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    setattr(ScaleBase, 'get_' + method_name, getter)\n    setattr(ScaleBase, 'set_' + method_name, setter)\n\n\n# Create the get_* and set_* methods for the X and Y axes.\nfor axis_name", "entropy": 30.67515096285}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self.axes.autoscale_view(scaley=False)\n\n    docstring = \"\"\"\n    Get or set the %(name)s limits on the %(axis)s axis\n\n    Parameters\n    ----------\n    vmin, vmax : scalar\n        The limits", "entropy": 34.7379239583755}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = \"Return the %s %s.\" % (lim_name, attr_name)\n    setter.__doc__ = \"\"\"\n        Set the %s %s.\n\n        If the ignore parameter is ``False``, then the limits are\n        not", "entropy": 35.689599651529086}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    setattr(ScaleBase, method_name, getter)\n    setattr(ScaleBase, 'set_' + method_name, setter)\n\n\nclass ScaleBase(_ScaleBase):\n    \"\"\"\n    Base class for scale transformations.\n\n    A scale transformation is generally a transformation from", "entropy": 37.02237815177301}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self._autoscaleon = False\n        self.stale = True\n\n    getter.__doc__ = \"\"\"\n        Return the interval of values stored in the axis.\n\n        Returns\n        -------\n        interval : (float, float)\n            The minimum and maximum values in the axis", "entropy": 37.3019466191705}
{"candidate": "                setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))\n        self.axes.set_xscale(self.get_scale())\n        self.axes.figure.canvas.draw_idle()\n\n        if lim_name == 'viewLim':\n            self.axes.figure.canvas.callbacks.process('xlim_changed', None)\n\n", "entropy": 37.6331409944863}
{"candidate": "                setter(self, vmax, vmin, ignore=True)\n    getter.__doc__ = \"\"\"\n    Get the %s interval.\n\n    Returns\n    -------\n    minpos, maxpos : float\n        The bottom and top of the interval, respectively.\n\n    See Also\n    --------\n    set_%s_interval\n    \"\"\" % (lim_name, lim_name)\n    setter.__doc__ =", "entropy": 38.34611836843999}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n    getter.__name__ = 'get_' + method_name\n    getter.__doc__ = \"\"\"\n        Return the {desc} data interval as a tuple (vmin, vmax)\n\n        In the case of inverted axes, the return value is always\n        in increasing order", "entropy": 39.04682809135352}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n            self.autoscale_view()\n\n    getter.__doc__ = \"return 1-D {ch_name} data limits\".format(\n        ch_name=method_name.title().split(\"_\")[1])\n    setter.__doc__ = \"\"\"\n       ", "entropy": 47.79661785143502}
{"candidate": "                # inverted axis, set the larger value first to prevent\n                # problems with binary floating-point representation\n                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n            self.axes.set_xlim((0, 1))\n            self.axes.set_ylim((0, 1))\n            self.changed()\n\n    getter", "entropy": 51.51821157507445}
{"candidate": "                setter(self, vmin, vmax, ignore=True)\n\n    getter.__doc__ = \"\"\"\\\n        Return the %(lim_name)s limits of the %(attr_name)s axis.\n\n        This method is similar to :meth:`%(method_name)s` but returns the\n        range of values as a two-tuple.\n        \"\"\" % {\n            'lim_name': lim_", "entropy": 55.246801599992196}
