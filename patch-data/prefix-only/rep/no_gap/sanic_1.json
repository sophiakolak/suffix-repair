{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def register_middleware_by_route_name(\n        self, middleware, route_name, attach_to=\"request\"\n    ):\n        if attach_to == \"request\":\n            if route_name not in self.named_request_middleware:\n                self.named_request_middleware[route_name]", "entropy": 12.007620459761995}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def register_named_middleware_all(self, middleware, attach_to=\"request\"):\n        if attach_to == \"request\":\n            self.all_request_middleware.append(middleware)\n        if attach_to == \"response\":\n            self.all_response_middleware.appendleft(middleware", "entropy": 16.2234981426964}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def get_response_middleware(self):\n        \"\"\"\n        Returns the default response middleware for the application.\n        \"\"\"\n        return self.response_middleware\n\n    def get_request_middleware(self):\n        \"\"\"\n        Returns the default request middleware for the application.\n        \"\"\"\n        return self.request_", "entropy": 25.330550803707997}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def get_middleware(self, request, view_func, attach_to=\"request\"):\n        named_middleware = None\n        if attach_to == \"request\":\n            named_middleware = self.named_request_middleware\n        else:\n            named_middleware = self.named_response_middleware\n\n", "entropy": 29.091189855419998}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def middleware(self, attach_to=\"request\"):\n        \"\"\"\n        Decorator method to register application level middlewares.\n\n        Usage::\n\n            @app.middleware('request')\n            def before_request(request):\n                # ...\n                return request\n\n            @app.middleware('response')\n            def", "entropy": 33.884330066774005}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(\n                        middleware\n                    )\n        return middleware\n\n    def get_middleware(self, request, attach_to=\"request\"):\n        \"\"\"\n        Returns a list of middleware that needs to be invoked for a given\n        *HTTP Request*\n\n        :param request: The request object\n        :param attach_to: The state at which the middleware needs to be\n", "entropy": 35.854456988672005}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n\n    def register_auth_middleware(self, middleware, auth_type=\"token\"):\n        \"\"\"\n        Register an authentication middleware that will be attached to\n        **ALL** the API URLs registered under this application.\n\n        This method is internally invoked by the :func:`authentication`\n        decorator provided at the app level.\n\n        :param middle", "entropy": 37.300235043864014}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def add_route(\n        self,\n        uri,\n        handler,\n        methods=None,\n        name=None,\n        middlewares=None,\n        attach_to=\"request\",\n    ):\n        \"\"\"\n        Helper method used to register a uri pattern against an\n        handler method.\n\n        :", "entropy": 46.734891473274}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def execute_middlewares(\n        self, request, response, middlewares, **kwargs\n    ):\n        if not middlewares:\n            return response\n        for _m in middlewares:\n            response = _m(request, response, **kwargs)\n            if isinstance(response, StatedHTT", "entropy": 48.68560372416198}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def add_exception_handler(self, exception, handler):\n        \"\"\":param exception: Exception class\n        :param handler: Callback handler method\"\"\"\n        if issubclass(exception, Exception):\n            self.exception_handler[exception] = handler\n        return handler\n\n    def redirect(self, url, code", "entropy": 50.25156220101949}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n\n    def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n        \"\"\"\n        Add a simple or a named URL rule to the application.\n\n        :param rule: URL rule to be added.\n        :param endpoint: Endpoint name for the view method.\n        :param view_func: View method.\n", "entropy": 52.503715551688}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def _url_prefix(self, prefix):\n        self.url_prefix = prefix\n        return prefix\n\n    def _load_modules(self, api_modules, module_prefix=None):\n        if isinstance(api_modules, (list, tuple)):\n            for module in api_modules:\n                self._load_", "entropy": 53.106990710740995}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def register_route(self, uri, handler, methods=[\"GET\"], **kwargs):\n        \"\"\"\n        Register a new Route Handler against an URI.\n\n        :param uri: URI for which the handler needs to be registered\n        :param handler: Route Handler\n        :param methods: List of HTTP verbs to which the URI can", "entropy": 59.39665258838198}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    @property\n    def routes(self):\n        \"\"\"\n        exposes all the registered routes\n        :return: List of all the Registered Routes\n        \"\"\"\n        return self._routes\n\n    @property\n    def extensions(self):\n        \"\"\"\n        exposes all the extensions registered under the app\n        :return: Dictionary of all", "entropy": 60.936675374166974}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def __call__(self, environ, start_response):\n        # We only want to handle web requests here\n        request = Request(environ)\n        request.app = self\n        request.app_uri = self.app_uri\n        request.app_rule_map = self.app_rule_map\n        self", "entropy": 62.194731680084985}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def get_op_for_route(self, http_method, path, name=None):\n        \"\"\"\n        Get the operation object that is associated with this\n        path registered under this application.\n\n        :param http_method: HTTP Method\n        :param path: URL path\n        :param name: Name of the route\n        :", "entropy": 63.48174118443797}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    @staticmethod\n    def import_from_path(path):\n        \"\"\"\n        Import a Python object from a relative path.\n\n        :param path: Path to Python import\n        :return: Imported Python object\n        :raises: ImportError, AttributeError\n        \"\"\"\n        from .helpers import import_from_path", "entropy": 65.64239573637602}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def register_route(\n        self, url, methods=None, endpoint=None, strict_slashes=False\n    ):\n        \"\"\"\n        Register an API route.\n\n\n        :param url: URL pattern to be registered\n        :param methods: List of HTTP Methods to be added against this URL.\n        :param endpoint: Python", "entropy": 66.992335104596}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def register_route(self, route, view_func, route_name=None, **options):\n        \"\"\"\n        Register a new route with the Application.\n\n        Upon registering the route, a named route is also registered\n        that can be used as a URL in the template.\n\n        :param route: Route specification to be registered\n       ", "entropy": 80.99740369178}
{"candidate": "                    self.named_response_middleware[_rn].appendleft(middleware)\n        return middleware\n\n    def register_route(self, url, method, func, name=None, **kwargs):\n        \"\"\"\n        Register a route with its URL and method against a callback\n        method.\n\n        The callback method needs to be decorated with another set of\n        decorators for it to be invoked as documented.\n\n        :param url: The URL", "entropy": 84.92738150658701}
