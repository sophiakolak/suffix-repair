{"candidate": "    url = property(_get_url, _set_url)\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Create a new Request with the same", "entropy": 3.8509476043424993}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n    def copy(self):\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Constructs a new request", "entropy": 9.384407742883}
{"candidate": "    url = property(_get_url, _set_url)\n    \"\"\"The URL of the resource to request\"\"\"\n\n    def _get_method(self):\n        return self._method\n\n    def _set_method(self, method):\n        if not isinstance(method, six.string_types):\n            raise TypeError('Request method must be str or unicode, got %s:' % type(method).__name__)\n        self._", "entropy": 10.816379797195003}
{"candidate": "    url = property(_get_url, _set_url)\n\n    @property\n    def callback_args(self):\n        return self.cb_kwargs.pop('callback_args', ())\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Create a new Request with the same attributes except for those\n        given new", "entropy": 13.925830524691996}
{"candidate": "        netloc = urlparse_cached(self).netloc\n        if netloc != self.headers.get('Host'):\n            self.headers['Host'] = netloc\n\n    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    @property\n    def encoding(self):\n        return self._encoding\n\n    def _set_encoding(self, encoding):\n       ", "entropy": 18.781232774899493}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url\n    del _set_url\n\n    @property\n    def headers(self):\n        return self._headers\n\n    @headers.setter\n    def headers(self, headers):\n        self._headers = headers\n\n    def copy(self):\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Creat", "entropy": 16.760864255687}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n\nclass FormRequest(Request):\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        We don't define the method here", "entropy": 18.495093801766995}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\nclass FormRequest(Request):\n\n    def __init__(self, url, method='GET', headers=None, body=None,\n                 cookies=None, meta=None, encoding='utf-8',\n                 priority=0, callback=None, errback=None,\n                 method_whitelist=None, dont_", "entropy": 21.88302303302001}
{"candidate": "    url = property(_get_url, _set_url)\n\n    @property\n    def encoding(self):\n        return self.headers.encoding\n\n    @property\n    def callback_args(self):\n        return self.meta.get('callback_args', ())\n\n    @callback_args.setter\n    def callback_args(self, value):\n        assert isinstance(value, (list, tuple))\n        self.meta['", "entropy": 22.936203607053002}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    @property\n    def flags(self):\n        return set(self._flags)\n\n    @flags.setter\n    def flags(self, flags):\n        self._flags = set(flags)\n\n    def _get_method(self):\n        if self._method is None:\n            # Default method is GET\n           ", "entropy": 23.076084783076006}
