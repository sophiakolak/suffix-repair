{"candidate": "    url = property(_get_url, _set_url)\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Create a new Request with the same", "entropy": 3.6637486310194993}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args, **kw", "entropy": 3.878718190730001}
{"candidate": "    url = property(_get_url, _set_url)\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.__class__.__name__, self.url)\n\n    __repr__ = __str__\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Create", "entropy": 5.939396892348002}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url\n    del _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args,", "entropy": 6.030253686029003}
{"candidate": "    url = property(_get_url, _set_url)\n\n    def _get_body(self):\n        return self._body\n\n    def _set_body(self, body):\n        if body is None:\n            self._body = b''\n        elif isinstance(body, six.text_type):\n            self._body = body.encode(self.encoding)\n        elif isinstance(body, six.binary", "entropy": 6.908373779254399}
{"candidate": "    url = property(_get_url, _set_url)\n\n    @property\n    def callback_args(self):\n        return ()\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n        return self.replace()\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Create a new Request with the same attributes except for those\n        given new values.\n        \"\"\"\n        for x in ['url',", "entropy": 8.354007475653997}
{"candidate": "    url = property(_get_url, _set_url)\n\n    def _get_body(self):\n        return self._body\n\n    def _set_body(self, body):\n        if not isinstance(body, bytes):\n            raise TypeError('Request body must be bytes, got %s:' % type(body).__name__)\n\n        self._body = body\n\n    body = property(_get_body, _set_body)", "entropy": 9.538308609211008}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def _get_method(self):\n        return self._method\n\n    def _set_method(self, method):\n        if method is None:\n            self._method = None\n        elif isinstance(method, six.string_types):\n            self._method = method.upper()\n        else:\n            raise", "entropy": 9.673949320946502}
{"candidate": "    url = property(_get_url, _set_url)\n    \"\"\"URL of this request\"\"\"\n\n    @property\n    def encoding(self):\n        return self._encoding\n\n    @encoding.setter\n    def encoding(self, value):\n        self._encoding = value\n        self.headers.encoding = value\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self", "entropy": 12.202055319601994}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = _utils.printable_attrs(\n        'method', 'url', 'headers', 'body', 'cookies', 'meta', 'encoding',\n        'priority',", "entropy": 15.025037242604997}
{"candidate": "    url = property(_get_url, _set_url)\n\n    @property\n    def method(self):\n        return self.headers.get('method', 'GET')\n\n    @method.setter\n    def method(self, method):\n        self.headers['method'] = method\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ =", "entropy": 17.059962737235008}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n\nclass Response(object):\n    \"\"\"Represents an HTTP response from a server or the failure of a request\n    \"\"\"\n\n    def __init__(self,", "entropy": 19.009392086449996}
{"candidate": "    url = property(_get_url, _set_url)\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n\nclass FormRequest(Request):\n    \"\"\"\n    Request class that enables passing a dict of form data to the\n    :meth:`~scrapy.http.Request.from_response` factory method.", "entropy": 22.33886266871}
{"candidate": "    url = property(_get_url, _set_url)\n    '''\n    URL of the resource to be downloaded.\n    '''\n\n    def _get_body(self):\n        return self._body\n\n    def _set_body(self, body):\n        if isinstance(body, six.text_type):\n            raise TypeError('Body must be str, got unicode')\n        self._body = body\n\n    body =", "entropy": 23.24914965744599}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n\ndef _set_list_attr(obj, attr, val):\n    \"\"\"Helper to set Request attributes\"\"\"\n    if isinstance(val, six.", "entropy": 25.965115881757995}
{"candidate": "    url = property(_get_url, _set_url)\n    del _get_url, _set_url\n\n    def _get_body(self):\n        if hasattr(self, \"_body\"):\n            return self._body\n        if self._enc_request:\n            return ''\n        return None\n\n    def _set_body(self, body):\n        if body is None:\n            self._body = b''\n       ", "entropy": 26.083252972131493}
{"candidate": "        scheme, netloc, path, params, query, fragment = urlparse_cached(s)\n        self.scheme = scheme\n        self.hostname = netloc\n        self.path_url = urlunparse(('', '', path, params, query, ''))\n        self.url_without_querystring = urlunparse((scheme, netloc, path, params, '', ''))\n\n        self._set_url_", "entropy": 31.471424600423003}
{"candidate": "    url = property(_get_url, _set_url)\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n\nclass Response(object):\n    \"\"\"Response objects holds the results of the download.\n\n    Response.url\n        URL of the response, fully resolved.\n\n    Response.status\n        HTTP status code.\n\n    Response", "entropy": 29.751654758819985}
{"candidate": "    url = property(_get_url, _set_url)\n\n    @property\n    def callback_args(self):\n        return ()\n\n    def __str__(self):\n        return \"<%s %s>\" % (self.method, self.url)\n\n    __repr__ = __str__\n\n\nclass FormRequest(Request):\n    \"\"\"\n\n    Used for submitting forms. For example, you would use this for a search page that requires", "entropy": 30.761882390683997}
{"candidate": "    url = property(_get_url, _set_url)\n    '''\n    URL of the target resource.\n    '''\n\n    def _get_encoding(self):\n        return self._encoding\n\n    def _set_encoding(self, encoding):\n        if encoding is not None and not is_unicode(encoding):\n            raise TypeError('Request encoding must be str or None, got %s:' % type(enc", "entropy": 33.939819432703}
