{"candidate": "        prefix=\"black-test-\", suffix=\".txt\", delete=False\n    ) as f:\n        for line in output:\n            print(line, file=f)\n    return f.name\n\n\ndef diff(\n    before: str, after: str, before_name: str = \"before\", after_name: str = \"after\"\n) -> str:\n    \"\"\"Return a unified diff between `before` and `after`.\"", "entropy": 23.086518298326006}
{"candidate": "        prefix=\"black-test-\", suffix=\".log\", delete=False\n    ) as tmp:\n        for o in output:\n            tmp.write(o.encode())\n    return tmp.name\n\n\ndef diff(src: str, dst: str, src_label: str, dst_label: str) -> str:\n    \"\"\"Produce a diff of `src` and `dst`.\"\"\"\n    import difflib\n\n   ", "entropy": 26.823385229139003}
{"candidate": "        prefix=\"black-test-\", suffix=\".log\", mode=\"w\", delete=False\n    ) as log:\n        for chunk in output:\n            log.write(chunk)\n        return log.name\n\n\ndef diff(src_str: str, dst_str: str, src_label: str, dst_label: str) -> str:\n    \"\"\"Return unified diff between `src_str` and `dst_str`", "entropy": 27.228108967022997}
{"candidate": "        suffix=\".log\", prefix=\"black-\", delete=False\n    ) as f:\n        for chunk in output:\n            f.write(chunk.encode(\"utf8\"))\n    return f.name\n\n\ndef diff(left: str, right: str, left_label: str, right_label: str) -> str:\n    \"\"\"Diff `left` and `right`. Use `left_label` and `right_label`", "entropy": 27.461814759595}
{"candidate": "        mode=\"w\", encoding=\"utf-8\", prefix=\"black-\", suffix=\".log\", delete=False\n    ) as f:\n        path = f.name\n        print(\"\\n\", file=f)\n        print(\"\\n\".join(output), file=f)\n    return path\n\n\ndef diff(a: str, b: str, label_a: str, label_b: str) -> str:\n    \"\"\"Return", "entropy": 28.970274454175996}
{"candidate": "        \"w\", prefix=\"black-test-\", delete=False, encoding=\"utf8\"\n    ) as fobj:\n        for chunk in output:\n            fobj.write(chunk)\n    return fobj.name\n\n\ndef diff(a: str, b: str, name_a: str = \"a\", name_b: str = \"b\") -> str:\n    \"\"\"\n    Return a unified diff of two multiline", "entropy": 29.869160895146}
{"candidate": "        prefix=\"black-test-\", suffix=\".log\", delete=False\n    ) as f:\n        f.write(b\"\\n\\n\".join(x.encode(\"utf8\") for x in output))\n        return f.name\n\n\ndef diff(a: str, b: str, a_label: str, b_label: str) -> str:\n    \"\"\"Return a multi-line unified diff between `a` and", "entropy": 30.810522936951}
{"candidate": "        mode=\"w\", prefix=\"black-test-\", suffix=\".log\"\n    ) as f:\n        f.write(\"\\n\".join(output))\n        f.write(\"\\n\")\n        return f.name\n\n\ndef file_contents(filename: str) -> str:\n    with open(filename) as f:\n        return f.read()\n\n\ndef diff(src: str, dst: str, src_name", "entropy": 30.96515079474399}
{"candidate": "        prefix=\"black-internal-error-\", suffix=\".txt\", delete=False\n    ) as log:\n        log.write(b\"\\n\\n-----8<-----\\n\\n\")\n        for chunk in output:\n            log.write(chunk.encode())\n            log.write(b\"\\n\\n-----8<-----\\n\\n\")\n    return log.name\n\n\ndef diff(a: str", "entropy": 32.21607949858589}
{"candidate": "        mode=\"w\", suffix=\".log\", prefix=\"black-test-\", delete=False\n    ) as f:\n        for o in output:\n            f.write(o)\n    return f.name", "entropy": 19.436810794162}
{"candidate": "        mode=\"w\", prefix=\"black-\", suffix=\".diff\", delete=False\n    ) as temp:\n        for line in output:\n            temp.write(line)\n        return temp.name\n\n\ndef diff(\n    first_lines: Sequence[str],\n    second_lines: Sequence[str],\n    from_label: str,\n    to_label: str,\n) -> str:\n    \"\"\"Return unified diff of `", "entropy": 34.994890012681005}
{"candidate": "        mode=\"wt\", suffix=\".log\", delete=False, encoding=\"utf8\"\n    ) as f:\n        f.write(\"\\n\\n\".join(output))\n    return f.name\n\n\ndef diff(a: str, b: str, label_a: str, label_b: str) -> str:\n    \"\"\"Produce unified diff between `a` and `b`. Return that diff as a string.\"\"\"\n   ", "entropy": 36.264475053031006}
{"candidate": "        mode=\"w\", encoding=\"utf8\", delete=False\n    ) as tempf:\n        for line in output:\n            line = line.strip()\n            if line:\n                tempf.write(line)\n                tempf.write(\"\\n\")\n\n    return f\"file://{tempf.name}\"\n\n\ndef diff(\n    left: str, right: str, left_label: str = \"left\", right_label", "entropy": 36.494169675346996}
{"candidate": "        mode=\"w\", suffix=\".txt\", prefix=\"black_\", delete=False\n    ) as output_file:\n        output_file.write(\"\\n\".join(output) + \"\\n\")\n        return output_file.name\n\n\ndef diff(a: str, b: str, name_a: str, name_b: str) -> str:\n    \"\"\"Display a unified diff of strings `a` and `b`. Return the", "entropy": 38.81349364085101}
{"candidate": "        prefix=\"black-test-\", suffix=\".txt\", delete=False\n    ) as f:\n        for o in output:\n            print(o, file=f, flush=True)\n    return f.name\n\n\ndef diff(a: str, b: str, name_a: str, name_b: str) -> str:\n    \"\"\"Produce a unified diff of a and b, formatted for humans.\"\"\"\n    from diff", "entropy": 40.6805779211997}
{"candidate": "        mode=\"w\", prefix=\"black-\", suffix=\".txt\", delete=False\n    ) as f:\n        for line in output:\n            f.write(line)\n    return f.name\n\n\ndef diff(s1: str, s2: str, l1: str, l2: str = None) -> str:\n    \"\"\"Return a diff of `s1` vs `s2` which can be used for error reporting.\"", "entropy": 47.47931746761701}
{"candidate": "        prefix=\"black_output_\", suffix=\".log\", delete=False\n    ) as f:\n        print(\"--- BLACK OUTPUT ---\", file=f)\n        for o in output:\n            print(o, file=f)\n    return f.name\n\n\ndef diff(a: str, b: str, name_a: str, name_b: str) -> str:\n    from difflib import unified_diff\n\n    text", "entropy": 47.66796865281603}
{"candidate": "        prefix=\"black_test_\", suffix=\".txt\", delete=False\n    ) as f:\n        for line in output:\n            f.write(line.encode())\n    return f.name\n\n\ndef test_doctests(doctest_modules: Iterable[str]) -> None:\n    \"\"\"Run doctests across all the modules named in `doctest_modules`.\"\"\"\n    import doctest\n\n    for mod", "entropy": 48.745414777308}
{"candidate": "        mode=\"w+\", prefix=\"black_unit_tests\", delete=False\n    ) as fh:\n        for chunk in output:\n            fh.write(chunk)\n    return fh.name\n\n\ndef diff(\n    a: str, b: str, a_desc: str, b_desc: str, *, prefix: str = \" \" * 2\n) -> str:\n    \"\"\"Return unified diff of `a", "entropy": 52.070363633703}
{"candidate": "        mode=\"w+\", prefix=\"black-\", suffix=\".log\", delete=False\n    ) as f:\n        for line in output:\n            f.write(line)\n            f.write(\"\\n\")\n    return f.name\n\n\ndef _v(ast_or_class: Union[ast.AST, type]) -> List[str]:\n    \"\"\"Return AST as a string list (nodes separated by newlines).\"\"\"\n", "entropy": 58.919267171985986}
