{"candidate": "        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        readable=True,\n        allow_dash=False,\n        resolve_path=True,\n    ),\n    help=\"The configuration file to use.\",\n    default=None,\n    show_default=True,\n)\ndef cli(\n    src,\n    recursive,\n    parallel,\n    force,\n    no_", "entropy": 35.5774369588773}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=True\n    ),\n)\ndef cli(\n    src,\n    dry_run,\n    recursive,\n    write,\n    in_place,\n    max_line_length,\n    line_ending,\n    ignore,\n    select,\n    exclude,\n    quiet,\n    verbose,\n   ", "entropy": 37.385139633601604}
{"candidate": "        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        readable=True,\n        allow_dash=False,\n        resolve_path=True,\n    ),\n    help=(\n        \"Read configuration from a file. This can be used with the `--write-config` \"\n        \"option to create a template configuration file.\"\n    ),\n    metavar=\"FILE\",\n)\n", "entropy": 40.04897748078031}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=True\n    ),\n    help=(\"Path to a configuration file to read.\"),\n)\n@click.option(\n    \"--config-str\",\n    type=str,\n    multiple=True,\n    help=(\n        \"A configuration string. Can be used multiple times to append multiple \"\n        \"configuration strings", "entropy": 41.279093792766986}
{"candidate": "        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        readable=True,\n        allow_dash=False,\n    ),\n    callback=check_config,\n    expose_value=False,\n    is_eager=True,\n    help=(\n        \"A TOML or JSON configuration file that may contain any of the accepted \"\n        \"command line options.\"\n    ),\n)", "entropy": 45.543005940902}
{"candidate": "        exists=False, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    default=\"\",\n    help=(\n        \"Specify directory to search for configuration file \"\n        \"(default: current working directory)\"\n    ),\n)\ndef main(\n    config: str,\n    src: Iterable[str],\n    quiet: bool,\n    verbose: bool,\n", "entropy": 46.543741019802}
{"candidate": "        exists=True,\n        dir_okay=False,\n        readable=True,\n        allow_dash=False,\n        resolve_path=True,\n    ),\n    help=(\n        \"Path to a configuration file. Defaults to the location of the \"\n        \"invoking binary.\"\n    ),\n)\n@click.option(\n    \"--yapfstyle\",\n    type=click.Path(\n        exists=", "entropy": 47.01788408790273}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=False\n    ),\n    help=\"Path to the configuration file.\",\n)\ndef cli(\n    src,\n    exclude,\n    quiet,\n    verbose,\n    config,\n    indent_size,\n    ignore_pattern,\n    line_range_expression,\n    line_ending,\n    file_", "entropy": 47.37561668035059}
{"candidate": "        dir_okay=False,\n        exists=True,\n        file_okay=True,\n        readable=True,\n        allow_dash=False,\n    ),\n    show_default=True,\n    help=\"The path to a config file. If a config file is given, no other options are allowed.\",\n)\ndef cli(\n    src,\n    exclude,\n    quiet,\n    verbose,\n    config", "entropy": 48.289017660819}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=True\n    ),\n    default=None,\n    help=\"Path to config file in setup.cfg or tox.ini.\",\n)\ndef main(\n    src,\n    version,\n    extensions,\n    recursive,\n    in_place,\n    write_back,\n    exclude,\n    quiet,\n    verb", "entropy": 48.38509158937849}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=False\n    ),\n    help=(\n        \"Configuration file to use. If not provided, will try to find one in the \"\n        \"current path, falling back to the default configuration.\"\n    ),\n)\n@click.pass_context\ndef cli(ctx, config, **kwargs):\n    \"\"\"\n    Reform", "entropy": 50.103785427887}
{"candidate": "        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    default=None,\n    show_default=True,\n    help=\"Path to yaml or json file to exclude from the format\",\n)\n@click.option(\n    \"--config-exclude\",\n    type=str,\n    multiple=True,\n    show_default=True,", "entropy": 57.8654634204436}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=False\n    ),\n    default=None,\n    help=\"Path to config file. See documentation for details.\",\n)\ndef cli(src, add_encoding, add_source_mapping_url, endofline, include, exclude, quiet, verbose, config):\n    \"\"\"\n    Auto-format Python source", "entropy": 61.401053057173584}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=True\n    ),\n    is_eager=True,\n)\n@click.pass_context\n@keepstate\ndef main(ctx: click.Context, src: typing.List[str], config: str, **kwargs: str) -> None:\n    \"\"\"\n    The file format must be detected based on the file", "entropy": 62.12635439177002}
{"candidate": "        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    help=\"optional configuration file to use.\",\n    is_eager=True,\n)\ndef main(**kwargs):\n    \"\"\"Blacken your Python code.\"\"\"\n    check_pyproject()\n\n    mode = kwargs.pop(\"mode\")\n    show_diff = kwargs.", "entropy": 63.37745477525698}
{"candidate": "        dir_okay=False, exists=True, readable=True, allow_dash=False\n    ),\n    help=(\n        \"Provide config from a file. Command line options have higher priority.\"\n    ),\n    show_default=True,\n)\ndef remove_unicode(\n    src,\n    exclude,\n    quiet,\n    verbose,\n    config,\n    encoding,\n    bom,\n    normalize_", "entropy": 65.082232548006}
{"candidate": "        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    help=\"Config file to use.\",\n    is_eager=True,\n)\n@click.pass_context\ndef mu(ctx, src, **options):\n    \"\"\"\n    Command-line utility to change encoding of text files.\n\n    \\b\n    Parameters:\n        SRC : Files", "entropy": 67.58076966514658}
{"candidate": "        exists=True, file_okay=True, dir_okay=False, readable=True, allow_dash=False\n    ),\n    default=DEFAULT_CONFIG,\n    help=(\n        \"Path to configuration file. To make configuration file, copy \"\n        \"`black_config.py` from this package. Default: `black_config.py`.  \"\n    ),\n    show_default=True,\n)\n", "entropy": 68.47154876354749}
{"candidate": "        dir_okay=False, readable=True, exists=True, allow_dash=False, resolve_path=True\n    ),\n    help=\"JSON/YAML file to use for src/dest parameters, if provided.\",\n)\n@click.option(\n    \"--pprint-config\",\n    is_flag=True,\n    help=\"Instead of actually running, pretty-print the --config file and exit.\",\n)\n@", "entropy": 84.45176112137531}
{"candidate": "        exists=True, dir_okay=False, readable=True, allow_dash=True\n    ),\n    help=(\n        \"config file to read params from. configs are in YAML format \"\n        \"(https://yaml.org/start.html) and are a superset of what can be passed as \"\n        \"command line flags. A config file can be any valid yaml document, not just \"\n        \"a dictionary", "entropy": 98.42509204754302}
