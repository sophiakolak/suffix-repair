{"candidate": "        \\b\\w+\\b'''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef js_to_py(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        elif v.startswith('/*') or v.start", "entropy": 16.768564580897}
{"candidate": "        [a-zA-Z_][a-zA-Z_0-9]*|\n        [-+]?\\d+(?:\\.\\d+)?(?:[eE][-+]?\\d+)?|\n        .\n        '''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef js_to_python(code):\n    # TODO", "entropy": 23.293434452160003}
{"candidate": "        \\w+:{skip}[^{skip}]|\n        \\w+:{skip}$'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n        fix_kv, code)\n\n\ndef js_to_py(code):\n    COMMENT_RE = r'/\\*(?:(?!\\*/).)*?\\*/|//[^\\n]*'\n    SKIP_RE = r", "entropy": 28.963796601620004}
{"candidate": "        [a-zA-Z_][\\w.]*:?|-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][-+]?\\d+)?|\n        \\n\\s*[\\[{]|[\\]}]\\s*\\n|[\\[{}\\],:]|\n        \\b(?:true|false|null)\\b\n        ''", "entropy": 31.600927676763003}
{"candidate": "        [a-zA-Z_][a-zA-Z0-9_]*|\n        [0-9]+\\.[0-9]*|\n        \\.[0-9]+|\n        [0-9]+|\n        \\S+\n    '''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, '{' + code + '}')\n\n\nclass YoutubePlayer", "entropy": 32.557051894057}
{"candidate": "        [a-zA-Z_$][a-zA-Z_$0-9]*:?|\n        [0-9.e+-]+:?'''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\nclass VideoPlaylist(object):\n    def __init__(self, playlist_id):\n        self.playlist_id = playlist_id\n", "entropy": 36.14443042371601}
{"candidate": "        [a-zA-Z_][.a-zA-Z_0-9]*|\n        [-+]?\\d+(?:\\.\\d+)?(?:[eE][-+]?\\d+)?:?|\n        .\n        '''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef _simple_decrypt(c, k,", "entropy": 37.78241243128201}
{"candidate": "        [^{skip}\"']+'''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef js_to_jsonp(code, callback=\"callback\"):\n    code = js_to_json(code)\n    return \"{0}({1})\".format(callback, code)\n\n\ndef fix_json(code):\n    return js_to_jsonp(code) if", "entropy": 39.21153857801199}
{"candidate": "        [a-zA-Z_$][a-zA-Z0-9_$]*|[0-9]+|\n        \\s+|./g'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n        fix_kv, code)\n\n\ndef parse_kv(data):\n    return json.loads(js_to_json(data))\n\n\ndef preprocess_file(", "entropy": 41.454317792623}
{"candidate": "        [a-zA-Z_$][a-zA-Z_$0-9]*:'''.format(comment=COMMENT_RE,\n                                             skip=SKIP_RE),\n                         fix_kv, code)\n\n\ndef jsons_to_json(jsons):\n    def fix_json(m):\n        if m.group(1):\n            return fix_json(m.group(1))", "entropy": 43.359803788803994}
{"candidate": "        [^\\s:,\\[\\]{}]+'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n                    fix_kv, code)\n\n\ndef parse_json(code, name='', default=NO_DEFAULT, schema=None):\n    if schema is not None:\n        warnings.warn('The schema parameter is deprecated.',\n                      DeprecationWarning)\n\n    try:\n        return json", "entropy": 44.93901727241499}
{"candidate": "        [^{skip}\"']+'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n        fix_kv, code)\n\n\ndef js_to_python(code):\n    \"\"\"Convert Javascript code to Python code.\"\"\"\n    return re.sub(r'(?s)^\\s*\\((?P<code>.*)\\);\\s*$',\n                  r\"\\g<code>\",", "entropy": 46.325023145733006}
{"candidate": "        [\\],:{}\\[\\]\"]'''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef get_json_value(json_data, key, default=None):\n    try:\n        return json.loads(json_data).get(key, default)\n    except Exception:\n        return None\n\n\ndef int_or_none(value, scale=1,", "entropy": 47.57982159368098}
{"candidate": "        [a-zA-Z_][a-zA-Z0-9_]*:|\n        [^\\[{}\\s][^\\s:]*|\n        \\[[\\s:]|\n        [\\]},]|\n        [{}\\[\\]:,]'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n                     fix_kv, code)\n\n\ndef get_js_", "entropy": 49.300148800905994}
{"candidate": "        [^{skip}]+'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n        fix_kv, code)\n\n\nclass ArchiveError(Exception):\n    # archive extraction error\n    pass\n\n\nclass NoAdsHtmlParser(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.ads = list()\n\n    def handle_starttag(", "entropy": 49.774171263526}
{"candidate": "        .+?(?={skip}[,:}]\"']|$)'''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef parse_iso8601(timestr):\n    if \"+\" in timestr:  # discard TZ information\n        timestr = timestr[:timestr.index(\"+\")]\n    if \".\" in tim", "entropy": 57.917626701033406}
{"candidate": "        [^{skip}\\]\"},]'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n                     fix_kv, code)\n\n\ndef script_to_json(txt):\n    return js_to_json(extract_json(text_type(txt)))\n\n\ndef parse_sig_js(jscode):\n    funcname = SIG_JS_RE.search(jscode).group(", "entropy": 60.0563161781926}
{"candidate": "        \\b(?:true|false|null)\\b|\n        {skip}:\\s*(?=[-,}])|\n        [\\[{}:,]'''.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)\n\n\ndef ml_to_json(code):\n    class MyException(Exception):\n        pass\n    parent = {'__parent__': None, '__ind", "entropy": 68.01314288960444}
{"candidate": "        [^\\s\\]},]+'''.format(comment=COMMENT_RE, skip=SKIP_RE),\n        fix_kv, code)", "entropy": 27.434451379457002}
{"candidate": "        [a-zA-Z_0-9.:\\[\\]{}]+(?={skip}:)\n    '''.format(comment=COMMENT_RE, skip=SKIP_RE),\n        fix_kv, code)\n\n\ndef get_media(media_id, cookies, params, base_url='',\n              query_params=None, require_title=True):\n    \"\"\"Gets media metadata.\"\"\"\n", "entropy": 73.17188929145598}
