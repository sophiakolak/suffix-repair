{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__name__ = getter.__qualname__ = 'get_' + method_name\n    setter.__name__ = setter.__qualname__ = 'set_' + method_name\n    return getter, setter\n\n\nclass ScaleBase:\n", "entropy": 13.595593891365496}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self.axes.autoscale_view(scalex=False, scaley=False)\n        self.stale = True\n\n    getter.__name__ = 'get_' + method_name\n    setter.__name__ = 'set_' + method_name", "entropy": 14.580541254370504}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    return method_name, getter, setter\n\n\ndef _make_getset_limits(method_name, lim_name, attr_name):\n    \"\"\"\n    Helper to generate ``get_{data,view}_limits`` and\n    ``set_{data,view}", "entropy": 16.689700594609498}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    get_name = 'get_' + method_name\n    set_name = 'set_' + method_name\n    getter.__name__ = get_name\n    setter.__name__ = set_name\n    getter.__doc__ = get_name +", "entropy": 16.839951604113494}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__name__ = 'get_' + method_name\n    setter.__name__ = 'set_' + method_name\n    return getter, setter\n\n\ndef _make_get_inverted(axis):\n    \"\"\"\n    Helper to generate ``", "entropy": 17.390735937732998}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = \"Get the %s %s intervals\" % (method_name, attr_name)\n    setter.__doc__ = \"Set the %s %s interval\" % (method_name, attr_name)\n    return getter, set", "entropy": 21.7290011094365}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__name__ = 'get_' + method_name\n    getter.__doc__ = _get_getter_docstring(method_name, 'view')\n\n    setter.__name__ = 'set_' + method_name\n    setter.__", "entropy": 22.297789881954294}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self.axes.set_ylim(self.axes.get_ylim())\n\n    getter.__name__ = 'get_' + method_name\n    getter.__doc__ = dedent(\"\"\"\\\n        Return the {lim_name} {attr_", "entropy": 23.269068430168996}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    return getter, setter\n\n\nclass ScaleBase:\n    \"\"\"\n    The base class for all scalar scales.\n\n    Scales are separable transformations.\n\n    Attributes\n    ----------\n    axis : `~matplotlib.axes.Axes`\n        The parent axes", "entropy": 25.901960422991507}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = \"get the %s interval for this %s\" % (\n        attr_name, lim_name.replace(\"_limit\", \"\").replace(\"_\", \" \"))\n    setter.__doc__ = \"set the %s interval for this %", "entropy": 29.030915430260496}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = f\"\"\"Get the {lim_name} interval in data coords.\n\nReturns\n-------\nvmin, vmax : float\n    The interval limits.\n    \"\"\"\n\n    setter.__doc__ = f\"\"\"Set the {lim_name} interval", "entropy": 30.624394279934002}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = '\\n'.join([\n        '',\n        '    Get the minimum and maximum range for the axis.',\n        '',\n        ])\n\n    setter.__doc__ = '\\n'.join([\n        '',\n        '    Set", "entropy": 31.099048004773493}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n            self.stale = True\n\n    getter.__name__ = \"get_%s\" % method_name\n    getter.__doc__ = \"\"\"\n    Get the *%s* value limits\n\n    Returns\n    -------\n    *vmin*, *vmax* : the", "entropy": 31.770191538842482}
{"candidate": "                setter(self, min(vmin, vmax, oldmax), max(vmin, vmax, oldmin),\n                       ignore=True)\n\n    getter.__doc__ = \"\"\"\n    Return the {attr_name} interval for this axes.\n\n    The return value is a length 2 tuple of the form\n    (min, max)\n\n    Parameters\n    ----------\n    self : {clsname}\n        the {cl", "entropy": 38.964133793411}
{"candidate": "                setter(self, min(vmin, vmax), max(vmin, vmax), ignore=True)\n\n    getter.__doc__ = \"Return the %s range of the {data,view} limits\" % (\n        attr_name.split('_')[0],)\n    setattr(getter, '__doc__', getter.__doc__)\n    setter.__doc__ = \"Set the", "entropy": 39.33773607802698}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n        self.stale = True  # Force update the lim.\n\n    setattr(AxesImage, method_name, property(getter, setter))\n\n\n# Now add the methods to AxesImage.\n_make_getset_interval('get_data_interval',", "entropy": 45.646189689979}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n                # XXX find out if this works for inverted limits.\n\n    getter.__doc__ = \"Get the %s range (min, max)\" % attr_name\n    setter.__doc__ = (\"Set the %s range (min, max)\\n\"\n                      \"If *", "entropy": 50.946422712361006}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    getter.__doc__ = f\"\"\"\n        Return the interval instance for this axis.\n\n        The {attr_name} interval is a `.matplotlib.transforms.Interval`\n        instance that can be used to compute the location of tick marks in\n        pixel or data coordinates", "entropy": 53.76328387785067}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n        # Call set_xy_viewlims before autoscale_view, so\n        # that the autoscaling will use the most up-to-date view limits.\n        self.set_xy_viewlims()\n        self.axes.autoscale_view(scale", "entropy": 54.3170586336939}
{"candidate": "                setter(self, max(vmin, vmax, oldmin), min(vmin, vmax, oldmax),\n                       ignore=True)\n\n    return property(getter, setter,\n                    doc=\"\"\"\\\nThe %s interval of the Axes view limits.\n\nThis property is a tuple (min, max) of floats.\n\nSetting the *interval* attribute allows one to set the\nview limits explicitly, by fixing", "entropy": 60.523727470608506}
