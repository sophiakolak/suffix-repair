{"candidate": "        if isinstance(data, ABCPeriodIndex):\n            from pandas import TimedeltaIndex\n\n            data = data.to_timedelta()\n            if freq is None and hasattr(data, \"freq\"):\n                freq = data.freq\n            if name is None and hasattr(data, \"name\"):\n                name = data.name\n            data = data._data\n            assert isinstance(data, Tim", "entropy": 20.273244422753102}
{"candidate": "        if isinstance(data, ABCIndexClass) and not isinstance(data, ABCTimedeltaIndex):\n            name = getattr(data, \"name\", None)\n            freq = getattr(data, \"freq\", None)\n            if isinstance(data, ABCPeriodIndex):\n                from pandas.core.arrays.timedeltas import TimedeltaArray\n\n                data = TimedeltaArray._from_period_", "entropy": 26.228838383227902}
{"candidate": "        freq = _validate_freq(freq)\n\n        if data is None:\n            return cls._simple_new(name=name, freq=freq, closed=closed)\n\n        if isinstance(data, (ABCPeriodIndex, ABCDatetimeIndex)):\n            data = data.to_timedelta64()\n\n        if isinstance(data, ABCSeries):\n            data = data._values\n\n        if is", "entropy": 27.174823497663223}
{"candidate": "        if freq is not None:\n            freq = to_offset(freq)\n\n        if not isinstance(data, TimedeltaArray):\n            if data is None:\n                data = TimedeltaArray._from_sequence([], dtype=dtype)\n            else:\n                data = TimedeltaArray(data, unit=unit, freq=freq, copy=copy)\n        elif freq is not None:", "entropy": 33.2391368165762}
{"candidate": "        if isinstance(data, PeriodIndex):\n            data = data.to_timestamp()\n\n        if isinstance(data, ABCDatetimeIndex):\n            from .datetimelike import _maybe_convert_to_td\n\n            data = _maybe_convert_to_td(data, freq)\n\n        if isinstance(data, ABCPeriodIndex):\n            data = data.to_timestamp().to_periodd", "entropy": 34.6317920503625}
{"candidate": "        freq = _validate_freq(freq)\n\n        if is_list_like(data) and not isinstance(data, (ABCIndexClass, ABCSeries, np.ndarray)):\n            data = np.array(data, copy=copy)\n\n        subarr = com._asarray_tuplesafe(data, dtype=dtype)\n        if issubclass(subarr.dtype.type, np.dat", "entropy": 36.681682761866085}
{"candidate": "        # other iterable of some kind\n        if isinstance(data, ABCIndexClass):\n            if freq is not None and freq != data.freq:\n                msg = f\"freq {freq} was passed, but data is indexed by {data.freq}\"\n                raise ValueError(msg)\n            freq, freq_infer = data.freq, False\n        elif hasattr(data, \"freq", "entropy": 37.01843366685289}
{"candidate": "        subarr, freq = _generate_regular_range(start=data, end=None, periods=None, freq=freq)\n\n        result = subarr.view(cls)\n        result.name = name\n        result.freq = freq\n        return result.__finalize__(slice(None), None)\n\n    # -------------------------------------------------------------------\n\n    @classmethod\n    def _simple_new(cls, values,", "entropy": 38.11427209980699}
{"candidate": "        if isinstance(data, cls):\n            if freq is not None and freq != data.freq:\n                # GH#19125\n                raise ValueError(\n                    \"Freq was given and did not match the freq of the given \"\n                    \"index\"\n                )\n            freq = data.freq\n            name = getattr(data, \"name\", None)\n            closed = getattr(data, \"closed", "entropy": 40.387386639315864}
{"candidate": "        data = np.asarray(data)\n\n        if issubclass(data.dtype.type, (np.datetime64, np.timedelta64)):\n            values = np.array(data, copy=False).view(_TD_DTYPE)\n        else:\n            if unit is None:\n                unit = infer_time_unit(data)\n\n            values = conversions._to_m8[unit](data, box=", "entropy": 43.3510251613732}
{"candidate": "        if isinstance(data, Index):\n            if unit is not None:\n                raise ValueError(\n                    f\"unit is not supported for {cls.__name__} \"\n                    f\"from Index\"\n                )\n            if freq:\n                data = data.map(lambda x: to_timedelta(x, unit=\"ns\"))\n            elif isinstance(data, cls):\n                freq = data.fre", "entropy": 43.661817492002164}
{"candidate": "        if freq is not None:\n            freq = to_offset(freq)\n\n        if unit is not None:\n            if data is not None and len(data):\n                data = lib.convert_timedelta_units(data, unit)\n            if freq is not None:\n                freq = cls._maybe_convert_freq(freq, unit)\n            unit = None\n\n        if data is None", "entropy": 44.486557865825894}
{"candidate": "        freq = maybe_infer_freq(freq)\n        subarr = _get_subarr(data, copy=copy)\n        if unit is None:\n            values = subarr\n        else:\n            values = maybe_convert_platform(subarr)\n            values = tslib.array_to_timedelta64(data=values, unit=unit)\n\n        result = object.__new__(cls", "entropy": 48.70904356345287}
{"candidate": "        data = np.asarray(data, dtype=_TD_DTYPE)\n        if unit:\n            from pandas import Timedelta\n\n            data = TimedeltaIndex(data, unit=unit)._values\n        if freq is not None:\n            if is_timedelta64_dtype(data):\n                freq = to_offset(freq)\n                if freq:\n                    data = data.view(\"", "entropy": 50.050094598500394}
{"candidate": "        freq = resolution(freq)\n        unit = resolution(unit)\n\n        if freq is not None and unit is not None:\n            raise ValueError(\"Only specify freq or unit, but not both\")\n\n        if unit is not None:\n            freq, mult = _reso_from_freq(unit)\n            if data is not None:\n                data = data * mult\n        if freq is not None and not fre", "entropy": 52.43797528630461}
{"candidate": "        if unit is None:\n            unit = _infer_freq_for_arraylike(data)\n            if unit is None:\n                unit = \"ns\"\n        else:\n            unit = extract_freq(unit)\n\n        freq = freq or unit\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n        freq = frequencies.to_offset(freq", "entropy": 52.850704916022586}
{"candidate": "        # GH#22143, GH#22146\n        if isinstance(data, PeriodIndex):\n            data = data.to_timestamp()\n\n        if not isinstance(data, ABCIndexClass):\n            if isinstance(data, (ABCSeries, ABCDataFrame)):\n                from pandas import Series\n\n                data = Series(data)\n            elif isinstance(data, ABCPeriodIndex):\n                data = data._to_", "entropy": 54.1238439292929}
{"candidate": "        freq = not_none(freq, cls._noarg_same_freq)\n        if freq is not None:\n            freq = to_offset(freq)\n\n        tz = getattr(data, \"tz\", None)\n        if unit is not None:\n            unit = extract_freq(unit)\n            data = create_series_with_explicit_dtype(\n                data, dtype=", "entropy": 56.37975181860202}
{"candidate": "        if isinstance(data, ABCTimedeltaIndex):\n            if freq is None and not name:\n                freq = data.freq\n            if name is None:\n                name = data.name\n            if unit is None and data.unit != cls._default_unit:\n                # we are creating an actual TimedeltaIndex, so cast values\n                unit = cls._default_unit\n                data = np.array(data", "entropy": 61.6144903343564}
{"candidate": "        if freq is None and hasattr(data, \"freq\"):\n            freq = data.freq\n\n        # GH#30422 disallow non-NaN values if unit is None\n        invalid_values = [value for value in data if not isna(value)]\n        if invalid_values and unit is None:\n            raise ValueError(\n                \"unit is not specified and there are non-NaN values, \"\n                \"", "entropy": 73.95325226361702}
