{"candidate": "        r'&(%s);' % '|'.join(compat_html_entities.name2codepoint),\n        _htmlentity_transform, s)\n\n\ndef int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if not v:\n            return default\n        v = getattr(v, get_attr,", "entropy": 15.082912264692002}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef escape_rfc3986(s):\n    if s is None:\n        return None\n    return compat_urllib_parse.quote(s, safe=b'')\n\n\ndef unescape_rfc3986(", "entropy": 16.029601476448995}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef remove_start(text, prefix):\n    \"\"\"Remove a prefix from the start of a string if it is present.\"\"\"\n    if text.startswith(prefix):\n        return text[", "entropy": 18.26156462921699}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform, s)\n\n\ndef xpath_with_ns(path, namespaces):\n    if not namespaces:\n        return path\n    return '/'.join('{%s}%s' % (namespaces[n[1:]], n[1:", "entropy": 18.623228447647698}
{"candidate": "        r'&(%s|#x?\\d+|#[0-9]*);' % '|'.join(\n            compat_html_entities.name2codepoint.keys()),\n        lambda m: _htmlentity_transform(m.group(1)), s)\n\n\ndef clean_html(html):\n    if html is None:\n        return None\n    html = re.sub(r'<!--", "entropy": 22.30443752037301}
{"candidate": "        r'&(%s);' % '|'.join(compat_html_entities.name2codepoint),\n        _htmlentity_transform, s)\n\n\ndef unescapeURL(s):\n    if s is None:\n        return None\n    s = s.replace('%20', ' ')\n    s = s.replace('%21', '!')\n    s = s.replace('%2A',", "entropy": 23.977521975406002}
{"candidate": "        r'&(#(x[0-9a-fA-F]+|\\d+)|[a-zA-Z0-9]+);',\n        _htmlentity_transform, s)\n\n\ndef int_or_none(v, scale=1, default=None, get_attr=None, invscale=1.0):\n    \"\"\"\n    Convert a value to an integer.\n\n    If the input is a string", "entropy": 24.590403529905497}
{"candidate": "        r'&(%s|#x?[0-9a-fA-F]+);' % '|'.join(compat_html_entities.name2codepoint.keys()),\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef parse_filesize(s):\n    \"\"\"Parse a string indicating a filesize into a numerical value in bytes.\n       Returns None if", "entropy": 27.292541201897002}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef strip_jsonp(jsonp):\n    \"\"\"Strip a JSONP callback wrapped JSON string.\"\"\"\n    if jsonp.startswith(u'/**/'):\n        jsonp", "entropy": 28.903937986693}
{"candidate": "        r'&(#\\d{1,4}|#x[0-9a-f]{1,4}|[a-zA-Z][a-zA-Z0-9]{1,31});',\n        _htmlentity_transform,\n        s)\n\n\ndef escape_rfc3986(s):\n    \"\"\"Escape string per RFC 3986, section 2.1\"\"\"\n    return compat_", "entropy": 30.726289590893305}
{"candidate": "        '(?s)&(((#[0-9]+)|(#[xX][0-9a-fA-F]+)|([a-zA-Z][a-zA-Z0-9]+))'\n        r'(\\s*;)?)',\n        _htmlentity_transform, s)\n\n\ndef clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    if html is", "entropy": 36.16701265986402}
{"candidate": "        r'&(#?x?[a-zA-Z0-9]+);',\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef unescapeHTMLNumeric(s):\n    \"\"\"\n    Replace all decimal and hexadecimal entities by the corresponding unicode\n    character.\n    \"\"\"\n    if s is None:\n        return None\n\n    return re.sub(\n        r", "entropy": 38.619880835046004}
{"candidate": "        r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));',\n        _htmlentity_transform,\n        s)\n\n\nurlencode_postdata = compat_urllib_parse.urlencode\nencode_compat_str = compat_urllib_parse.unquote\n\n\ndef _parse_xml(xml_string, name", "entropy": 40.569877189325695}
{"candidate": "        r'&(#?)([xX]?)(\\w+);',\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef _parse_json(json_string, video_id, fatal):\n    assert isinstance(json_string, compat_str)\n    # Youtube is rather inconsistent with its use of escape characters.\n    # While quotes and slashes are escaped in most cases,\n", "entropy": 43.29480877305749}
{"candidate": "        r'(?s)&(?:(\\w+)|#([0-9]+)|#[xX]([0-9A-Fa-f]+));',\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef strip_jsonp(s, was_quoted=False):\n    m = re.match(r'^([a-zA-Z0-9_]*)\\", "entropy": 44.19420512931199}
{"candidate": "        compat_str(r'''&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));'''),\n        _htmlentity_transform, s)\n\n\ndef get_element_by_class(class_name, html_string):\n    \"\"\" Returns the first element that has the specified class name.\n\n    :param class_name: the class name you want to match", "entropy": 47.27834430996602}
{"candidate": "        r'&(#?(?:x[0-9a-fA-F]+|[0-9]+|[a-zA-Z]+));',\n        _htmlentity_transform, s)\n\n\ndef unescapeURL(s):\n    # The function unescape() in urllib.parse does %XX unescaping, but not &##;\n    # unescaping, so we implement it manually.\n    return", "entropy": 50.46866974868902}
{"candidate": "        r'&(%s);' % '|'.join(name2codepoint or compat_html_entities.name2codepoint),\n        lambda m: _htmlentity_transform(m.group(0)), s)\n\n\ndef js_to_json(s):\n    # See http://stackoverflow.com/a/265420\n    s = s.replace(r'\\u0026', '&')", "entropy": 51.75293456605298}
{"candidate": "        r'&(%s);' % '|'.join(name for _, name in compat_html_entities.entitydefs),\n        _htmlentity_transform, s)\n\n\n# Adapted from\n# https://github.com/bcutter/pyquery/blob/master/pyquery/pyquery.py#L316\ndef parse_attribute_list(attr_list):\n    \"\"\"Parse HTML attribute list into", "entropy": 70.47962154267002}
{"candidate": "        compat_str(r'&(?P<name>[^;]+);'),\n        lambda m: _htmlentity_transform(m.group('name')),\n        s)\n\n\ndef _htmlescape_transform(s):\n    return compat_html_entities.codepoint2name.get(ord(s)) or ('#%s' % ord(s))\n\n\n# This function is also useful in order to display an", "entropy": 72.22474066961851}
