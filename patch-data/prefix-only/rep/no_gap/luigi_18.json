{"candidate": "            return\n\n        if task.status == PENDING:\n            self._status_tasks[PENDING].pop(task.id)\n\n        if task.status == RUNNING:\n            self._status_tasks[RUNNING].pop(task.id)\n\n        if task.status == DONE:\n            self._status_tasks[DONE].pop(task.id)\n\n        if task.status != DISABLED", "entropy": 19.201485822387003}
{"candidate": "            if new_status == RUNNING or new_status == PENDING:\n                return\n\n        old_status = task.status\n        task.status = new_status\n\n        if task.id in self._status_tasks[old_status]:\n            del self._status_tasks[old_status][task.id]\n\n        self._status_tasks[new_status][task.id] = task\n\n        if new_status", "entropy": 19.6540898924535}
{"candidate": "            elif new_status == FAILED:\n                self.re_enable(task, config)\n\n            elif new_status == SCHEDULED:\n                return\n\n        old_status = task.status\n        if task.status != new_status:\n            task.status = new_status\n            self._status_tasks[old_status].pop(task.id, None)\n            self._status_tasks[new", "entropy": 27.489338150192}
{"candidate": "            if task.scheduler_disable_time:\n                return\n\n        if new_status == PENDING and task.status == FAILED:\n            self.re_enable(task, config)\n        elif new_status == RUNNING and task.status in [PENDING, FAILED]:\n            self.re_enable(task)\n        elif new_status == FAILED:\n            task.failures.", "entropy": 30.80515087829301}
{"candidate": "            task.status = DISABLED\n            return\n\n        assert task.status in [PENDING, RUNNING, DONE]\n        assert new_status in (PENDING, RUNNING, DONE, DISABLED, FAILED, UP_FOR_RETRY)\n\n        assert task.id in self._status_tasks[task.status]\n        del self._status_tasks[task.status][task.id]\n\n", "entropy": 35.38243837646911}
{"candidate": "            return\n\n        self._status_tasks[task.status].pop(task.id)\n        task.status = new_status\n        self._status_tasks[new_status][task.id] = task\n\n        config.update_task(task)\n\n    def add_worker(self, worker):\n        self._workers[worker.id] = worker\n\n    def get_worker(self, worker_id):\n        return self", "entropy": 35.863214936406}
{"candidate": "            return\n\n        if new_status == RUNNING and task.status != PENDING:\n            raise ValueError(\"Can't move from status {} to RUNNING\".format(task.status))\n\n        if new_status == FAILED and task.status == DONE:\n            raise ValueError(\"Can't move from DONE to FAILED\")\n\n        if new_status not in [PENDING, RUNNING, DONE, FAILED", "entropy": 39.30521324169599}
{"candidate": "            if task.scheduler_disable_time:\n                self.log.warning(\"Tried to set task %s state to %s, but it is disabled by the scheduler\", task.id,\n                                 new_status)\n                return\n\n        task.status = new_status\n        self._status_tasks[new_status][task.id] = task\n\n        if new_status == DONE:\n            task.end_", "entropy": 44.976639956862}
{"candidate": "            return\n\n        if task.status == new_status:\n            return\n\n        old_status = task.status\n        task.status = new_status\n        task.scheduler_disable_time = None\n        if task.status == DISABLED:\n            task.scheduler_disable_time = datetime.datetime.utcnow().replace(tzinfo=utc)\n            task.state_reset()\n\n        if", "entropy": 45.25462155259601}
{"candidate": "            return\n\n        if new_status not in status_to_string:\n            raise ValueError('Invalid new_status: %r' % new_status)\n\n        if new_status != DISABLED and task.scheduler_disable_time is not None:\n            if task.scheduler_disable_time > time.time():\n                return\n\n            self.re_enable(task, config)\n\n        if task.status != new", "entropy": 45.872085074449004}
{"candidate": "            return\n\n        if (task.status != PENDING and\n            task.status != RUNNING and\n            new_status == RUNNING):\n            task.failures.clear()\n\n        if task.status == DONE:\n            assert new_status == DISABLED\n\n        old_status = task.status\n        task.status = new_status\n\n        # move the task to its new status\n        self._status_tasks[old", "entropy": 52.30121172870602}
{"candidate": "            return\n\n        old_status = task.status\n        task.status = new_status\n        log.msg(\"status changed from %s to %s: %s\" % (old_status, new_status, task.id))\n\n        # add or remove from the tasks-by-status dictionary\n        self._status_tasks[old_status].pop(task.id, None)\n        self._status_tasks[new_status", "entropy": 53.13287713514898}
{"candidate": "            # (no-op)\n            return\n\n        if task.status == RUNNING and new_status == PENDING:\n            return\n\n        if task.status == DISABLED and new_status == STALE:\n            return\n\n        if new_status == DISABLED:\n            if task.scheduler_disable_time is None:\n                task.scheduler_disable_time = time.time()\n\n        self._status", "entropy": 53.56353293939751}
{"candidate": "            return\n\n        old_status = task.status\n        if old_status == new_status:\n            return\n        elif old_status == RUNNING:\n            if new_status == PENDING:\n                raise ValueError(\"Can't set status of running task to pending\")\n            elif new_status == FAILED:\n                # TODO: should this be an exception?\n                new_status = DISABLED\n                config", "entropy": 53.67551567706451}
{"candidate": "            return\n\n        if config and task.status != new_status:\n            task.configure_from(config)\n\n        old_status = task.status\n\n        # remove the task from old status\n        try:\n            del self._status_tasks[old_status][task.id]\n        except KeyError:\n            pass\n\n        # insert into new status\n        task.status = new_status\n\n        try:\n            self._", "entropy": 54.40403598896802}
{"candidate": "            if config is not None:\n                return\n\n        if task.status == FAILED:\n            if new_status == PENDING and task.failures.get_pending_failures(config):\n                return\n\n        assert task.status not in [DONE, RUNNING]\n\n        self._status_tasks[task.status].pop(task.id, None)\n\n        if new_status == DISABLED:\n           ", "entropy": 57.143534929975}
{"candidate": "            return\n\n        old_status = task.status\n        if task.status == old_status and new_status == old_status:\n            return\n\n        if task.status == DONE:\n            return\n\n        self._status_tasks[task.status].pop(task.id)\n\n        if new_status == DONE:\n            task.policy = DONE_POLICY\n\n        task.status = new_status\n\n        if", "entropy": 57.59792605234202}
{"candidate": "            elif new_status == PENDING:\n                self.re_enable(task)\n                new_status = DISABLED\n\n        old_status = task.status\n        task.status = new_status\n\n        # if task is done or failed, call the on_done callback immediately\n        if new_status == DONE:\n            task.on_done(DONE)\n        elif new_status == FAILED:\n", "entropy": 57.628083123934495}
{"candidate": "            return\n\n        if task.status in [PENDING, RUNNING, QUEUED] and new_status in [FAILED, DONE]:\n            assert config is not None\n\n        if new_status == RUNNING:\n            # one RUNNING task per worker\n            if task.worker_key in self._worker_task:\n                self.set_status(self._worker_task[task.worker_key], QUEU", "entropy": 59.46661803872401}
{"candidate": "            return\n\n        status = task.status\n        if status == DISABLED:\n            # TODO: should we override?\n            return\n\n        if status != new_status:\n            if status == RUNNING:\n                raise ValueError('Task {} is already running'.format(task.id))\n\n            if status == PENDING and new_status == RUNNING:\n                if config:\n                    task.end_time = task.start_", "entropy": 77.57798767485599}
