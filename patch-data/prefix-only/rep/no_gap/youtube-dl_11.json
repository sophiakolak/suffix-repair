{"candidate": "    try:\n        return int(int_str)\n    except (ValueError, TypeError):\n        return int_str\n\n\ndef float_or_none(v, scale=1, default=None, get_attr=None):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v == '':\n        v = None\n    if v", "entropy": 8.885101304644905}
{"candidate": "    try:\n        return int(int_str)\n    except (ValueError, TypeError):\n        return None\n\n\ndef float_or_none(v, scale=1, invscale=1, default=None):\n    if v == '' or v is None:\n        return default\n    try:\n        return float(v) * invscale / scale\n    except (ValueError, TypeError):\n        return default\n\n\ndef parse", "entropy": 10.115898250066703}
{"candidate": "    if int_str is None:\n        return None\n    try:\n        return int(int_str)\n    except (ValueError, TypeError):\n        return None\n\n\ndef float_or_none(v, scale=1, default=None, get_attr=None):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v is", "entropy": 10.403747619186099}
{"candidate": "    if int_str is None:\n        return None\n    int_str = int_str.strip()\n    if int_str == '':\n        return None\n    return int(int_str)\n\n\ndef float_or_none(v, scale=1, invscale=1, default=None):\n    if v is None:\n        return default\n    try:\n        return float(v) * invscale / scale\n   ", "entropy": 10.6178734101125}
{"candidate": "    if int_str is None:\n        return\n    int_str = re.sub(r'\\D', '', str_or_none(int_str))\n    return int(int_str) if int_str.isdigit() else None\n\n\ndef float_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v", "entropy": 11.228551559926803}
{"candidate": "    try:\n        return int(int_str)\n    except (ValueError, TypeError):\n        return None\n\n\ndef float_or_none(v, scale=1, default=None, get_attr=None):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    try:\n        return float(v) / scale\n    except (Type", "entropy": 11.922175696776899}
{"candidate": "    if int_str is None:\n        return\n    int_str = re.sub(r'[^\\d]', '', compat_str(int_str))\n    if int_str:\n        return int(int_str)\n\n\ndef str_to_float(float_str):\n    \"\"\" A more relaxed version of float_or_none \"\"\"\n    if float_str is None:\n        return\n    float_str", "entropy": 12.484553627781}
{"candidate": "    if int_str is None:\n        return None\n    else:\n        return int(re.sub(r'\\D', '', int_str))\n\n\ndef float_or_none(v, scale=1, invscale=1, default=None):\n    if v == '' or v is None:\n        return default\n    try:\n        return float(v) * invscale / scale\n    except (ValueError, Type", "entropy": 13.491664059255099}
{"candidate": "    if int_str is None:\n        return\n    int_str = re.sub(r'(?i)[^0-9\\-]', '', int_str)\n    return int_or_none(int_str)\n\n\ndef float_or_none(v, default=None, get_attr=None):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get", "entropy": 14.145726174202794}
{"candidate": "    try:\n        return int(int_str)\n    except (ValueError, TypeError):\n        return None\n\n\ndef float_or_none(v, default=None):\n    if v is None:\n        return default\n    try:\n        return float(v)\n    except (ValueError, TypeError):\n        return default\n\n\ndef parse_iso8601(date_str, delimiter='T'):\n    \"\"\"", "entropy": 14.8759688760043}
{"candidate": "    try:\n        return int(int_str)\n    except (TypeError, ValueError):\n        return\n\n\ndef float_or_none(v, scale=1, default=None):\n    if v is None:\n        return default\n    try:\n        return float(v) / scale\n    except (ValueError, TypeError):\n        return default\n\n\ndef bool_or_none(v, default=None):\n   ", "entropy": 15.396139372010797}
{"candidate": "    r = re.match(r'-?\\d+', int_str)\n    if r:\n        return int(r.group(0))\n\n\ndef float_or_none(v, scale=1, default=None, get_attr=None):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v is None:\n        return", "entropy": 17.339694174788402}
{"candidate": "    if int_str is None:\n        return None\n    if isinstance(int_str, int):\n        return int_str\n    int_str = re.sub(r'[^\\d]', '', str(int_str))\n    return int(int_str) if int_str else None\n\n\ndef str_to_float(float_str):\n    if float_str is None:\n        return None\n   ", "entropy": 17.635366718737004}
{"candidate": "    if int_str is None:\n        return None\n    int_str = re.sub(r'\\D', r'', int_str)\n    return int(int_str) if int_str else None\n\n\ndef int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v is not None:\n            v = get", "entropy": 18.0932466757198}
{"candidate": "    if int_str is None:\n        return None\n    int_str = re.sub(r'\\D', '', int_str)\n    if not int_str:\n        return None\n    return int(int_str)\n\n\ndef float_or_none(v, scale=1, invscale=1, default=None):\n    return default if v is None else (float(v or 0) * invscale) /", "entropy": 24.525371998889806}
{"candidate": "    try:\n        v = int(int_str)\n    except (TypeError, ValueError):\n        v = None\n    return v\n\n\ndef float_or_none(v, default=None):\n    try:\n        return float(v)\n    except (TypeError, ValueError):\n        return default\n\n\ndef parse_iso8601(date_str, delimiter='T'):\n    if delimiter in date_", "entropy": 26.251734190342795}
{"candidate": "    try:\n        int_str = re.search(r'(\\d+)', int_str).group(1)\n        return int(int_str)\n    except (ValueError, TypeError, AttributeError):\n        pass\n\n\ndef get_element_by_id(doc, id, fatal=False):\n    els = doc.getElementsByTagName('*')\n    for el in els:\n        if", "entropy": 31.009870945326522}
{"candidate": "    try:\n        return int(int_str)\n    except (ValueError, TypeError):\n        return None\n\n\ndef str_to_intlist(list_str):\n    \"\"\" A more relaxed version of int_or_none \"\"\"\n    str_list = list_str.strip().split(',')\n    int_list = []\n    for str_ in str_list:\n        num = str_to_int(str_", "entropy": 32.54543101092999}
{"candidate": "    int_str = re.sub(r'[^\\d]', '', str_or_none(int_str))\n    if int_str:\n        return int(int_str)\n\n\nfloat_or_none = get_nicer_type((float, compat_str), float,\n                               try_int_or_none=False)\n\ndate_or_none = get_nicer_type((compat_", "entropy": 48.84854575016076}
{"candidate": "    if int_str is None:\n        return None\n    return str_to_int_or_raise(int_str)\n\n\ndef timestr_to_millis(timestr):\n    if timestr is None:\n        return None\n\n    def extract_millis(m):\n        return int_or_none(m.group('millis'), default=0)\n\n    def extract_minutes(m):\n", "entropy": 51.51965783477495}
