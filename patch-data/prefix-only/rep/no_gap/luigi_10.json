{"candidate": "            return six.moves.filter(lambda task: state.task_status(task.name) in [PENDING, RUNNING],\n                                    self.tasks)\n\n    def get_running_tasks(self, state):\n        \"\"\"\n        Get RUNNING tasks for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        return six.moves.filter(lambda task: state.task_", "entropy": 12.618121191818501}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.get_tasks_by_worker(self.id))\n\n    def get_running_tasks(self, state):\n        \"\"\"\n        Get RUNNING tasks for this worker.\n        \"\"\"\n        if len(self.tasks) < state.num_running_tasks():\n            return six.moves", "entropy": 15.056421907496402}
{"candidate": "            return [task for task in self.tasks if task.status in [PENDING, RUNNING]]\n\n    def get_running_tasks(self):\n        \"\"\"\n        Get running tasks for this worker.\n        \"\"\"\n        return [task for task in self.tasks if task.status == RUNNING]\n\n    def get_finished_tasks(self):\n        \"\"\"\n        Get finished tasks for this worker.\n        \"\"\"\n", "entropy": 15.749979534092002}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.tasks_by_worker[self.id])\n\n    def get_running_tasks(self, state):\n        \"\"\"\n        Get RUNNING (and REVOKED) tasks for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        if len(self.tasks", "entropy": 19.421593481903002}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.tasks.values())\n\n    def assign_task(self, task):\n        self.tasks.add(task)\n\n    def remove_task(self, task):\n        self.tasks.remove(task)\n\n    def __repr__(self):\n        return \"<Worker %s>\" % self", "entropy": 20.503487603994998}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.pending_tasks.values())\n\n    def to_dict(self, verbose=False):\n        d = {'id': self.id,\n             'host': self.reference,\n             'last_active': self.last_active,\n             'tasks': [task.id for task in self", "entropy": 25.45066691066149}
{"candidate": "            # Faster to iterate over all tasks\n            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING] and task in self.tasks,\n                                    state.tasks)\n\n    def get_running_task(self, state):\n        \"\"\"\n        Get RUNNING tasks for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        if len(self.", "entropy": 26.037061209687003}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING] and task.worker_id == self.id,\n                                    state.tasks)\n\n    def get_running_task_ids(self):\n        \"\"\"\n        Get running task ids for this worker.\n        \"\"\"\n        return [t.task_id for t in self.get_running_tasks()]\n\n    def get", "entropy": 27.31523981422801}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], state.tasks)\n\n    def get_active_tasks(self):\n        \"\"\"\n        Return all tasks in RUNNING state.\n        \"\"\"\n        return six.moves.filter(lambda task: task.status in [RUNNING], self.tasks)\n\n    def get_running_tasks(self):\n        \"\"\"", "entropy": 31.781631448676404}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.tasks.values())\n\n\nclass Task(object):\n    \"\"\"\n    Structure for tracking task activity and keeping their status.\n    \"\"\"\n\n    def __init__(self, task_id, data, worker=None, worker_status=None):\n        self.id = task_id\n        self.data =", "entropy": 33.696371744214005}
{"candidate": "            return [task for task in self.tasks if task.status in (PENDING, RUNNING)]\n\n    def __repr__(self):\n        return \"%s %s %s %s\" % (self.id, self.reference, self.last_active, self.started)\n\n\nclass WorkerManager(object):\n    def __init__(self, state):\n        self.state = state\n        self.config = state", "entropy": 35.21202026412899}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.task_list)\n\n    def get_n_tasks_left(self, state):\n        \"\"\"\n        Get number of tasks in worker's queue.\n        \"\"\"\n        return len(self.get_pending_tasks(state))\n\n    def get_n_running_tasks(self, state):", "entropy": 36.52898951720999}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.tasks.values())\n\n    def is_alive(self):\n        if not self.reference:\n            return False\n\n        alive = True\n        try:\n            self.reference.ping()\n        except:\n            alive = False\n\n        self.disabled = not alive\n\n        return alive\n\n    def can_", "entropy": 39.86729477557202}
{"candidate": "            assert len(self.tasks) == state.num_pending_tasks()\n            return state.task_list(task_status=[PENDING, RUNNING])\n\n    def get_n_pending_tasks(self, state):\n        return len(self.get_pending_tasks(state))\n\n    def get_n_tasks_with_status(self, status, state):\n        return len(", "entropy": 43.659435214921}
{"candidate": "            return six.moves.filter(lambda task: task.status == PENDING,\n                                    self.tasks)\n\n\nclass KilledWorker(object):\n    def __init__(self, worker_id, last_active=None):\n        self.id = worker_id\n        self.last_active = time.time()\n\n\nclass State(object):\n    \"\"\"\n    Access to the entire state of the scheduler.", "entropy": 48.39852803905699}
{"candidate": "            return six.moves.reduce(lambda lst, task: (lst if task.status in [PENDING, RUNNING] else lst),\n                                    self.tasks, [])\n\n\nclass Task(object):\n\n    def __init__(self, task_id, worker, spec, resources, priority, config):\n        self.id = task_id\n        self.spec = spec\n        self.status = P", "entropy": 54.98057931056252}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    itervalues(state.tasks))\n\n    def get_pending_unblocked_tasks(self, state):\n        # Undone: optimize me\n        return six.moves.filter(lambda task: task.status in [PENDING] and task.deps_met(state),\n                               ", "entropy": 55.05605986646788}
{"candidate": "            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    state.get_tasks_by_worker(self.id))\n\n\n@six.add_metaclass(abc.ABCMeta)\nclass State(object):\n    \"\"\"\n    Defines the state of an execution flow.\n\n    This contains tasks, workers, and various utility methods.\n    \"\"\"\n\n    def __init", "entropy": 62.4714770945808}
{"candidate": "            return six.moves.filter(lambda task: task._state == PENDING or (\n                task._state == RUNNING and task.worker == self.id),\n                                    state.tasks.values())\n\n    def mark_worker_updated(self, state):\n        \"\"\"\n        Mark tasks as updated, as they were seen by the worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        # TOD", "entropy": 67.8291683232945}
{"candidate": "            return [task for task in self.tasks\n                    if state.tasks[task.task_id].status in [PENDING, RUNNING]]\n\n\nclass Task(object):\n    \"\"\"\n    Task objects are instantiated when a task is added to the scheduler. They are\n    not typically manually instantiated.\n\n    :param task_id: unique task identifier, used for joining\n    :type task_id: str\n    :", "entropy": 78.048598627301}
