{"candidate": "        if priority is not None:\n            task.priority = priority\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.priority = priority\n\n        if priority_path is not None:\n            task.priority_path = priority_path\n            if task.batch_id is not None:\n                for batch_task", "entropy": 10.196105149294802}
{"candidate": "        if expl_magnitude is not None:\n            task.expl_magnitude = expl_magnitude\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.expl_magnitude = expl_magnitude\n\n        if priority is not None:\n            task.priority = priority\n            if task", "entropy": 16.22007295854956}
{"candidate": "        if priority is not None:\n            task.priority = priority\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.priority = priority\n\n        if result is not None:\n            task.result = result\n        if worker_id is not None:\n            task.worker_id = worker_id\n        if", "entropy": 19.447150044036203}
{"candidate": "        task.priority = priority\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.priority = priority\n\n        if status == REVOKED:\n            task.status = status\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_t", "entropy": 21.824090937215697}
{"candidate": "        if expl_type is not None:\n            task.expl_type = expl_type\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.expl_type = expl_type\n\n        if worker_id:\n            task.worker_running = worker_id\n\n        if priority is not None:\n            #", "entropy": 22.74416920117314}
{"candidate": "        if priority is not None:\n            task.priority = priority\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.priority = priority\n\n        if retries is not None:\n            task.retries = retries\n\n        if result_status is None and status == SUCCESS:\n            result_status =", "entropy": 26.559797941138402}
{"candidate": "        if priority is not None:\n            task.priority = priority\n\n        if status is not None:\n            task.status = status\n            task.time_finished = time.time()\n            task.worker_running = None\n\n            if task.batch_id is not None:\n                for task in self._state.get_batch_running_tasks(task.batch_id):\n                    task.status = status\n                    task.time_finished", "entropy": 28.15455101094059}
{"candidate": "        if priority is not None:\n            if batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(batch_id):\n                    batch_task.priority = priority\n            else:\n                task.priority = priority\n\n        if batch_id is not None and task.batch_id != batch_id:\n            batch = self._state.get_batch(batch_id, setdefault=", "entropy": 28.93236763187399}
{"candidate": "        if resources is not None:\n            assert isinstance(resources, dict)\n            task.resources = resources\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.resources = resources\n\n        if priority is not None:\n            if priority not in PRIORITY_NAMES:\n                raise ValueError('%s", "entropy": 32.02424410916079}
{"candidate": "        if comment is not None:\n            task.comment = comment\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.comment = comment\n\n        if host is not None:\n            if task.host_running != host:\n                task.host_running = host\n                task.host_history.append((host", "entropy": 33.767586354298885}
{"candidate": "        if status is not None:\n            old_status = task.status\n            task.status = status\n\n            if old_status == RUNNING:\n                task.worker_running = None\n                task.time_running = None\n                task.time_done = time.time()\n                if task.batch_id:\n                    self._state.remove_batch_running_task(task)\n                if not worker.enabled:\n                    task.", "entropy": 38.22315791430603}
{"candidate": "        if status is not None:\n            task.status = status\n        if processor_id is not None:\n            task.processor_id = processor_id\n        if status == SUCCESS and (task.time_done is None or task.retries > 0):\n            task.time_done = time.time()\n        if status == FAILED and task.time_failed is None:\n            task.time_failed = time.time", "entropy": 46.17136711806881}
{"candidate": "        if keep_result is not None:\n            task.keep_result = keep_result\n\n        if status is not None:\n            if status == FAILED:\n                task.fail_count += 1\n                task.priority = self.priority(task_id)\n\n            task.status = status\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task", "entropy": 48.33465118179369}
{"candidate": "        if status is not None:\n            task.status = status\n            if task.batch_id is not None:\n                for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                    batch_task.status = status\n            if status == FAILED:\n                task.running_time = self._get_running_time(task)\n                # only set time_updated if we're not", "entropy": 49.91428880331249}
{"candidate": "        task.set_status(status)\n\n        if status == FAILED and not task.worker_running:\n            task.worker_running = worker_id\n        elif status != FAILED:\n            task.worker_running = None\n        if status == RUNNING:\n            self.task_scheduler.add_task(task)\n        elif status == FAILED or status == SUCCESS:\n            self.task", "entropy": 56.19019808190601}
{"candidate": "        if requires_docker is not None:\n            task.requires_docker = requires_docker\n\n        if config_overrides and config_overrides != task.config_overrides:\n            # Only set the config overrides for the first worker that sets them\n            if task.config_overrides:\n                config_overrides = _merge_overrides(config_overrides, task.config_overrides)", "entropy": 72.4848820252872}
{"candidate": "        if reset_dep_errors:\n            task.dep_errors = None\n\n        self._state.update_task(task, update_completed=update_completed, logger=logger)\n        if priority:\n            self._state.prioritize_tasks([task])\n\n    def update_task_state(self, task_id, state=None, **kwargs):\n        task = self._state.get_task(", "entropy": 75.53063607047}
{"candidate": "        # status can be forced, except when task is running\n        if task.status not in (RUNNING, FAILED_WAITING, UP_FOR_RETRY) or status not in (RUNNING,):\n            task.status = status\n\n        if time is not None:\n            task.time = time\n\n        if queue is not None:\n            task.queue = queue\n            if task.batch_id is not None:\n", "entropy": 76.24480550866943}
{"candidate": "        task.priority = priority\n        self._state.prune_tree_cache()\n\n        if task.status not in (RUNNING, PENDING) and status != task.status:\n            worker.n_tasks_running -= 1\n\n        if status == RUNNING:\n            worker.n_tasks_running += 1\n        if old_worker_id != worker_id:\n            old_worker.n_tasks_running", "entropy": 78.12447394329106}
{"candidate": "        if origin is not None:\n            task.origin = origin\n        if status_changing:\n            task.status = status\n\n        # Update job history and priority\n        task.time_updated = time.time()\n\n        # Update status\n        self._state.update_task_history(task)\n        self._state.update_task_status(task)\n\n        # Update priority\n        task_id_list = self._state.get_", "entropy": 103.80582098650399}
