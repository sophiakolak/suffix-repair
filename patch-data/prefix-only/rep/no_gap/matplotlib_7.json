{"candidate": "        if isinstance(intensity, np.ma.MaskedArray):\n            if intensity.mask.any():\n                blend[intensity.mask] = rgb[intensity.mask]\n\n        return blend\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1):\n        \"\"\"Calculate hillshade intensity for a given elevation grid.\n\n        Parameters\n        ----------\n        elevation", "entropy": 23.817708626014007}
{"candidate": "        blend[intensity.mask, :] = rgb[intensity.mask, :]\n\n        return blend\n\n    def hillshade(self, elevation, vert_exag, dx=1, dy=1, fraction=1,\n                  azdeg=315, altdeg=45):\n        \"\"\"\n        Calculates an illumination intensity grid from an elevation grid.\n\n        Parameters\n        ----------\n        elevation : ndarray\n            An (m, n", "entropy": 29.158932871250983}
{"candidate": "        return np.where(self._isnan(intensity), rgb, blend)\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1):\n        \"\"\"\n        Calculate the illumination intensity for a given *elevation* grid.\n\n        Parameters\n        ----------\n        elevation : ndarray\n            An (m, n) array of floats representing the elevation at each\n           ", "entropy": 30.293359173704996}
{"candidate": "        np.copyto(rgb, blend, where=np.squeeze(~np.ma.getmaskarray(intensity)))\n\n        return rgb\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1,\n                  fraction=1):\n        \"\"\"Calculate the illumination intensity for a shaded relief image.\n\n        Parameters\n        ----------\n        elevation : ndarray\n            An", "entropy": 30.897437268360004}
{"candidate": "        blend[intensity.mask] = rgb[intensity.mask]\n\n        return blend\n\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1,\n                  azimuth=315, altitude=45, mode='bilinear'):\n        \"\"\" Calculates the illumination intensity of a surface.\n\n        Parameters\n        ----------\n        elevation : ndarray\n            An (m", "entropy": 32.00302707125}
{"candidate": "        if np.issubdtype(intensity.dtype, np.floating):\n            blend[(rgb == 0).all(axis=-1)] = 0\n        else:\n            blend[intensity == 0] = 0\n\n        return blend\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1):\n        \"\"\"Calculate the illumination intensity for each cell in an", "entropy": 32.932863823392005}
{"candidate": "        mask = np.ma.getmask(intensity)\n        if mask is not None:\n            blend[mask] = rgb[mask]\n\n        return blend\n\n    @staticmethod\n    def hillshade(elevation, vert_exag=1, dx=1, dy=1, fraction=1):\n        \"\"\"\n        Calculate the illumination intensity for a given elevation array.\n        This is often called \"hillshade\" because it", "entropy": 33.38498275876102}
{"candidate": "        if hasattr(intensity, 'mask'):\n            blend = np.ma.array(blend, mask=np.broadcast_to(intensity, blend.shape).mask)\n\n        return blend\n\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1,\n                  fraction=1, azdeg=315, altdeg=45):\n        \"\"\"\n        Calculate the hillshade", "entropy": 33.658791305892}
{"candidate": "        if elevation.shape[:2] != intensity.shape[:2]:\n            elevation = elevation[:intensity.shape[0], :intensity.shape[1]]\n        if hasattr(elevation, 'mask'):\n            np.copyto(blend, rgb, where=elevation.mask[..., np.newaxis])\n        return blend\n\n    @staticmethod\n    def hillshade(data, vert_ex", "entropy": 34.479406179522}
{"candidate": "        if not isinstance(intensity, ma.MaskedArray):\n            return blend\n        else:\n            mask = intensity.mask\n            blend.mask = mask\n            return blend\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1):\n        \"\"\"\n        Calculate illumination intensity for a given elevation grid.\n\n        Parameters\n        ----------\n        elevation : ndarray", "entropy": 34.64959144023899}
{"candidate": "        blend = np.where(np.ma.getmaskarray(intensity), rgb, blend)\n\n        # Force data type to float and scale values to range [0, 1]\n        blend = skimage.img_as_float(blend)\n\n        return blend\n\n    @staticmethod\n    def hillshade(elevation, vert_exag=1, dx=1, dy=1, fraction=0.5):\n        \"\"\"", "entropy": 37.24473102027098}
{"candidate": "        if elevation.mask.any():\n            blend = np.where(intensity.mask, rgb, blend)\n\n        return blend\n\n    def hillshade(self, elevation, vert_exag, dx, dy, fraction):\n        \"\"\"\n        Calculate hillshade from an elevation grid.\n\n        Parameters\n        ----------\n        elevation : ndarray\n            An (m,n) array of elevation values.\n            Missing values are indicated with", "entropy": 37.911105660637986}
{"candidate": "        mask = intensity[..., 0] == np.ma.masked\n        if np.any(mask):\n            blend[mask] = rgb[mask]\n\n        return blend\n\n    @staticmethod\n    def blend_hsv(rgb, intensity, **kwargs):\n        \"\"\"\n        Blend a \"hillshade\" with an rgb image using the HSV blend mode.\n\n        Parameters\n        ----------\n        rgb : array\n           ", "entropy": 41.65513322901201}
{"candidate": "        if intensity.mask.any():\n            blend[intensity.mask] = rgb[intensity.mask]\n\n        return blend\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.):\n        r\"\"\"\n        Calculate the \"hillshade\" intensity for an elevation grid.\n\n        Hillshade calculations use an algorithm developed by Zevenbergen &\n        Thorne (1987", "entropy": 42.29710237130199}
{"candidate": "        is_masked = ~np.ma.getmaskarray(intensity.reshape(intensity.shape[0], -1)).all(axis=1)\n        blend[is_masked] = rgb[is_masked]\n        return blend\n\n    def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1):\n        \"\"\"Produces a hillshade from an elevation grid", "entropy": 44.095656177870715}
{"candidate": "        masked = np.ma.MaskedArray(blend, mask=np.ma.getmaskarray(intensity))\n        return masked.filled(fill_value)", "entropy": 19.201507791021}
{"candidate": "        masked_intensity = np.ma.masked_equal(intensity, 0)\n        masked_blend = np.ma.where(masked_intensity.mask, rgb, blend)\n        blend = np.ma.filled(masked_blend, fill_value=0.0)\n\n        return blend\n\n\nclass SRTMRetriever(object):\n    \"\"\"\n    Downloads SRTM data for a given latitude and longitude", "entropy": 53.998132876132004}
{"candidate": "        blend = np.ma.array(blend, mask=intensity.mask, copy=False)\n\n        return blend\n\n    @staticmethod\n    def one_minus(x):\n        \"\"\"\n        Return 1 - x. A convenience function for blending functions.\n\n        Parameters\n        ----------\n        x : array-like\n            Input data.\n\n        Returns\n        -------\n        array-like\n            1 - x\n        \"\"\"\n        return 1", "entropy": 56.27131612084002}
{"candidate": "        where = np.where(intensity[:,:,0] > 0)\n        rgb[:,:,:3][where] = blend[where].copy()\n\n        return rgb\n\ndef hillshade(elevation, azimuth=315, angle_altitude=45,\n               fraction=1, vert_exag=1, dx=1, dy=1, mode='reflect',\n               cval=0, out=None):\n", "entropy": 57.23949088145299}
{"candidate": "        if hasattr(intensity, 'mask'):\n            mask = np.logical_not(intensity.mask)\n            blend[mask] = intensity[mask]\n\n        return blend", "entropy": 27.29663448128}
