{"candidate": "        return (\n            is_categorical_dtype(dtype)\n            or is_categorical_dtype(dtype.subtype)\n            or is_datetime64_any_dtype(dtype)\n            or is_datetime64tz_dtype(dtype)\n            or is_period_dtype(dtype)\n            or is_timedelta64_dtype(dtype)\n       ", "entropy": 14.989457575008}
{"candidate": "        return (\n            is_datetime64_any_dtype(dtype)\n            or is_timedelta64_dtype(dtype)\n            or is_extension_array_dtype(dtype)\n        )\n\n    return is_dtype_equal(arr_or_dtype, condition)\n\n\ndef is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"", "entropy": 16.259334831101707}
{"candidate": "        return CategoricalDtype.is_dtype(dtype) or PeriodDtype.is_dtype(dtype)\n\n    return _is_dtype_type(arr_or_dtype, condition)\n\n\ndef is_unicode_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the unicode dtype.\n\n    Parameters\n    ----------\n", "entropy": 16.401391725105}
{"candidate": "        if (\n            is_datetime64_dtype(dtype)\n            or is_datetime64tz_dtype(dtype)\n            or is_categorical_dtype(dtype)\n            or is_extension_array_dtype(dtype)\n        ):\n            return True\n        return False\n\n    try:\n        dtype = pandas_dtype(arr_or_dtype)\n       ", "entropy": 19.438050867233898}
{"candidate": "        return (\n            is_categorical_dtype(dtype)\n            or is_datetime64tz_dtype(dtype)\n            or is_interval_dtype(dtype)\n        )\n\n    if isinstance(arr_or_dtype, type):\n        return condition(arr_or_dtype)\n    return condition(arr_or_dtype.dtype)\n\n\ndef is_complex_", "entropy": 19.973728798103007}
{"candidate": "        return (\n            is_categorical_dtype(dtype)\n            or is_datetime64tz_dtype(dtype)\n            or is_datetime64_dtype(dtype)\n            or is_datetime64_any_dtype(dtype)\n            or is_datetimetz(dtype)\n            or is_period_dtype(dtype)\n            or is_timedelta", "entropy": 20.22325909104301}
{"candidate": "        return is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype)\n\n    return _is_dtype_type(is_string_dtype, arr_or_dtype, condition)\n\n\ndef is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64 dtype", "entropy": 20.256429309302497}
{"candidate": "        return (\n            is_categorical_dtype(dtype)\n            or is_interval_dtype(dtype)\n            or is_datetime64tz_dtype(dtype)\n            or is_datetimetz(dtype)\n        )\n\n    return is_dtype_equal(arr_or_dtype, condition)\n\n\ndef is_unicode_dtype(arr_or_dtype", "entropy": 20.361091948467706}
{"candidate": "        return is_datetime64_any_dtype(dtype) or is_timedelta64_dtype(dtype)\n\n    return is_dtype_equal(arr_or_dtype, np.dtype(object)) or is_dtype_equal(\n        arr_or_dtype, np.dtype(\"string\")\n    ) or (\n        is_categorical_dtype(arr_or_d", "entropy": 20.662559659601396}
{"candidate": "        return lib.infer_dtype(dtype) == \"period\"\n\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype)\n    return condition(getattr(arr_or_dtype, \"dtype\", arr_or_dtype))\n\n\ndef is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check", "entropy": 21.588681658162315}
{"candidate": "        return np.dtype(dtype).name in (\"datetime64[ns]\", \"datetime64[ns, tz]\")\n\n    return _is_dtype_type(arr_or_dtype, condition)\n\n\ndef is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a datetime64 dtype.\n\n    Parameters\n", "entropy": 22.13684015836051}
{"candidate": "        return (\n            (\n                is_categorical_dtype(dtype)\n                or is_datetime64_any_dtype(dtype)\n                or is_period_dtype(dtype)\n                or is_extension_type(dtype)\n            )\n            and not is_extension_array_dtype(dtype)\n        )\n\n    if isinstance(arr_or_dtype,", "entropy": 22.680822212667504}
{"candidate": "        return (\n            is_datetime64_any_dtype(dtype)\n            or is_timedelta64_dtype(dtype)\n            or issubclass(dtype.type, np.unicode_)\n        )\n\n    return _is_dtype_type(arr_or_dtype, condition)\n\n\ndef is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"", "entropy": 22.80944224579401}
{"candidate": "\n        def is_categorical(dtype) -> bool:\n            if isinstance(dtype, CategoricalDtype):\n                return True\n            return hasattr(dtype, \"categories\") and hasattr(dtype, \"ordered\")\n\n        def is_datetime(dtype) -> bool:\n            if isinstance(dtype, DatetimeTZDtype):\n                return True\n            return hasattr(dtype,", "entropy": 29.904999369638006}
{"candidate": "        return (\n            issubclass(dtype.type, ExtensionDtype)\n            or getattr(dtype, \"name\", None) == \"Categorical\"\n        )\n\n    return is_dtype_equal(arr_or_dtype, condition)\n\n\ndef is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a", "entropy": 28.368531773133487}
{"candidate": "        return is_datetime64_any_dtype(dtype) or is_datetime64tz_dtype(dtype) or is_period_dtype(dtype)\n\n    return is_dtype_equal(arr_or_dtype, condition)\n\n\ndef is_sparse(arr) -> bool:\n    \"\"\"\n    Check if the array is of the sparse dtype.\n    \"\"\"\n    return isinstance(arr", "entropy": 29.25838397062631}
{"candidate": "        if not hasattr(arr_or_dtype, \"dtype\"):\n            return False\n        dtype = arr_or_dtype.dtype\n        return (\n            # Sparse[t]\n            is_sparse(dtype)\n            # Period\n            or is_period_dtype(dtype)\n            # Interval\n            or is_interval_dtype(dtype)\n            # Datetime", "entropy": 37.05927810833499}
{"candidate": "        return dtype.name in [\n            \"category\",\n            \"timedelta\",\n            \"datetime\",\n            \"m8[ns]\",\n            \"m8[ns, UTC]\",\n            \"m8[ns, pytz.FixedOffset(60)]\",\n            \"m8[ns, pytz.FixedOffset(-60)]\",\n            \"optional[i8]\",\n            \"optional[f8]\",\n", "entropy": 47.41544116968599}
{"candidate": "        if dtype.name == \"category\":\n            return True\n        return isinstance(dtype, CategoricalDtype)\n\n    # string dtypes\n    if is_dtype(arr_or_dtype) and condition(arr_or_dtype):\n        return True\n\n    if is_extension_type(arr_or_dtype):\n        # TODO(extension)\n        pass\n\n    # numpy char", "entropy": 56.264150168990014}
{"candidate": "        if dtype.name in (\"category\", \"interval\"):\n            return True\n        if is_datetime64_dtype(dtype):\n            return True\n        return False\n\n    if isinstance(arr_or_dtype, ABCExtensionArray):\n        dtype = arr_or_dtype.dtype\n    else:\n        # We allow array_like explicitly to include the case of dtype\n        dtype =", "entropy": 69.5405155641745}
