{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass DictParameter(Parameter):\n    \"\"\"\n    Parameter type for dictionaries.\n\n    Example usage:\n\n    .. code-block:: python\n\n        import luigi\n\n\n        class MyTask(luigi.Task):\n            book_locations = luigi.DictParameter()\n            def run(self):\n                for location in self.book", "entropy": 23.95389178638001}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n    def serialize(self, x):\n        \"\"\"\n        Serialize an individual value.\n\n        :param obj x: the value to serialize.\n        :return: the serialized value.\n        \"\"\"\n        return json.dumps(x)\n\n\nclass DictParameter(Parameter):\n    \"\"\"\n    A dict parameter type.\n\n    Usage::\n\n       ", "entropy": 27.018941150453}
{"candidate": "        except ValueError:\n            try:\n                return ast.literal_eval(x)\n            except ValueError:\n                raise ValueError(\"Unable to parse value as json or tuple: %s\" % x)\n\n    def serialize(self, x):\n        \"\"\"\n        Serialize a single value to a string.\n\n        :param x: the value to serialize.\n        :return: the string representation of the value.\n       ", "entropy": 30.09404739222}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass FloatParameter(Parameter):\n    \"\"\"\n    Class for defining a float parameter on the command line.\n\n    Example:\n    ::\n\n        class MyTask(luigi.Task):\n            num = luigi.FloatParameter()\n\n            def run(self):\n                print(\"%.2f\" % self.num)\n\n    At the command line, use\n\n", "entropy": 41.154358595277024}
{"candidate": "        # pylint: disable=unused-variable\n        except (ValueError, SyntaxError) as e:\n            try:\n                return ast.literal_eval(x)\n            except (ValueError, SyntaxError):\n                raise\n\n\nclass JsonParameter(Parameter):\n    \"\"\"\n    A parameter that can be parsed from a JSON dictionary string.\n\n    Example usage:\n\n    .. code-block:: python\n\n        class My", "entropy": 47.85478269543202}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n    def serialize(self, x):\n        \"\"\"\n        Serialize a value.\n\n        :param T x: the value to serialize.\n        :return: the serialized value.\n        \"\"\"\n        return str(x)\n\n\nclass ListParameter(ParameterMixin, Parameter):\n    \"\"\"\n    Like Luigi ``Parameter``, except the value is a", "entropy": 48.341473709548985}
{"candidate": "        except ValueError:\n            try:\n                return ast.literal_eval(x)\n            except ValueError:\n                msg = \"Cannot parse 'tuple[tuple[...]]' value %r\" % x\n                raise argparse.ArgumentTypeError(msg)\n\n\nclass ListParameter(Parameter):\n    \"\"\"\n    Like :py:class:`~luigi.parameter.Parameter` but with a default value of", "entropy": 50.047699165865}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n    def serialize(self, x):\n        \"\"\"\n        Convert the parameter value to a string representation.\n\n        :param tuple x: the value to convert.\n        :return: the value, converted to a string.\n        \"\"\"\n        return repr(x)\n\n\nclass ListParameter(Parameter):\n    \"\"\"\n    List parameter type.\n\n    Requires value that is", "entropy": 51.130126635682984}
{"candidate": "        except ValueError:\n            # attempt to return plain tuple string\n            return ast.literal_eval(x)\n\n\nclass RandomParameter(Parameter):\n    \"\"\"\n    Parameter that returns a random number between min_value and max_value.\n\n    Example:\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            num = luigi.RandomParameter(min_value=0, max_value=", "entropy": 52.459029630809006}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass FrozenOrderedDict(OrderedDict):\n    \"\"\"\n    This is an immutable version of ``OrderedDict``.\n\n    Useful for situations where you need tuples but not lists.\n    \"\"\"\n\n    def __hash__(self):\n        return hash(tuple(self.items()))\n\n    def __setitem__(self, key", "entropy": 52.990551374822005}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n    def complete(self, param_values):  # pylint: disable=no-self-use\n        \"\"\"\n        Given a list of the values for each parameter, return a list of possible values for this parameter.\n        This is useful for tab-completion.\n\n        :param list param_values: List of the values for each parameter.\n        :return:", "entropy": 55.097798778768}
{"candidate": "        except (ValueError, TypeError):\n            pass\n        try:\n            return ast.literal_eval(x)\n        except (ValueError, SyntaxError):\n            raise ParameterException(\"Cannot parse %s, should be a tuple of tuples\" % x)\n\n\nclass EnumParameter(Parameter):\n    \"\"\"\n        Parameter that expects a value from a list of possible values.\n\n        For example, if you have a", "entropy": 56.37761546461599}
{"candidate": "        except ValueError:\n            return tuple(ast.literal_eval(x))\n\n\nclass SetParameter(Parameter):\n    \"\"\"\n    A parameter that takes a python `set` object as input.\n    The set must be nonempty.\n\n    :param kwargs: all the usual keyword arguments for :py:class:`luigi.Parameter`\n\n    Example:\n\n    .. code-block:: python\n\n        class MyTask(luigi", "entropy": 60.869148178038}
{"candidate": "        except ValueError:\n            # assume string is space-separated tuples\n            return tuple(tuple(map(int, item.split(',', 2))) for item in ast.literal_eval(x))\n\n    def serialize(self, x):\n        return json.dumps(x, ensure_ascii=False, indent=4)\n\n\nclass JsonParameter(Parameter):\n    \"\"\"\n    Parameter that is", "entropy": 61.138934144991026}
{"candidate": "        except (ValueError, TypeError) as e:\n            try:\n                return tuple(ast.literal_eval(x))\n            except (ValueError, AttributeError, SyntaxError) as e:\n                raise ParameterException('cannot parse %s: %s' % (x, e))\n\n\nclass ParameterParser(object):\n    \"\"\"\n    This is the main parameter parser that converts command line parameters\n    to the", "entropy": 62.997671931159005}
{"candidate": "        except ValueError:\n            return tuple(tuple(x) for x in ast.literal_eval(x))\n\n\nclass DictParameter(Parameter):\n    \"\"\"\n    Dict of comma-separated key=value pairs where the keys are strings and the\n    values are strings or integers.\n\n    Example:\n\n    DictParameter(default={'a': '1', 'b': '2'})\n\n    You can also instantiate", "entropy": 63.05656148709001}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass EnumParameter(Parameter):\n    \"\"\"\n    An EnumParameter takes a list of strings and fails if an invalid one is used.\n\n    Example:\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            level = EnumParameter(['low', 'medium', 'high'])\n\n    After that, you can run the", "entropy": 65.56931204289796}
{"candidate": "        except ValueError:\n            # loop required to parse tuple of tuples\n            return tuple(tuple(x) for x in ast.literal_eval(x))\n\n\nclass FrozenOrderedDict(dict):\n    \"\"\"\n    An Ordered version of json.loads().\n\n    This function mimics the interface of json.loads(), except that it returns an\n    OrderedDict instead of a regular dict, so that the key/value", "entropy": 66.998656529935}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass DictParameter(Parameter):\n    \"\"\"\n    A dict of parameters, where the individual values can be of any type. Useful for values you want to pass through to another library.\n\n    For example, if you have the following task definition:\n\n    .. code-block:: python\n\n        class MyTask(luigi.Task):\n            book_locations = lu", "entropy": 72.23528371662701}
{"candidate": "        except ValueError:\n            return ast.literal_eval(x)\n\n\nclass NumpyArrayParameter(Parameter):\n    \"\"\"\n    A parameter for tasks that expects a Numpy array.\n\n    If a list of list is input, it will be converted to a 2D array using :py:func:`numpy.array`\n\n    **Example**\n\n    ::\n\n        class MyTask(luigi.Task):\n            num_array =", "entropy": 77.65926685105498}
