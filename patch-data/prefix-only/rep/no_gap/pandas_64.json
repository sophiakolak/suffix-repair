{"candidate": "        self.float_format = float_format\n        self.cols = cols\n        self.header = header\n        self.index = index\n        self.merge_cells = merge_cells\n        if is_scalar(index_label):\n            index_label = [index_label]\n        self.index_label = index_label\n        self.inf_rep = inf_rep\n        self.column_formats =", "entropy": 24.326799359454004}
{"candidate": "        self.cols = cols or df.columns\n\n        self.merge_cells = merge_cells\n\n        self.header = _convert_to_list(header)\n        self.index = _convert_to_list(index)\n        self.index_label = _convert_to_list(index_label)\n\n        self.float_format = float_format\n        self.inf_rep = inf_rep\n\n", "entropy": 25.46247875655411}
{"candidate": "        self.float_format = float_format\n        self.cols = cols\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n    def _format_value(self, value):\n        \"\"\"\n        Returns the given value as a string suitable for Excel.\n        \"\"\"\n       ", "entropy": 27.058535739467597}
{"candidate": "            self.df = df[cols]\n\n        self.row_offset = 0\n        self.col_offset = 0\n        self.float_format = float_format\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n\n        self.inf_rep = inf_rep\n\n        if self.styler is not None:\n           ", "entropy": 28.113171283309}
{"candidate": "            if len(Index(cols)) != len(Index(cols).unique()):\n                raise ValueError(\"'columns' contains duplicate entries\")\n\n            self.df = df[cols]\n        self.cols = self.df.columns\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.float_format = float_format\n        self.merge", "entropy": 28.275384074019804}
{"candidate": "        self.float_format = float_format\n        self.cols = cols\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n    def get_style_list(self, styles, row_loc: int, col_loc: int) -> List[Style]:\n        if", "entropy": 29.97327883554861}
{"candidate": "        self.float_format = float_format\n        if float_format is not None:\n            self.float_format_orig = float_format\n        self.cols = cols\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n        self.cell_styles = {}\n\n", "entropy": 31.283419054657404}
{"candidate": "        self.cols = cols\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n        self.float_format = float_format\n        self.inf_rep = inf_rep\n        self.current_row = None\n        self.sheet_name = None\n        self.book = None\n        self.hstyle = None", "entropy": 31.454986553577502}
{"candidate": "            df = df[cols]\n\n        self.nlevels = get_level_lengths(df.index)\n        self.float_format = float_format\n        self.header = header\n        self.index = index\n        self.inf_rep = inf_rep\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n\n    def close(self):\n        pass\n\n    def write_", "entropy": 31.37979878566299}
{"candidate": "            self.df = df[cols]\n\n        if index is not True:\n            self.df = self.df.reset_index()\n\n        self.cols = self.df.columns\n        self.float_format = float_format\n        self.merge_cells = merge_cells\n\n        self.header = self._get_header(header)\n        self.index_names = self._get_index_names(index_", "entropy": 32.00315855047449}
{"candidate": "            self.columns = cols\n        else:\n            self.columns = df.columns\n        self.float_format = float_format\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n    def get_columns_and_cells(self):\n        # use", "entropy": 32.73537208033399}
{"candidate": "        self.cols = cols\n\n        if header is True:\n            header = list(df.columns)\n        elif header is not None and not is_list_like(header):\n            raise ValueError(\"Invalid header type: %s\" % type(header))\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n", "entropy": 33.69808198045061}
{"candidate": "        self.cols = cols\n        self.merge_cells = merge_cells\n        self.has_style = style_converter is not None\n        self.inf_rep = inf_rep\n\n        # set the float_format\n        if float_format is None:\n            float_format = get_option(\"display.float_format\")\n            self.float_format = pd.io.formats.format.FloatFormat", "entropy": 39.7730520538289}
{"candidate": "            self.float_format = float_format\n            self.has_index_names = index and df.index.names[0] is not None\n            self.col_label_names = df.columns.names\n            self.cols = cols\n            self.header = header\n            self.merge_cells = merge_cells\n            self.inf_rep = inf_rep\n            self.index = index\n            if index_", "entropy": 39.786469444556}
{"candidate": "        self.cols = cols\n        self.header = header\n        self.merge_cells = merge_cells\n        self.index = index\n        self.inf_rep = inf_rep\n        self.float_format = float_format\n\n        if index_label is not None:\n            if self.index is False:\n                raise ValueError(\"Index of the DataFrame must not be disabled\")\n\n            if isinstance(index_label", "entropy": 40.376738806670694}
{"candidate": "            self.df = self.df[cols]\n\n        self.float_format = float_format\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n        self.data_separator = \",\"\n        if (\n            self.float_format is None\n            and \",\" in self.float_format\n            and \".\" in self.float_format\n        ):\n            self.data", "entropy": 40.22779404882222}
{"candidate": "        self.cols = cols\n        if index:\n            self._write_index = self._write_index_first\n            self.coloffset = 1\n        else:\n            self._write_index = self._write_index_dummy\n            self.coloffset = 0\n        if header is True:\n            self._write_header = self._write_header_default\n        elif isinstance(header, Sequence):\n            self", "entropy": 42.310961013656986}
{"candidate": "            # all are present, but not all in the same order, reorder\n            if not (Index(cols) == df.columns).all():\n                df = df[cols]\n\n        self.float_format = (\n            float_format\n            if float_format is not None\n            else float_format_default(df)\n        )\n        self._merge_cells = merge_cells\n        self.inf_rep =", "entropy": 50.28594271114841}
{"candidate": "        self.float_format = float_format\n        self.cols = cols\n        self.header = header\n        self.index = index\n        self.index_label = index_label\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n        self.excel_types = None\n\n    def _to_str(self):\n        # Convert excel column number to alphabet represenation", "entropy": 52.98860584498449}
{"candidate": "        if not isinstance(cols, ABCIndexClass):\n            cols = Index(cols)\n        if \"formatters\" in df.index.names and self.styler is None:\n            raise ValueError(\"Cannot write a styled frame without the styler\")\n        self.float_format = (\n            float_format\n            if float_format is not None\n            else get_option(\"display.float_format\")\n        )", "entropy": 58.55462509060399}
