{"candidate": "            use_type.add_field(create_cloned_field(f))\n    return ModelField(\n        name=field.name,\n        type_=use_type,\n        required=field.required,\n        alias=field.alias,\n        default=field.default,\n        constraints=field.constraints,\n        description=field.description,\n        field_info=field.field_info,\n        sub_", "entropy": 18.559024569788}
{"candidate": "            use_type.add_field(create_cloned_field(f))\n    elif lenient_issubclass(original_type, Field):\n        use_type = cast(Type[Field], original_type)\n        use_type = create_field(use_type.__name__, __config__=use_type.__config__)\n        for f in original_type.__fields__.values():\n            use", "entropy": 20.488099770259}
{"candidate": "            f_clone = create_cloned_field(f)\n            use_type.__fields__[f.name] = f_clone  # type: ignore\n            use_type.__annotations__[f.name] = f_clone.type_  # type: ignore\n        use_type.__validators__ = copy(original_type.__validators__)  # type: ignore\n        use_type.__root", "entropy": 22.761171332001005}
{"candidate": "            setattr(use_type, f.name, create_cloned_field(f))\n    if lenient_issubclass(original_type, BaseEnum):\n        original_type = cast(Type[BaseEnum], original_type)\n        use_type = create_enum(\n            original_type.__name__, __config__=original_type.__config__\n        )\n\n    field_args = {\n", "entropy": 25.707999596411003}
{"candidate": "            if not f.field_info.extra:\n                new_field = create_cloned_field(f)\n                setattr(use_type, f.name, new_field)\n                use_type.__fields__[f.name] = new_field  # type: ignore\n        use_type.__validators__ = original_type.__validators__  # type: ignore\n        use_type.__config__", "entropy": 26.248979049528007}
{"candidate": "            new_field = create_cloned_field(f)\n            setattr(use_type, f.name, new_field)\n\n    new_field = ModelField(\n        name=field.name,\n        type_=use_type,  # type: ignore\n        required=field.required,\n        alias=field.alias,\n        default=clone_field(field.default),\n        constraints=field.constraints", "entropy": 28.199007453464006}
{"candidate": "            original_field = create_cloned_field(f)\n            use_type.__fields__[f.name] = original_field\n    elif isinstance(original_type, typing.List):\n        use_type = typing.List[create_cloned_field(field.inner_type)]\n    new_field = ModelField(\n        name=field.name,\n        type_=use_type,\n        required", "entropy": 30.586806628166986}
{"candidate": "            new_f = create_cloned_field(f)\n            if getattr(new_f, \"alias\", None) is not None:\n                setattr(use_type, new_f.alias, new_f)\n            setattr(use_type, new_f.name, new_f)\n    return ModelField(\n        field.name,\n        use_type,\n        field.required,\n        default=", "entropy": 31.473603234250003}
{"candidate": "            use_type.add_field(create_cloned_field(f))\n    elif lenient_issubclass(original_type, List):\n        use_type = List[\n            create_cloned_field(\n                ModelField(\n                    name=\"\",\n                    type_=cast(Union[Type, ModelVar], field.type_.__args__[0]),\n                    required=field.required,\n                    alias=field", "entropy": 34.129170519830986}
{"candidate": "            field_copy = create_cloned_field(f)\n            if f.alias is not None:\n                field_copy.alias = f.alias  # type: ignore\n            use_type._config__.fields__[f.name] = field_copy  # type: ignore\n    else:\n        use_type = original_type\n    return ModelField(\n        name=field.name,\n        type_=use_", "entropy": 34.36180976515501}
{"candidate": "            f_field = cast(ModelField, f)\n            clone_f_field = create_cloned_field(f_field)\n            use_type.__fields__[f.name] = clone_f_field\n    return ModelField(\n        field.name,\n        field.type_,\n        default=field.default,  # type: ignore\n        alias=field.alias,\n        required=field.required,", "entropy": 34.620283118033015}
{"candidate": "            cloned_field = create_cloned_field(f)\n            set_field(use_type, cloned_field.name, cloned_field)\n    return field.clone(type_=use_type)  # type: ignore\n\n\ndef generate_schema(\n    routes: List[Union[Route, APIRoute]],\n    *,\n    title: str,\n    version: str,\n    base_", "entropy": 38.350540115436}
{"candidate": "            f_ = cast(ModelField, create_cloned_field(f))\n            f_.model_config = f.model_config\n            f_.field_info = f.field_info\n            use_type.add_field(f_)\n        if is_dataclass(original_type):\n            use_type = dataclasses.replace(original_type, __pydantic_model__=use_type)\n", "entropy": 38.362017605159984}
{"candidate": "            use_type.__fields__[f.name] = create_cloned_field(f)  # type: ignore\n\n    return field.clone(type_=use_type)\n\n\ndef get_flat_models_from_fields(\n    fields: List[List[ModelField]],\n    known_models: Set[Type[BaseModel]],\n    requested_models: Set[Type[BaseModel]] = None,\n)", "entropy": 38.700028919068984}
{"candidate": "            if f.default is ...:\n                use_type.__fields__[f.name] = model_field(\n                    type_=f.type_,\n                    name=f.name,\n                    required=f.required,\n                    alias=f.alias,\n                    const=f.const,\n                    default=f.default,\n                    field_info=f.field_info,\n                )\n            elif f.type", "entropy": 40.458221599463975}
{"candidate": "            setattr(use_type, f.name, create_cloned_field(f))\n    return create_model_field(\n        name=field.name, type_=use_type, required=field.required, alias=field.alias\n    )\n\n\ndef add_query_params(\n    operation: Dict[str, Any],\n    *,\n    query_params: Dict[str, List[ModelField]", "entropy": 41.03062348404901}
{"candidate": "            clone_field = create_cloned_field(f)\n            use_type.__fields__[f.name] = clone_field\n    return use_type.field(**field.kwargs, alias=field.name, description=field.description)  # type: ignore\n\n\ndef create_model(name: str, *, __config__: \"Config\") -> Type[BaseModel]:\n    return type(name, (Base", "entropy": 42.229183171188005}
{"candidate": "            f_clone = create_cloned_field(f)\n            f_clone.model_config = f.model_config  # type: ignore\n            add_field(f_clone, use_type)\n    elif lenient_issubclass(field.type_, list):\n        use_type = List[use_type]\n    return field.clone(type_=use_type, name=field.name.replace", "entropy": 46.739700662524}
{"candidate": "            if f.type_ is None:\n                continue\n            f_copy = create_cloned_field(f)\n            f_copy.add_to_class(use_type)\n    return create_field(field.name, type_=use_type, alias=field.alias)\n\n\ndef get_openapi_base_path(openapi_prefix: str, app: FastAPI) -> str:\n    if openapi", "entropy": 51.805228450945044}
{"candidate": "            setattr(use_type, f.name, create_cloned_field(f))\n\n    return get_field_annotation(use_type)\n\n\ndef get_field(\n    field_name: str,\n    original_type: Type[Any],\n    required: bool = False,\n    *,\n    model_name_map: Dict[Type[BaseModel], str],\n) -> ModelField:\n    if", "entropy": 54.475216938019685}
