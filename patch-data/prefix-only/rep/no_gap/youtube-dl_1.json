{"candidate": "        '!': lambda x: not x,\n    }\n\n    unary_operator_rex = re.compile(r'^\\s*(?P<op>%s)\\s*(?P<rest>.*)\\s*$' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = unary_operator_rex.search(filter_part)\n    if m", "entropy": 13.353302870441997}
{"candidate": "        '!': lambda x: not x,\n    }\n    unary_operator_rex = re.compile(r'''\n        \\A\n        \\s*\n        (?P<op>%s)\n        \\s*\n        (?P<filter_part>.+?)\n        \\s*\n        \\Z\n        ''' % '|'.join(map(re.escape, UNARY_OPERATORS.", "entropy": 18.186927666914993}
{"candidate": "        'defined': lambda x: x is not None,\n        'undefined': lambda x: x is None,\n    }\n\n    unary_operator_rex = re.compile(\n        r'''\n        ^\n        (?P<key>\\w+)\n        \\s*\n        (?P<none_inclusive>!?)\n        \\s*\n        (?P<op>%s)\n        \\s", "entropy": 21.3668783993385}
{"candidate": "        '!': lambda v: not v,\n        'not': lambda v: not v,\n    }\n    unary_operator_rex = re.compile(\n        r'''\n        ^\n        \\s*\n        (?P<op>%s)\\s*\n        (?P<filterpart>.*)\n        \\s*$\n        ''' % '|'.join(map(re.escape, UNARY", "entropy": 22.840474389631}
{"candidate": "        '!': operator.not_,\n    }\n    unary_rex = re.compile(\n        '^\\s*(?P<op>[%s])\\s*(?P<expr>.*)$'\n        % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = unary_rex.search(filter_part)\n    if m:\n       ", "entropy": 23.780088854198}
{"candidate": "        '!': lambda x: not x,\n        '!!': lambda x: x is not None,\n    }\n\n    unary_rex = re.compile(r'^\\s*(?P<op>!+)\\s*(?P<val>.+?)\\s*$')\n    m = unary_rex.search(filter_part)\n    if m:\n        return UNARY_OPERATORS[m", "entropy": 24.093268011937393}
{"candidate": "        '!': lambda val: not val,\n    }\n    unary_rex = re.compile(r'''\n        ^\\s*!\\s*\n        (?P<key>[a-zA-Z0-9_]+)\n        \\s*$\n        ''')\n    m = unary_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS", "entropy": 24.3420946328795}
{"candidate": "        '!': lambda x: not x,\n        '!!': lambda x: bool(x),\n    }\n\n    unary_rex = re.compile(\n        r'''\n        ^\n        \\s*\n        (?P<op>%s)\n        \\s*\n        (?P<expr>\n            (?P<key>[a-z0-9A-Z]+)|\n            (?P<", "entropy": 24.364889644013996}
{"candidate": "        '!': lambda v: not v,\n        '!!': lambda v: bool(v),\n        '+': lambda v: bool(v),\n        '-': lambda v: not bool(v),\n    }\n\n    operator_rex = re.compile(r'''\n        ^\n        (?P<op>%s)\n        \\s*\n        (?P<key>[a-zA-Z_][", "entropy": 25.638862410913994}
{"candidate": "        '!': lambda x: not x,\n    }\n    unary_rex = re.compile(\n        r'''^\n        (?P<unary_op>[%s])\\s*(?P<subexpr>.*)\n        \\s*$\n        ''' % ''.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = unary_rex.search(", "entropy": 25.713191040256007}
{"candidate": "        '-': lambda x: not x,\n    }\n\n    unary_operator_rex = re.compile(r'''\n        ^\n        \\s*\n        (?P<op>-)?\n        \\s*\n        (?P<key>[a-zA-Z_]\\w*)(?P<none_inclusive>\\?)?\n        \\s*$\n        ''')\n    m =", "entropy": 27.289082095501005}
{"candidate": "        '!': lambda o: not o,\n    }\n\n    unary_rex = re.compile(r'''\n        ^\\s*(?P<op>!)(?P<rest>.*)$\n        ''')\n    m = unary_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        return op(test", "entropy": 28.306421712051993}
{"candidate": "        'empty': lambda x: x is None or x == '',\n        'present': lambda x: x is not None and x != '',\n        'null': lambda x: x is None,\n        'nonnull': lambda x: x is not None,\n    }\n    unary_operator_rex = re.compile(\n        r'''^\n        (?P<inclusive>!\\s*)?\n        (?", "entropy": 28.566235953457994}
{"candidate": "        '!': (lambda v: (not v)),\n        '!!': (lambda v: (bool(v))),\n    }\n    unary_rex = re.compile(r'^\\s*(?P<op>\\!?\\!?)\\s*(?P<key>\\S+)\\s*$')\n    m = unary_rex.search(filter_part)\n    if m:\n        if", "entropy": 35.783628984646}
{"candidate": "        '!': lambda x: not x,\n        'NOT': lambda x: not x\n    }\n    operator_rex = re.compile(\n        r'''\n        (?x)^\n        (?P<none_inclusive>!)?\n        (?P<op>NOT|!)\n        \\s+\n        (?P<filterpart>.+)\n        \\s*$\n        ''')\n    m", "entropy": 36.11311341505499}
{"candidate": "        '~': lambda b: not b,\n        '-': lambda b: not b,\n    }\n\n    op_rex = re.compile(r'^(?P<op>[-~])\\s*(?P<rest>.+)$')\n    m = op_rex.match(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        return", "entropy": 37.67524413557296}
{"candidate": "        '!': lambda x: not x,\n        '!!': lambda x: x,\n    }\n\n    unary_rex = re.compile(\n        r'''\n        \\s*(?P<op>!!?|(?P<inclusive>\\+)?)\\s*\n        (?P<key>%s(?:\\.%s)*)\n        \\s*$\n        ''' % ('|'.", "entropy": 39.46875214680099}
{"candidate": "        '!': operator.not_,\n    }\n    unary_rex = re.compile(\n        r'^\\s*(?P<none_inclusive>(?P<op>!))\\s*(?P<filter>(?:[^\\s()]+|\\(\\s*[^\\s)]+\\s*\\))+)\\s*$')\n    m = unary_rex.search(filter_", "entropy": 43.15029894849397}
{"candidate": "        'neg': operator.not_,\n        'gt': (lambda x: x > 0),\n        'ge': (lambda x: x >= 0),\n        'eq': (lambda x: x == 0),\n        'le': (lambda x: x <= 0),\n        'lt': (lambda x: x < 0),\n    }\n\n    # Check if it is a unary operator with no argument\n    operator_rex = re.", "entropy": 46.08967366973802}
{"candidate": "        '@set': lambda dct, value: dct.get(value) is not None,\n    }\n    unary_rex = re.compile(\n        r'''\n        ^\n        (?P<op>%s)\n        \\s*\n        \\(\n        \\s*\n        (?P<comparisonvalue>\n            \"(?:[^\"\\\\]+|\\\\.)*\"|\n            (?:", "entropy": 54.85152134027902}
