{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 1.3504783599670007}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 1.3512534442129995}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 1.3512645827249996}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 1.3520023758300004}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 1.3521673617200012}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 1.3523411545970003}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the coefficient of determination R^2 of the prediction.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 3.0449250501455007}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the coefficient of determination R^2 of the prediction.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 3.0460018120759993}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the coefficient of determination R^2 of the prediction.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 3.0476930478174995}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean accuracy on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features` is the", "entropy": 3.124536294492}
{"candidate": "        return np.squeeze(self.model.predict(x, **kwargs))\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_", "entropy": 3.5490257683564996}
{"candidate": "        return np.squeeze(self.model.predict(x, **kwargs))\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean loss on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_", "entropy": 3.5504372543345015}
{"candidate": "        return np.squeeze(self.model.predict(x, **kwargs))\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the mean accuracy on the given test data and labels.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_", "entropy": 5.3519078555220005}
{"candidate": "        return np.squeeze(self.model.predict(x, **kwargs))\n\n    def predict_proba(self, x, **kwargs):\n        \"\"\"Returns class probability estimates for the given test data.\n\n        # Arguments\n            x: array-like, shape `(n_samples, n_features)`\n                Test samples where `n_samples` is the number of samples\n                and `n_features", "entropy": 7.0149062794239985}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    @property\n    def coef_(self):\n        return self.model.coef_\n\n    @property\n    def intercept_(self):\n        return self.model.intercept_\n\n    def score(self, x, y, **kwargs):\n        \"\"\"Returns the coefficient of determination R^2 of the prediction.\n\n        # Arguments\n            x:", "entropy": 8.912572814055997}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n\nclass KerasClassifier(BaseWrapper):\n    \"\"\"Implementation of the scikit-learn classifier API for Keras.\n    \"\"\"\n\n    def __init__(self, build_fn, **sk_params):\n        super(KerasClassifier, self).__init__(build_fn, **sk_params)\n        self.classes", "entropy": 11.826303392858495}
{"candidate": "        return self.model.predict(x, **kwargs).flatten()\n\n\ndef model_from_yaml(yaml_string, custom_objects=None):\n    \"\"\"Parses a yaml model configuration file and returns a model instance.\n\n    # Arguments\n        yaml_string: YAML string encoding a model configuration.\n\n    # Returns\n        A model instance.\n\n    # Raises\n        ValueError: in", "entropy": 13.5208988842955}
{"candidate": "        return self.model.predict(x, **kwargs).ravel()\n\n    @property\n    def coef_(self):\n        warnings.warn('\"coef_\" attribute was deprecated in version 0.19 '\n                      'and will be removed in version 0.21.')\n\n    @property\n    def feature_importances_(self):\n        warnings.warn('\"feature_importances_\" attribute was deprecated in '\n                      'version", "entropy": 15.593354517570999}
{"candidate": "        return np.squeeze(self.model.predict(x, **kwargs), axis=-1)\n\n    @property\n    def classes_(self):\n        return None\n\n\nclass KerasClassifierCV(KerasClassifier):\n    \"\"\"K-fold cross-validator for scikit-learn Wrapper models.\n    \"\"\"\n\n    def __init__(self, build_fn, **sk_params):\n        \"\"\"", "entropy": 28.12881392656351}
{"candidate": "        y = self.model.predict(x, **kwargs)\n        return y.ravel()\n\n\nclass KerasClassifierCV(KerasClassifier):\n    \"\"\"Implementation of the scikit-learn classifier API for Keras.\n\n    It implements methods `fit`, `predict` and `predict_proba` for making\n    predictions in `scikit-learn` compatible way.\n\n    This class should not be", "entropy": 30.91843333839589}
