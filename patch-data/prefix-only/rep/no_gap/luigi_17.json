{"candidate": "        from luigi.worker import Worker\n        return Worker(worker_processes=_get_config().workers, scheduler_factory=self)\n\n    def create_central_scheduler(self):\n        from luigi.scheduler import CentralPlannerScheduler\n        return CentralPlannerScheduler(\n            retry_delay=_get_config().retry_delay,\n            remove_delay=_get", "entropy": 21.3582204835037}
{"candidate": "        from luigi.worker import Worker\n        return Worker(scheduler=self)\n\n    def create_remote_scheduler(self, rpc_interface, rpc_port):\n        from luigi.rpc import RemoteScheduler\n        return RemoteScheduler(scheduler=self, rpc_interface=rpc_interface, rpc_port=rpc_port)\n\n    def create_worker(self", "entropy": 22.09003443528375}
{"candidate": "        return WorkerScheduler()\n\n    def create_remote_scheduler(self):\n        return RemoteScheduler()\n\n    def create_process_scheduler(self):\n        return CentralPlannerScheduler()\n\n    def create_distributed_scheduler(self):\n        return DistributedScheduler()\n\n    def create_mesos_scheduler(self):\n        return MesosScheduler()\n\n\n", "entropy": 23.285489877289944}
{"candidate": "        from luigi.worker import Worker\n        return Worker(scheduler=_get_scheduler(), worker_processes=_get_config().workers)\n\n    def create_remote_scheduler(self):\n        from luigi.worker import RemoteScheduler\n        return RemoteScheduler(\n            host=_get_config().remote_scheduler_host,\n            port=_get_config().remote_", "entropy": 25.090560943045297}
{"candidate": "        return interface.CentralPlannerScheduler(prune_on_get_work=True)\n\n    def create_remote_scheduler(self, **kwargs):\n        return RemoteScheduler(**kwargs)\n\n    def create_worker(self, scheduler, worker_processes):\n        return interface.Worker(scheduler=scheduler, worker_processes=worker_processes)\n\n\nclass _Work", "entropy": 26.884446992564108}
{"candidate": "        return CentralPlannerScheduler()\n\n    def create_remote_scheduler(self, host=None, port=None, use_gevent=False):\n        if host is None:\n            host = '127.0.0.1'\n        if port is None:\n            port = 8082\n        if use_gevent:\n            from luigi.worker_gevent import RemoteScheduler\n        else:\n", "entropy": 27.78623096448411}
{"candidate": "        return worker.WorkerScheduler()\n\n\nclass _WorkerFactory(object):\n\n    def create_worker(self, worker_scheduler, worker_processes):\n        return worker.Worker(worker_scheduler=worker_scheduler, worker_processes=worker_processes)\n\n\nclass _WorkflowFactory(object):\n\n    def create_workflow(self, workflow_name, workflow_dict):\n", "entropy": 28.795422383619332}
{"candidate": "        return WorkerScheduler(\n            prune_on_get_work=self.prune,\n            local_scheduler=True,\n            lock_pid_dir=self.lock_pid_dir,\n            max_running_tasks=self.max_tasks_per_worker,\n            no_lock=self.no_lock,\n            take_lock=self.take_lock)\n\n    def create_central", "entropy": 32.124349783459}
{"candidate": "        return CentralPlannerScheduler(prune_on_get_work=False)\n\n    def create_remote_scheduler(self, scheduler_host, scheduler_port):\n        from luigi.contrib.mesos import MesosTaskScheduler\n        return MesosTaskScheduler(prune_on_get_work=False, mesos_master=scheduler_host + ':' + scheduler", "entropy": 32.6837186355252}
{"candidate": "        return CentralPlannerScheduler()\n\n    def create_remote_scheduler(self, scheduler_host, scheduler_port,\n                                **scheduler_kwargs):\n        return RemoteScheduler()\n\n\nclass _Worker(object):\n\n    def __init__(self, worker_factory=_WorkerSchedulerFactory()):\n        self._worker_factory = worker_factory\n\n    def", "entropy": 34.6833560457339}
{"candidate": "        return CentralPlannerScheduler(retry_delay=60, remove_delay=120, worker_disconnect_delay=10)\n\n    def create_remote_scheduler(self, url, connect_timeout=30, retry_delay=0):\n        return RemoteScheduler(url=url, connect_timeout=connect_timeout, retry_delay=retry_delay, remove_delay=120, worker_disconnect", "entropy": 36.82167884267185}
{"candidate": "        return SingleProcessPool()\n\n    def create_remote_scheduler(self):\n        from luigi.worker import CentralPlannerScheduler, Worker\n        return CentralPlannerScheduler(prune_on_get_work=True, worker_factory=Worker)\n\n\nclass _WorkerSchedulerProxy(object):\n    _scheduler = None\n\n    def __init__(self, scheduler_f", "entropy": 44.24158197136298}
{"candidate": "        logging.debug('Creating new scheduler')\n        return WorkerScheduler(local_scheduler=True)\n\n    def create_remote_scheduler(self):\n        logging.debug('Creating new remote scheduler')\n        return RemoteScheduler()\n\n\nclass Client(object):\n\n    def __init__(self, sch=None):\n        self._scheduler = sch or _WorkerSchedulerFactory().create_", "entropy": 45.77385416427609}
{"candidate": "        return WorkerScheduler()\n\n\nDEFAULT_WORKER_SCHEDULER_FACTORY = _WorkerSchedulerFactory()\n\n\ndef _find_task_name(task_class, args):\n    for arg in args:\n        if arg.startswith('--'):\n            if '=' in arg:\n                arg = arg[:arg.index('=')]\n            arg = arg[2:].", "entropy": 45.9639260752717}
{"candidate": "        return Scheduler(prune_on_get_work=True, disable_failures=True)\n\n    def create_central_scheduler(self):\n        return RemoteScheduler(\n            worker_scheduler_factory=self.create_local_scheduler())\n\n\nclass _Worker(object):\n\n    def _run(self):\n        if not self.worker_id:\n            raise Exception('worker-", "entropy": 53.359390216744835}
{"candidate": "        return _WorkerScheduler(prune_on_get_work=True)\n\n\nclass _WorkerCfgFactory(object):\n\n    def create_config(self, argv=None):\n        return _WorkerCfg(argv)\n\n\ndef run(task_name, *args, **kwargs):\n    \"\"\"\n    Run a luigi task, wait for completion.\n\n    Parameters:\n    task_name", "entropy": 67.95411075997201}
{"candidate": "        return WorkerScheduler()\n\n\nclass _WorkerSchedulerProcessFactory(_WorkerSchedulerFactory):\n\n    def create_local_scheduler(self):\n        return luigi.worker.WorkerSchedulerProcess()\n\n\nclass _TestWorkerSchedulerProcessFactory(_WorkerSchedulerProcessFactory):\n\n    \"\"\"\n    Wrapper scheduler that invokes a function before running each task.\n\n    Used for", "entropy": 68.3698884487355}
{"candidate": "        return LocalTaskProcess(**self.options)\n\n    def create_process_pool_worker(self, worker_id):\n        return CentralPlannerScheduler(**self.options)\n\n    def __init__(self, options, workers):\n        self.options = options\n        self.workers = workers\n\n\nclass _BaseWrapper(object):\n\n    def __init__(self, args):\n        self.target_params =", "entropy": 71.582599715118}
{"candidate": "        raise NotImplementedError()\n\n    def create_remote_scheduler(self, host=None, port=None, connect_timeout=None):\n        raise NotImplementedError()\n\n\nclass _SharedPidFile(object):\n    # This class is used only to share the same pidfile between the\n    # Scheduler, Worker and Tasks\n    def __init__(self, path=None, no_lock=", "entropy": 81.40263519740846}
{"candidate": "        return CentralPlannerScheduler(prune_on_get_work=True)\n\n\nclass Worker(Config):\n\n    \"\"\"\n    Worker class\n\n    This can be run as a process with :py:func:`luigi.worker_runner`. It runs tasks locally by\n    executing the run method. It does not create any tasks, it just runs what is given to it.\n    \"\"\"\n\n    def __init__(self, worker_", "entropy": 82.5948736673757}
