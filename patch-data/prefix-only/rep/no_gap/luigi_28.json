{"candidate": "            return len(stdout.strip()) > 0\n        else:\n            cmd = \"use {0}; show partitions {1}\".format(database, table)\n            stdout = run_hive_cmd(cmd)\n\n            for line in stdout.split(\"\\n\"):\n                if self.partition_spec(partition) in line:\n                    return True\n\n            return False\n\n    def table_schema(self, table,", "entropy": 12.310884097048}
{"candidate": "            if stdout.strip() == table:\n                return True\n\n            return False\n        else:\n            stdout = run_hive_cmd('use {0}; show partitions {1};'.format(database, table))\n\n            if self.partition_spec(partition) in stdout:\n                return True\n\n            return False\n\n    def table_schema(self, table, database='default'):\n        stdout = run_h", "entropy": 13.789480014276998}
{"candidate": "            for line in stdout.split(\"\\n\"):\n                for value in line.split(\"\\t\"):\n                    if value == table:\n                        return True\n\n            return False\n        else:\n            stdout = run_hive_cmd('use {0}; show partitions {1};'.format(database, table))\n\n            for line in stdout.split(\"\\n\"):\n                for value in line.split(\"\\t\"):", "entropy": 19.256321035215997}
{"candidate": "            for line in stdout.split(\"\\n\"):\n                if table == line:\n                    return True\n            return False\n\n        else:\n            stdout = run_hive_cmd('use {0}; show partition {1};'.format(database, table))\n            spec = self.partition_spec(partition)\n            for line in stdout.split(\"\\n\"):\n                if spec == line:\n                    return True\n", "entropy": 19.783402738635996}
{"candidate": "            if stdout.strip() == table:\n                return True\n            else:\n                return False\n        else:\n            return self.table_location(table, database, partition) is not None\n\n    def table_schema(self, table, database='default'):\n        stdout = run_hive_cmd('use {0}; describe {1}'.format(database, table))\n\n        res = []\n\n        for line in stdout", "entropy": 21.739189504959008}
{"candidate": "            return stdout.strip() == table\n        else:\n            stdout = run_hive_cmd('use {0}; show partitions {1}'.format(database, table))\n\n            for line in stdout.split(\"\\n\"):\n                if self.partition_spec(partition) in line:\n                    return True\n\n            return False\n\n    def table_schema(self, table, database='default'):\n        # is", "entropy": 22.970005763092995}
{"candidate": "        else:\n            stdout = run_hive_cmd('use {0}; show partitions {1};'.format(database, table))\n\n            partition = self.partition_spec(partition)\n            for line in stdout.split(\"\\n\"):\n                if line.strip() == partition:\n                    return True\n\n        if \"OK\" in stdout and table in stdout:\n            return True\n\n        return False\n\n    def table", "entropy": 25.712405647100002}
{"candidate": "            return len(stdout) > 0\n        else:\n            stdout = run_hive_cmd(\n                \"\"\"use {0}; show partitions {1};\"\"\".format(database, table))\n\n            for line in stdout.split('\\n'):\n                if '{0}'.format(self.partition_spec(partition)) in line:\n                    return True\n            return False\n\n    def table_schema(self,", "entropy": 25.192236032606008}
{"candidate": "            for line in stdout.split(\"\\n\"):\n                if line.split(\"\\t\")[1] == 'true':\n                    return True\n\n            return False\n        else:\n            if not self.table_exists(table, database=database):\n                return False\n\n            cmd = \"use {0}; show partitions {1}\".format(database, table)\n\n            stdout = run_hive_cmd(cmd)\n\n           ", "entropy": 28.95556157650501}
{"candidate": "        else:\n            stdout = run_hive_cmd(\n                'use {0}; show partitions {1};'.format(database, table)\n            )\n            all_partitions = [line.split(\"\\t\")[0] for line in stdout.split(\"\\n\")[1:]]\n            return self.partition_spec(partition) in all_partitions\n\n        return len(stdout) > 0 and len", "entropy": 35.148309314209015}
{"candidate": "            for line in stdout.split(\"\\n\"):\n                if table in line:\n                    return True\n            return False\n        else:\n            t = self.table_schema(table, database)\n            partition_cols = [col[0] for col in t if col[1] == 'string']\n            stdout = run_hive_cmd('use {0}; show partitions {1} {2};'.format(\n", "entropy": 33.19780548178301}
{"candidate": "            return len(stdout.split(\"\\n\")) == 2\n\n        else:\n            cmd = \"use {0}; show partitions {1}\".format(database, table)\n\n            stdout = run_hive_cmd(cmd)\n\n            if partition is not None:\n                if stdout.strip() == \"\":\n                    return False\n                elif self.partition_spec(partition) not in stdout:\n                    return False\n", "entropy": 35.76179642378701}
{"candidate": "            return bool(stdout)\n        else:\n            stdout = run_hive_cmd(\n                'use {0}; show partitions {1};'.format(database, table))\n            partition_csv = \",\".join([\"{0}='{1}'\".format(k, v) for k, v in partition.items()])\n            return bool(\"\\n{0}\\n\".format(partition_csv) in std", "entropy": 36.38166880850699}
{"candidate": "            if len(stdout.strip()) != 0:\n                return True\n            else:\n                return False\n        else:\n            try:\n                self.table_location(table, database, partition)\n                return True\n            except ScriptFailure:\n                return False\n\n    def partition_spec(self, partition):\n        return \", \".join([\"{0}='{1}'\".format(key, val) for (key, val)", "entropy": 37.660584987345004}
{"candidate": "            interesting_lines = [\n                line for line in stdout.split('\\n')\n                if line not in ('', 'Logging initialized using configuration in jar:file:/usr/local/Cellar/hive/0.12.0/libexec/lib/hive-common-0.12.0.jar!/hive-log4j.properties')\n            ]\n\n            return len(interesting_lines) > 2\n        else:", "entropy": 42.195089667638}
{"candidate": "            for line in stdout.split(\"\\n\"):\n                if table == line:\n                    return True\n        else:\n            raise NotImplementedError(\"Checking existence of a partition is not supported by the command client.\")\n\n    def partition_spec(self, partition):\n        return \", \".join([\"{0}='{1}'\".format(k, v) for k, v in partition.items()])\n\n\nclass HiveTh", "entropy": 42.393172869609984}
{"candidate": "            return len(stdout.strip()) > 0\n        else:\n            # TODO: Ask the metastore api directly? (https://cwiki.apache.org/confluence/display/Hive/MetaStore+API)\n            return os.path.exists(self.table_location(table, database, partition))\n\n    def table_schema(self, table, database='default'):\n        cmd = \"use {0}; describe", "entropy": 53.45347917883503}
{"candidate": "            # hive > 0.11.0\n            if 'OK' in stdout:\n                return True\n\n            # hive < 0.11.0\n            if stdout.strip() == table:\n                return True\n        else:\n            stdout = run_hive_cmd('use {0}; show table status like \"{1}\";'.format(database, table))\n\n        return False\n\n    def db_tables(self, database):\n", "entropy": 57.27359330283697}
{"candidate": "            return 'OK' in stdout and table in stdout\n        else:\n            # Special case. Need to describe the table before the partition\n            # exists.\n            try:\n                self.table_location(table, database=database, partition=partition)\n            except HiveCommandException:\n                return False\n            else:\n                return True\n\n    def table_schema(self, table, database='default'):\n        cmd = \"", "entropy": 61.668424366116014}
{"candidate": "            regex = '.*{0}.*'.format(table)\n            if re.match(regex, stdout, flags=re.MULTILINE):\n                return True\n            else:\n                return False\n        else:\n            # hive does not support partition information in show tables, so just\n            # check for dir existence\n            return self.table_location(table, database=database, partition=partition) is not None\n\n    def", "entropy": 65.16926195738799}
