{"candidate": "    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass, ABCExtensionArray)):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.", "entropy": 7.411835066863999}
{"candidate": "    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_old(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_old(np.asarray(obj))\n   ", "entropy": 10.051509104754007}
{"candidate": "    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass, ABCExtensionArray)):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_old(np", "entropy": 13.306732562205005}
{"candidate": "    elif is_extension_array_dtype(obj):\n        return obj.isna()\n    elif isinstance(obj, ABCSeries):\n        return obj._values.isna()\n    elif isinstance(obj, ABCDataFrame):\n        return obj._data.isna(func=_isna_old)\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.", "entropy": 14.662848258140803}
{"candidate": "    elif isinstance(obj, ABCIndexClass):\n        return obj.values.isna()\n    elif isinstance(obj, ABCSeries):\n        return obj._values.isna()\n    elif isinstance(obj, ABCDataFrame):\n        return obj.apply(_isna_old)\n    elif (\n        isinstance(obj, np.ndarray)\n        and obj.ndim > 0\n        and np", "entropy": 24.278306397624}
{"candidate": "    return bool(obj.isna().values.any())\n\n\ndef _isna_ndarraylike(arr):\n    \"\"\"\n    Detect missing values, treating None, NaN, INF, -INF as null.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    from pandas.core.dtypes.missing import isna\n\n", "entropy": 25.533484795642998}
{"candidate": "    elif isinstance(obj, np.ndarray):\n        if obj.ndim == 0:\n            # e.g. np.array(1.0)\n            return libmissing.checknull_old(obj.item())\n        else:\n            return libmissing.isnull_old(obj)\n    elif isinstance(obj, ABCSeries):\n        if obj.ndim == 2:\n            raise NotImplemented", "entropy": 25.593966358684998}
{"candidate": "    elif isinstance(obj, (ABCSeries, ABCIndexClass, ABCExtensionArray, ABCDatetimeArray, ABCTimedeltaArray)):\n        return _isna_old(obj.values)\n    elif isinstance(obj, np.ndarray):\n        return _isna_old(obj)\n    elif isinstance(obj, ABCDataFrame):\n        return obj._isna()\n    elif isinstance(", "entropy": 26.724414759206006}
{"candidate": "\n    elif isinstance(obj, ABCIndexClass):\n        return obj.isna()\n    elif is_list_like(obj):\n        return _isna_ndarraylike(obj)\n    else:\n        return obj is None\n\n\ndef _isna_ndarraylike(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    Parameters\n    ----------\n    arr : array-like\n\n   ", "entropy": 28.609137858685013}
{"candidate": "    elif isinstance(obj, np.ndarray) and obj.dtype.fields is not None:\n        return obj.view(np.recarray).isnull()\n    elif isinstance(obj, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n        return obj.apply(_isna_old)\n    elif isinstance(obj, (ABCExtensionArray, ABCDatetimeArray, ABCTimedeltaArray", "entropy": 27.547968159788}
{"candidate": "    elif is_bool_dtype(obj):\n        return False\n    elif is_list_like(obj):\n        pass\n    elif hasattr(obj, \"values\"):\n        return _isna_ndarraylike(obj.values)\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(obj)\n    else:\n        return obj is None\n\n\n", "entropy": 31.065393234335495}
{"candidate": "    elif isinstance(obj, float) and not np.isfinite(obj):\n        return True\n    elif isinstance(obj, (ABCSeries, ABCIndexClass)):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCDataFrame):\n        return obj._isna\n    elif isinstance(obj, ABCExtensionArray) and not isinstance(obj, ABCDatetimeArray", "entropy": 37.757370877701}
{"candidate": "    elif isinstance(obj, (ABCIndexClass, ABCSeries, np.ndarray)):\n        if obj.ndim > 1:\n            raise NotImplementedError(\"isna is not defined for > 1-d arrays\")\n\n        if not isinstance(obj, ABCIndexClass):\n            return libmissing.checknull_old(obj)\n        else:\n            # e.g. DatetimeIndex/TimedeltaIndex\n", "entropy": 37.908780772488}
{"candidate": "    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n        return libmissing.isnaobj(obj.values)\n    elif isinstance(obj, ABCExtensionArray):\n        arr = extension_array_as_array(obj)\n        if isinstance(arr, np.ndarray):\n            return libmissing.isnaobj(arr)\n        return libmissing.isnaobj(", "entropy": 39.37195020134999}
{"candidate": "    elif is_list_like(obj):\n        if isinstance(obj, ABCSeries):\n            # GH#22153\n            from pandas.core.missing import array_equivalent\n\n            return array_equivalent(obj.array, libmissing.NAType())\n        elif isinstance(obj, ABCIndexClass):\n            return np.array([checknull_old(x) for x in obj], dtype=np.bool", "entropy": 41.783512827087}
{"candidate": "    elif (\n        isinstance(obj, np.ndarray)\n        or hasattr(obj, \"__array__\")\n        or hasattr(obj, \"__array_function__\")\n    ):\n        if obj.shape == ():\n            # numpy 1.14+ returns a numpy scalar instead of a bool\n            return libmissing.checknull_old(obj.item())\n        else:\n            return _is", "entropy": 45.32133510057481}
{"candidate": "    elif isinstance(obj, ABCSeries):\n        if isinstance(obj._values, ABCIndexClass):\n            # Equivalent to np.empty(obj.shape, dtype=object)\n            res = _values_from_object(np.empty(obj.shape, dtype=object))\n            np.putmask(res, np.array(obj._values), False)\n            return res\n        elif isinstance(obj", "entropy": 51.25076262127001}
{"candidate": "    elif isinstance(obj, (ABCSeries, np.ndarray)):\n        # XXX\n        if is_sparse(obj):\n            raise NotImplementedError(\"isna is not defined for sparse data\")\n\n        # hack for #1995\n        if isinstance(obj, ABCSeries) and obj.name is None:\n            return np.array([True] * len(obj), dtype=bool)\n\n        return _is", "entropy": 53.76952835839001}
{"candidate": "    elif is_extension_array_dtype(obj.dtype) and _isna_new(obj).any():\n        return True\n\n    try:\n        return obj.isna()\n    except AttributeError:\n        pass\n\n    # ignore array-likes\n    try:\n        len(obj)\n    except TypeError:\n        return False\n\n    if isinstance(obj, np.ndarray):\n        try", "entropy": 55.124512292928806}
{"candidate": "\n    try:\n        f = obj.isna\n    except AttributeError:\n        # we could try to coerce to an array\n        # and then try this, but...\n        f = libmissing.checknull_old\n    return f()\n\n\n_isna_doc = \"\"\"\nDetect missing values (NaN in numeric arrays, None/NaN in object arrays).\n\nParameters\n----------\narr : ndarray-like\n   ", "entropy": 56.905745136488015}
