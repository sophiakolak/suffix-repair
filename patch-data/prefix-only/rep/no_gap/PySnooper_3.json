{"candidate": "            with open(output, 'ab') as f:\n                f.write(s if isinstance(s, bytes) else s.encode('utf-8'))\n    elif hasattr(output, 'write'):\n        def write(s):\n            output.write(s)\n            if hasattr(output, 'flush'):\n                getattr(output, 'flush')()\n    else:\n        raise TypeError(", "entropy": 28.0160656351325}
{"candidate": "            with open(output, 'a') as file:\n                file.write(s)\n    else:\n        write = output.write\n    return write\n\n\ndef truncate_left(string, max_size):\n    if len(string) <= max_size:\n        return string\n    else:\n        return '...' + string[len(string) - max_size + 3:]\n\n\ndef truncate_right(string,", "entropy": 30.156117320677417}
{"candidate": "            output = open(output, 'a')\n            output.write(s)\n            output.write('\\n')\n            output.close()\n    elif hasattr(output, 'write'):\n        def write(s):\n            output.write(s)\n            output.write('\\n')\n    else:\n        raise TypeError(\"'output' argument must be one of: None, string, \"\n                        \"PathLike", "entropy": 32.17411575664301}
{"candidate": "            with open(output, 'a', encoding='utf-8') as f:\n                f.write(s)\n    elif isinstance(output, pycompat.file_types):\n        def write(s):\n            output.write(s)\n    else:\n        raise TypeError(\n            '`output` must be either a file, a string or None, '\n            f'not `{output!r}`.'", "entropy": 32.62174496468001}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    elif isinstance(output, (file, pycompat.FileType, pycompat.IOBase)):\n        def write(s):\n            output.write(s)\n    else:\n        raise TypeError(output)\n    return write\n\n\ndef print_exception(exception, output=None):\n    \"\"\"\n    Print", "entropy": 37.1824523432945}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    else:\n        def write(s):\n            output.write(s)\n    return write\n\n\nclass _Stack:\n    def __init__(self, name=None, maxlen=None):\n        self.name = name\n        self.storage = collections.deque(maxlen=maxlen)\n\n    def __repr__(", "entropy": 42.59522955526098}
{"candidate": "            with open(output, 'w') as f:\n                f.write(s)\n    elif hasattr(output, 'write'):\n        write_function = output.write\n        write = lambda s: write_function(s)\n    else:\n        raise TypeError(f'`output` must be None or a file-like object, not {output!r}.')\n    return write\n\n\n\nclass Tweezer", "entropy": 42.654324753763994}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    else:\n        assert hasattr(output, 'write')\n        if not hasattr(output, 'flush'):\n            raise TypeError('''Output must be a file-like object that has\n                               a `flush` method.''')\n        write = output.write\n    return write\n\n\n\nclass TimeLogger(object):\n\n", "entropy": 44.627463638158986}
{"candidate": "            with open(output, 'a') as output_file:\n                output_file.write(s)\n    elif hasattr(output, 'write'):\n        write = output.write\n    else:\n        raise ValueError(f\"Unknown output type '{type(output)}': {output!r}\")\n    return write\n\n\ndef trace_output_to_file(output=None):\n    '''\n    Trace all", "entropy": 47.423064965473}
{"candidate": "            stderr = open(output, 'a')\n            stderr.write(s)\n    else:\n        write = output.write\n    return write\n\n\ndef get_tick_rate(tick_rate):\n    '''Get `tick_rate` in number of ticks per second.'''\n    if isinstance(tick_rate, (int, float)):\n        if tick_rate == 0:\n            tick_rate =", "entropy": 48.67811228113901}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    else:\n        assert isinstance(output, (types.FileType, os.PathLike))\n        def write(s):\n            output.write(s)\n    return write\n\n\ndef get_tracer(output, trace_all=True, trace_module=None,\n               trace_file=None, trace_package=None):\n", "entropy": 48.941061237172995}
{"candidate": "            with open(output, mode='w') as f:\n                f.write(s)\n    else:\n        write = output.write\n\n    return write\n\n\nclass CallStackEntry(object):\n    def __init__(self, frame, time_entered, args=None, kwargs=None):\n        self.frame = frame\n        self.time_entered = time_entered\n        self.children = []\n", "entropy": 50.09775828839798}
{"candidate": "            with open(output, 'a', encoding='utf-8') as f:\n                f.write(s)\n    else:\n        def write(s):\n            output.write(s)\n\n    return write\n\nclass Interceptor(object):\n\n    def __init__(self, tracer=None, output=None, datetime=None,\n                 python_version=None):\n        \"\"\"\n        Args:\n            tr", "entropy": 50.57465406213101}
{"candidate": "            with open(output, 'a') as output_file:\n                output_file.write(s)\n    else:\n        write = output.write\n    return write\n\n\ndef get_directory_sep(path):\n    if sys.platform == 'win32':\n        return '\\\\'\n    else:\n        return '/'\n\n\ndef make_color_regex(color_name):\n    return re.compile(", "entropy": 52.508080912695}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    else:\n        write = output.write\n\n    return write\n\n\ndef get_format_args(args, kwargs, local_vars):\n\n    posonly_args = utils.get_posonlyargs(args, kwargs)\n    varargs = utils.get_varargs(args, kwargs)\n    k", "entropy": 53.94074115820998}
{"candidate": "            with open(output, 'a', encoding='utf-8') as f:\n                f.write(s)\n    else:\n        assert hasattr(output, 'write')\n        write = output.write\n    return write\n\n\nclass TracerDebugger(object):\n    '''\n    Debugger to perform step-by-step debugging on a `Tracer` instance.\n    \n    This is used by the `step_through", "entropy": 60.509863328264004}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    else:\n        assert hasattr(output, 'write')\n        def write(s):\n            output.write(s)\n    return write\n\n\nclass ExecutionProfiler:\n    '''\n    A profiler that inspects the call stack to produce runtime profiling\n    information.\n\n    This is a replacement for :class:`cProfile.Profile", "entropy": 60.63453139923401}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    elif hasattr(output, 'write'):\n        def write(s):\n            output.write(s)\n    else:\n        assert False\n    return write\n\n\ndef _clean_path(path):\n    '''\n    Strip out user-specific info from paths.\n\n    This function is meant to remove user-specific info such as", "entropy": 61.16086135640599}
{"candidate": "            with open(output, 'a') as f:\n                f.write(s)\n    else:\n        def write(s):\n            output.write(s)\n    return write\n\n\n\ndef _real_inspect_getframeinfo(frame_or_code, context=1):\n    # `inspect` module in Python 3.2 doesn't have `inspect.getframeinfo`.\n    if hasattr(inspect", "entropy": 61.227500990075995}
{"candidate": "            with open(output, 'w') as f:\n                f.write(s)\n    else:\n        def write(s):\n            output.write(s)\n    return write\n\n\n@decorator.decorator\ndef wrapping_call_with_summary(wrapped, _, args, kwargs):\n    '''\n    A decorator that wraps a call and prints a summary.\n\n    (Note that we've", "entropy": 69.73538140826902}
