{"candidate": "    if any((needs_update('ftp'), needs_update('ftp_port'))):\n        if want['ftp'] is False:\n            add('no protocol ftp')\n        else:\n            if have['ftp'] is False and want['ftp'] in (False, None):\n                warnings.append('protocol ftp is not enabled, not configuring ftp port value')\n            else:\n                port = want['", "entropy": 6.889995294042}
{"candidate": "    if any((needs_update('ssh'), needs_update('ssh_port'))):\n        if want['ssh'] is False:\n            add('no protocol ssh')\n        else:\n            if have['ssh'] is False and want['ssh'] in (False, None):\n                warnings.append('protocol ssh is not enabled, not configuring ssh port value')\n            else:\n                port = want['ssh_port'] or 830\n", "entropy": 7.221917235798997}
{"candidate": "    if any((needs_update('tcl'), needs_update('tcl_port'))):\n        if want['tcl'] is False:\n            add('no protocol tcl')\n        else:\n            if have['tcl'] is False and want['tcl'] in (False, None):\n                warnings.append('protocol tcl is not enabled, not configuring tcl port value')\n            else:\n                port = want['", "entropy": 7.279611693171996}
{"candidate": "    if any((needs_update('mgmt_api_ssl'), needs_update('mgmt_api_ssl_port'))):\n        if want['mgmt_api_ssl'] is False:\n            add('no protocol tmsh')\n        else:\n            if have['mgmt_api_ssl'] is False and want['mgmt_api_ssl'] in (False, None):\n                warnings.append('protocol mgmt_", "entropy": 12.423288817759001}
{"candidate": "    if any((needs_update('stats'), needs_update('stats_port'))):\n        if want['stats'] is False:\n            add('no protocol stats')\n        else:\n            if want['stats_port'] is None:\n                add('protocol stats')\n            else:\n                add('protocol stats port %s' % want['stats_port'])\n\n    return commands, warnings\n\n\ndef map_config_to_", "entropy": 20.4207713318775}
{"candidate": "    commands = flatten_list(commands)\n\n    if commands:\n        if not module.check_mode:\n            load_config(module, commands)\n\n        changed = True\n\n    return commands, changed, warnings\n\n\ndef main():\n    argument_spec = f5_argument_spec()\n\n    meta_args = dict(\n        http=dict(type='bool', default=None),\n        http_port=dict(type='int", "entropy": 20.9914836411644}
{"candidate": "    if commands:\n        commands.insert(0, 'configure')\n        commands.append('end')\n        result['commands'] = commands\n    else:\n        result['commands'] = []\n\n    result['warnings'] = warnings\n    result['changed'] = changed\n\n    return result\n\n\ndef main():\n    fields = {\n        \"http\": {\"required\": False, \"type\": \"bool\", \"default\": None},\n       ", "entropy": 25.433029347287395}
{"candidate": "    if any((needs_update('http_compression'),\n            needs_update('http_compression_allow'))):\n        if want['http_compression'] is False:\n            add('no protocol http compression')\n        else:\n            if have['http_compression'] is False and want['http_compression'] in (False, None):\n                warnings.append('protocol http compression is not enabled, not configuring compression settings')", "entropy": 27.851900810505004}
{"candidate": "    if any((needs_update('http_rest'), needs_update('http_rest'))):\n        if want['http_rest'] is False:\n            add('no api http-commands')\n        else:\n            add('api http-commands')\n\n    if any((needs_update('health_check'), needs_update('health_check'))):\n        if want['health_check'] is False:\n            add('no http", "entropy": 31.764135576374706}
{"candidate": "    if any((needs_update('mgmt_api_ssl'), needs_update('mgmt_api_ssl_port'))):\n        if want['mgmt_api_ssl'] is False:\n            add('no management api https')\n        else:\n            cmd = 'management api https'\n            if want['mgmt_api_ssl_port'] and (get_diff(want, have, 'mgmt_api_ssl_port", "entropy": 36.05729796880899}
{"candidate": "    if want['nodes'] is not None:\n        if want['nodes'] == []:\n            add('management node localhost')\n        else:\n            for node in want['nodes']:\n                add('management node %s' % node)\n\n    if want['peers'] is not None:\n        if want['peers'] == []:\n            add('management peer localhost')\n        else:\n            for peer in want", "entropy": 36.423202835261016}
{"candidate": "    if len(commands) > 0:\n        commands.insert(0, 'modify mgmt_cli')\n        commands.append('exit all')\n        rc, out, err = module.run_commands(commands)\n\n        if rc != 0:\n            module.fail_json(msg=to_text(err, errors='surrogate_then_replace'), commands=commands)\n\n    result = {}\n    result['", "entropy": 36.700084072972416}
{"candidate": "    if needs_update('management_api_ssl'):\n        if want['management_api_ssl'] is False:\n            add('no management api http-commands')\n        else:\n            add('management api http-commands')\n            add('protocol https')\n\n    if needs_update('ssl_min_ver'):\n        if want['ssl_min_ver'] is None:\n            add('no tls-min-", "entropy": 36.941752267085796}
{"candidate": "    if commands:\n        if commands[0] != 'management api http-commands':\n            commands.insert(0, 'management api http-commands')\n\n        changes = load_config(client, commands)\n\n    return changes, warnings, commands\n\n\ndef map_obj_to_commands(updates, module):\n    commands = list()\n    warnings = list()\n\n    have = map_config_to_obj(module)\n", "entropy": 36.96818534104863}
{"candidate": "    if any((needs_update('ipv6_enabled'), needs_update('ipv6_enabled'))):\n        if want['ipv6_enabled'] is False:\n            add('no uuid-mgmt')\n            add('no ipv6 enable')\n        else:\n            if have['ipv6_enabled'] is False and want['ipv6_enabled'] in (False, None):\n                warnings.append('ip", "entropy": 38.376901428265995}
{"candidate": "    if commands:\n        if check_mode:\n            return commands\n        diff = module.config.load_config(commands, flags=['replace'])\n        if diff:\n            changes.append(diff)\n            module.config.commit(save=True)\n        else:\n            module.config.save_config()\n    if warnings:\n        result['warnings'] = warnings\n    if changes:\n        result['changed']", "entropy": 41.429626901788026}
{"candidate": "    if any(needs_update(x) for x in HAVE_REQUIRE_TLS):\n        if want['require_tls'] is True:\n            add('ssl-require-tls')\n        else:\n            add('no ssl-require-tls')\n\n    if any((needs_update('ssl_min_proto_version'),\n            needs_update('ssl_max_proto_version'),\n            needs_update", "entropy": 41.54462021015598}
{"candidate": "    if commands:\n        commands.append('exit')  # will always be at least 1 command\n        commands.insert(0, 'config')\n        response = client.api.tm.cli.exec_cmd(\n            'run',\n            util.urllib_parse.quote(''.join(commands)),\n        )\n\n        if 'commandResult' not in response.attrs:\n            raise F5ModuleError(response.attrs", "entropy": 63.49633646728703}
{"candidate": "    if state == 'absent' and have:\n        commands.append('no management api %s' % want['context'])\n\n    return commands, warnings\n\n\ndef core(want, have):\n    \"\"\"Return commands to set the desired state of a context.\"\"\"\n    commands = []\n    warnings = []\n\n    if any((needs_update('http'), needs_update('http_port'))):\n        if want['http'] is False:", "entropy": 64.73917618447804}
{"candidate": "    connection = module.params['connection']\n    if connection:\n        if any((needs_update('connection_port'), needs_update('connection_password'))):\n            if have['connection'] is None:\n                add('set connection %s' % connection)\n            else:\n                add('set connection %s protocol mgmt' % connection)\n\n    if module.params['cluster_port']:\n        add('set cluster self-device", "entropy": 73.37904406638953}
