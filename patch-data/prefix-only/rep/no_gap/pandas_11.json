{"candidate": "                i = np.where(level == key)[0][0]\n                to_concat.append(i * np.ones(len(index), dtype=np.intp))\n\n            codes = np.concatenate(to_concat)\n            codes_list.append(codes)\n\n        codes_list.append(np.concatenate([np.arange(len(x)) for x in indexes]))\n", "entropy": 20.218400766096206}
{"candidate": "                i = ensure_index(level).get_indexer(key)\n                to_concat.append(index.codes[:, i])\n            codes = np.concatenate(to_concat)\n            codes_list.append(codes)\n\n        concat_index = MultiIndex(\n            levels=levels, codes=codes_list, verify_integrity=False, names=names\n        )\n    else:\n       ", "entropy": 24.06807155329051}
{"candidate": "                labels = level.get_indexer(key)\n                to_concat.append(labels)\n\n            level_codes = concat(to_concat, ignore_index=True)\n            codes_list.append(level_codes)\n\n        return MultiIndex(levels=levels, codes=codes_list, names=names)\n    else:\n        return MultiIndex.from_product(levels, names=names)\n\n\n@", "entropy": 24.521876973856994}
{"candidate": "                codes = com.values_from_object(index)\n                to_concat.append(level.get_indexer(codes, method=\"pad\"))\n\n            codes_list.append(np.concatenate(to_concat))\n\n        concat_index = MultiIndex(\n            levels=levels, codes=codes_list, names=names, verify_integrity=False\n        )\n\n    else:\n\n        # simple case", "entropy": 28.08671384085109}
{"candidate": "                i = level.get_loc(key)\n                codes = [i] * len(index)\n                to_concat.append(codes)\n\n            codes_list.append(np.concatenate(to_concat))\n\n        concat_index = MultiIndex.from_arrays(\n            codes_list, levels=levels, labels=codes_list, names=names\n        )\n\n        if not indexes[0].", "entropy": 28.764352148391104}
{"candidate": "                if isinstance(key, tuple):\n                    if key in level:\n                        loc = level.get_loc(key)\n                        to_concat.append(np.full_like(index, loc, dtype=np.intp))\n                    else:\n                        new_codes = np.arange(len(index), dtype=np.intp)\n                        level = level.insert(loc=len(level), item=key", "entropy": 31.79113068697099}
{"candidate": "                codes = level.get_indexer(key)\n                if len(level) != len(codes):\n                    raise ValueError(\n                        f\"Key length ({len(level)}) and codes length \"\n                        f\"({len(codes)}) must match for level \"\n                        f\"{level.name}\"\n                    )\n                to_concat.append(codes)\n\n            codes_list.append(np.concatenate([", "entropy": 32.331635491568306}
{"candidate": "                i = index.get_level_values(key)\n                lev = level.get_loc(key)\n                codes = np.array(i.codes, dtype=np.intp)\n                codes[codes == -1] = len(level)\n                codes += lev\n                to_concat.append(codes)\n            codes_list.append(np.concatenate(to_concat))\n\n        # things", "entropy": 32.64614237449122}
{"candidate": "                labels = np.where(level == key)[0]\n                if len(labels) == 0:\n                    raise Exception(\"Level %s not found\" % key)\n                elif len(labels) > 1:\n                    raise Exception(\"Level %s is not unique\" % key)\n                else:\n                    code = labels[0]\n                    to_concat.append(np.repeat(code, len(index)))\n            codes", "entropy": 34.194191427468034}
{"candidate": "                # if the levels are equal, then we can use the codes\n                # directly, otherwise do a map\n                if level.equals(index):\n                    to_concat.append(index.codes)\n                else:\n                    to_concat.append(np.array(level.get_indexer(index)))\n            codes_list.append(np.concatenate(to_concat))\n\n        return MultiIndex(\n", "entropy": 34.45061728592799}
{"candidate": "                labels = index.get_indexer_for(level)\n                to_concat.append(labels)\n            level_codes = ensure_int64(concat_compat(to_concat))\n            codes_list.append(level_codes)\n        codes = codes_list\n    else:\n        # things are the same size, so can just compute the indexer once\n        # and use the same indexer for each", "entropy": 34.544356874361}
{"candidate": "                level_index = ensure_index(level)\n                if not isinstance(key, str):\n                    key = level_index[key]\n\n                tup = (key,)\n                try:\n                    code = level_index.get_loc(key)\n                except KeyError:\n                    raise ValueError(\n                        f\"Key {tup} not found in level {level_index.name}\"\n                    )\n\n                to_concat", "entropy": 39.536133761569495}
{"candidate": "                i = level.get_loc(key)\n                try:\n                    codes = ensure_platform_int(index.codes)\n                except AttributeError:\n                    # datetimelike/timedeltalike\n                    codes = ensure_platform_int(\n                        level.get_indexer(index.values, level=i)\n                    )\n                codes = ensure_int64(codes)\n                to_concat.append", "entropy": 41.511793252267985}
{"candidate": "                if key not in index.levels[0]:\n                    # GH 18295\n                    # if the key is not in the index, we need to\n                    #  add it in with all missing values\n                    index = index.set_levels(np.concatenate([index.levels[0], [key]]), 0)\n                    new_codes = np.concatenate(\n                        [index.codes[0], np.full(index", "entropy": 47.207195954726785}
{"candidate": "                i = level.get_loc(key)\n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n\n        # for compatibility with older numpy versions\n        # codes_list = list(map(np.concatenate, codes_list))\n        new_codes = list(iter(np.array(codes_list", "entropy": 49.09698853187439}
{"candidate": "                i = levels[0].get_loc(key)\n                codes = ensure_platform_int(index.values)\n                if codes.dtype.kind == \"i\":\n                    to_concat.append(codes + len(levels[0]) * i)\n                else:\n                    to_concat.append(codes)\n            codes_list.append(array_union_categorical(to_concat))\n\n        return", "entropy": 49.573437414277485}
{"candidate": "                i = index.get_level_values(key)\n                s = i.size\n                if isinstance(level, MultiIndex):\n                    assert len(level.levels) == 1\n                    k = level.get_level_values(0).get_indexer(i)\n                    c = k.take(level.codes[0])\n                else:\n                    c = level.get_indexer(i.values)\n                #", "entropy": 52.851396972022386}
{"candidate": "                label = level == key\n                to_concat.append(com.get_level_codes(index.values, label))\n            level_codes = np.concatenate(to_concat)\n            codes_list.append(level_codes)\n    else:\n        # the levels match across all the indexes, so just concatenate a\n        # single level values, which should be much faster\n        first_index = indexes", "entropy": 55.98898349873321}
{"candidate": "                code = level.get_loc(key)\n                if isinstance(code, slice):\n                    # GH 16834\n                    code = np.arange(code.start, code.stop, code.step)\n                to_concat.append(code)\n\n            codes_list.append(np.concatenate(to_concat))\n\n        # we should have mutated the list here\n        assert len(codes_list) >", "entropy": 60.66862635585499}
{"candidate": "                take_index = level.get_indexer([key])\n                if take_index.ndim > 1 or (take_index == -1).any():\n                    # handle the ", "entropy": 37.0252923407027}
