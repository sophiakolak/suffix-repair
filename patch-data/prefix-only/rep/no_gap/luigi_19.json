{"candidate": "        last_status = task.status\n        if last_status == PENDING:\n            del self._status_tasks[last_status][task.id]\n        elif last_status == RUNNING:\n            del self._status_tasks[last_status][task.id]\n            del self._running_tasks[task.id]\n        elif last_status == FAILED:\n            del self._status_t", "entropy": 24.0861898134145}
{"candidate": "        if task.status != DISABLED:\n            self._status_tasks[task.status].pop(task.id, None)\n        if new_status != DISABLED:\n            self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n\n    def get_tasks_in_status(self, status):\n        return self._status_tasks[status].values()", "entropy": 28.19209715739747}
{"candidate": "        if new_status == RUNNING:\n            assert task.status in (PENDING, RUNNING, FAILED)\n            assert task.worker is not None\n            assert task.start_time is not None\n\n        if new_status == DONE:\n            assert task.status in (PENDING, RUNNING, FAILED)\n            assert task.worker is None\n            assert task.start_time is not None\n            assert task", "entropy": 32.58416128446101}
{"candidate": "        task.status = new_status\n\n        if new_status == PENDING and config:\n            task.config = config\n\n        self._status_tasks[new_status][task.id] = task\n        del self._status_tasks[task.status][task.id]\n\n        if task.status == DONE:\n            self.done_task(task)\n        elif task.status == PENDING:\n            self", "entropy": 36.949923055270595}
{"candidate": "        # update task\n        if task.status in self._status_tasks:\n            del self._status_tasks[task.status][task.id]\n        if new_status in self._status_tasks:\n            self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n        task.status_time = self.time()\n\n        # update parent task\n        if task", "entropy": 37.28693622062209}
{"candidate": "        old_status = task.status\n\n        if task.status == RUNNING:\n            logger.debug(\"task: %s removed from RUNNING\", task.id)\n            self._status_tasks[RUNNING].pop(task.id)\n        elif task.status == PENDING:\n            logger.debug(\"task: %s removed from PENDING\", task.id)\n            self._status_tasks[PENDING", "entropy": 38.70588177922899}
{"candidate": "        if config:\n            for failure in task.failures:\n                failure.count = 0\n                failure.first_failure_time = failure.last_failure_time = None\n\n        task.status = new_status\n\n        if task.status not in self._status_tasks:\n            self._status_tasks[task.status] = OrderedDict()\n\n        self._status_tasks[task.status][task.", "entropy": 41.440007015496015}
{"candidate": "        if task.status == RUNNING:\n            if new_status == FAILED:\n                self.re_enable(task, config)\n                task.task_runner.release_resources(task)\n            elif new_status == DONE:\n                task.task_runner.release_resources(task)\n\n        if task.status == PENDING and new_status == RUNNING:\n            task.start_time = datetime.", "entropy": 42.71745162660349}
{"candidate": "        was_running = task.status == RUNNING\n\n        if task.status != new_status:\n            if task.status in self._status_tasks:\n                del self._status_tasks[task.status][task.id]\n\n            task.status = new_status\n\n            if new_status == FAILED:\n                # add failure\n                failure_time = datetime.datetime.now()\n                task.failures.", "entropy": 42.988739016756}
{"candidate": "        self._status_tasks[task.status].pop(task.id)\n        task.status = new_status\n        assert task.id not in self._status_tasks[task.status], (\n            \"Task ID %s has been double-set to %s\" % (task.id, task.status)\n        )\n        self._status_tasks[task.status][task.id] = task\n\n        if config:", "entropy": 43.05844137194051}
{"candidate": "        if new_status == DISABLED and task.status == PENDING:\n            task.status = DISABLED\n            if config:\n                self._configure_task(task, config)\n            return\n        elif task.status == DISABLED and new_status in (PENDING, RUNNING):\n            task.status = new_status\n            if config:\n                self._configure_task(task, config)\n", "entropy": 46.286057374867006}
{"candidate": "        old_status = task.status\n\n        if config:\n            getattr(task, 'update_' + task.type)(config)\n\n        now = time()\n        self._status_tasks[old_status].pop(task.id, None)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n        task.last_status_change = now\n        task", "entropy": 50.589571916496965}
{"candidate": "        task.status = new_status\n        self._status_tasks[task.status][task.id] = task\n\n        if new_status == DONE:\n            self._done_tasks.append(task)\n            if config:\n                task.result_info.set_state(config)\n\n        elif new_status == FAILED:\n            task.failures.append(config)\n            if task.scheduler", "entropy": 51.76561716944199}
{"candidate": "        old_status = task.status\n        task.status = new_status\n\n        if task.status != old_status:\n            try:\n                del self._status_tasks[old_status][task.id]\n            # when the task is already deleted we don't care, just skip this\n            except KeyError:\n                pass\n\n            try:\n                self._status_tasks[task.status][task.id] = task\n", "entropy": 55.992767540593}
{"candidate": "            # don't allow workers to override a config disable\n            elif new_status == FAILED and config.task_status(task.id) == DISABLED:\n                return\n\n        task.status = new_status\n        if task.status == DONE:\n            task.update_done_time()\n\n        # Remove from the old status\n        del self._status_tasks[task.status][task.id]\n\n        # Add", "entropy": 58.31972522847499}
{"candidate": "        if new_status not in task.allowed_states:\n            raise StateChangeError(\n                'Cannot change state of task %r from %r to %r' % (task.id, task.status, new_status)\n            )\n        if new_status == QUEUED:\n            task.start_time = task.end_time = None\n        if new_status == RUNNING:\n            task.start_time =", "entropy": 58.968239364790016}
{"candidate": "        if task.status == RUNNING and new_status == DONE:\n            task.running = False\n            for action in task.actions.values():\n                if action.status == DONE_ACTION:\n                    action.status = DONE\n                if action.status == PENDING_ACTION:\n                    action.status = PENDING\n                if action.status == WAITING_ACTION:\n                    action.status = WAITING\n\n       ", "entropy": 60.67770453718601}
{"candidate": "        # if we're confident that the task isn't still running, go ahead and\n        # change the status\n        elif task.status == FAILED:\n            if new_status == FAILED:\n                task.failures.add(config)\n            elif new_status == DISABLED or new_status == DONE:\n                self.re_enable(task, config)\n\n        elif task.status == RUNNING:\n", "entropy": 69.15983640720907}
{"candidate": "        # don't allow workers to modify the status of a task twice\n        old_status = task.status\n        if new_status == old_status:\n            return\n\n        if new_status == PENDING:\n            raise ValueError('Cannot set a task to PENDING')\n\n        # check if the task has changed within the scheduler\n        if new_status in (SCHEDULED, PENDING, RUNNING):\n           ", "entropy": 85.41667967766895}
{"candidate": "        curr_status = task.status\n        if self.has_task(task.id) and curr_status == new_status:\n            return  # nothing changed\n\n        if task.status != new_status:\n            task.status = new_status\n            task.config = config\n            task.start_time = None\n            task.end_time = None\n\n            # we can't modify the existing task object here, so instead we", "entropy": 89.38049484131054}
