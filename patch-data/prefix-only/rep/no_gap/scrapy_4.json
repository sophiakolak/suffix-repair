{"candidate": "            results.addError(case, (AssertionError, failure.value, None))\n\n        request.callback = cb_wrapper\n        if request.errback:\n            eb = request.errback\n            request.errback = lambda f: eb(eb_wrapper(f))\n        else:\n            request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        contracts = []\n        for obj", "entropy": 28.77282090963}
{"candidate": "            results.addError(case, failure.value)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n        request.dont_filter = True", "entropy": 14.519816309168}
{"candidate": "            results.addError(case, sys.exc_info())\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        contracts = []\n        for base in method.__bases__:\n            if (issubclass(base, Contract) and\n                        base not in contracts and\n                        base not in method.__bases__):\n                contracts.", "entropy": 33.37279519187101}
{"candidate": "            results.addError(case, failure.value)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        \"\"\" return all contracts on a method \"\"\"\n        contracts = []\n        for attr in dir(method):\n            if attr.startswith('crawl_'):\n                method = getattr(method, attr)\n                if", "entropy": 33.67236158518}
{"candidate": "            results.addError(case, failure.value)\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        \"\"\" return a list of contracts for the method \"\"\"\n\n        contracts = []\n        for parent_class in inspect.getmro(method.im_class):\n            if parent_class is object:\n                break\n            contracts.extend(", "entropy": 37.18035258636102}
{"candidate": "            tb = failure.getTraceback()\n            results.addError(case, (failure.type, failure.value, tb))\n\n        request.callback, request.errback = cb_wrapper, eb_wrapper\n\n    def extract_contracts(self, method):\n        \"\"\" return an unordered list of contracts for a given method \"\"\"\n        contracts = []\n        for attr in dir(method):\n            contract = get", "entropy": 39.416252932008014}
{"candidate": "            results.addError(case, failure)\n            return failure\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        \"\"\" extract contracts from method \"\"\"\n        contracts = []\n        for cls in (method.im_class,) + method.im_class.mro():\n            contracts.extend(getattr(cls, '%s_", "entropy": 39.71945056702}
{"candidate": "            if failure.check(SkipItem):\n                results.addSkip(case, str(failure.value))\n            else:\n                results.addError(case, failure.exc_info())\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n        request.meta['callback_result'] = ''\n        request.meta['errback_result'] = ''\n\n    def extract_contracts(self,", "entropy": 41.16639484204}
{"candidate": "            results.addFailure(case, failure.value)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper", "entropy": 16.31995294541}
{"candidate": "            results.addError(case, failure.value)\n\n        request.callback, request.errback = cb_wrapper, eb_wrapper\n\n    def extract_contracts(self, method):\n        # extract contracts from kwargs\n        contracts = []\n        for kwarg in get_function_args(method)['kwargs']:\n            if isinstance(kwarg, TestContract):\n                contracts.append(kwarg)\n", "entropy": 43.745390656831}
{"candidate": "            results.addError(case, failure.value)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n        return request\n\n    def extract_contracts(self, method):\n        # method = getattr(spider, method_name)\n        attributes = inspect.getmembers(method, lambda m: isinstance(m, Contract))\n        return [attr for name, attr in attributes if name !=", "entropy": 46.19884453624999}
{"candidate": "            results.addError(case, failure.value.exc_info)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n        return request\n\n    @classmethod\n    # noinspection PyUnusedLocal\n    @abstractmethod\n    def extract_contracts(cls, method):\n        pass\n\n\nclass ContractMetaclass(ABCMeta):\n    def __init__(self, name,", "entropy": 47.51505295806999}
{"candidate": "            results.addError(case, failure.type, *failure.value.args)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    @classmethod\n    def extract_contracts(cls, f):\n        return [cls(contract) for contract in reversed(getattr(f, '__contracts__', []))]", "entropy": 41.89900570505002}
{"candidate": "            if isinstance(failure, ConnectionRefusedError):\n                raise\n            results.addError(case, sys.exc_info())\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        \"\"\" return all contracts attached to a method \"\"\"\n        return [contract for contract in self.contracts\n                if self._is_contract(method, contract)]", "entropy": 51.05180718590997}
{"candidate": "            results.addError(case, failure.value)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n    def extract_contracts(self, method):\n        \"\"\" get all contracts from a method \"\"\"\n        return [v for k, v in vars(type(method)).items() if isinstance(v, Contract)]\n\n\nclass Contract(type):\n    \"\"\" Decorator for gathering contracts \"\"\"\n\n", "entropy": 52.88168082931202}
{"candidate": "            results.addError(case, sys.exc_info())\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n        return request\n\n\nclass ContractMeta(type):\n    \"\"\"Metaclass that handles the verification of contracts in a spider class.\"\"\"\n\n    def __new__(mcs, name, bases, attrs):\n        # check for contracts in bases\n        for base in bases:\n            if", "entropy": 59.66005476016603}
{"candidate": "            results.addError(case, failure.value)\n\n        request.callback = cb_wrapper\n        request.errback = eb_wrapper\n\n        return request\n\n\nclass HookTestCase(unittest.TestCase):\n    \"\"\" introduce new methods to the testcase \"\"\"\n\n    def run(self, result=None):\n        if hasattr(self, 'spider'):\n            self.crawler = self.spider.crawler", "entropy": 61.88470337326}
{"candidate": "            results.addError(case, failure.value)\n\n        request._errback = eb_wrapper\n        request.callback = cb_wrapper\n        return request\n\n    def extract_contracts(self, method):\n        \"\"\"\n        A decorator adds a contract to a method. This function extracts all\n        contracts from the given method and returns them in a list.\n        \"\"\"\n        docs = [m.__doc__ for m in method.", "entropy": 66.30865312431001}
{"candidate": "            results.addError(case, failure.exc_info())\n\n        # TODO: add test for this\n        def _filter_output(output):\n            for x in output:\n                if isinstance(x, Request):\n                    yield x\n                elif isinstance(x, (Item, BaseItem)):\n                    yield 'Item dropped by the test'\n                elif isinstance(x, dict) and '__ignore__' in", "entropy": 72.14173521472703}
{"candidate": "            results.addError(case, sys.exc_info())\n            request.meta['failed'] = True\n\n        request._errback = eb_wrapper\n        request.callback = cb_wrapper\n\n\ndef _create_testcase(method, hook_name):\n    \"\"\" Factory method to return a test case with a nice name \"\"\"\n    method_name = hook_name + '_'\n    method_name += method.__name__.", "entropy": 76.28936702768999}
