{"candidate": "                command.append('{0}={1}'.format(prop, value))\n            return [name, '|'.join(command)]\n        return []\n\n    def _boolean_arg(self, name, value):\n        if value:\n            return [name]\n        return []\n\n    def _string_arg(self, name, value):\n        if value:\n            return [name, str(value)]\n        return []\n\n", "entropy": 17.062926187696004}
{"candidate": "                command.append(\"{0}={1}\".format(prop, value))\n            return [name, '|'.join(command)]\n        return []\n\n    def _int_arg(self, name, value):\n        if value:\n            return [name, str(value)]\n        return []\n\n    def _float_arg(self, name, value):\n        if value:\n            return [name, repr(value)]\n       ", "entropy": 18.171066236246002}
{"candidate": "                command += [name, \"{0}={1}\".format(prop, value)]\n        return command\n\n    def _map_arg(self, name, value):\n        command = []\n        if value and isinstance(value, dict):\n            for key, value in value.items():\n                command += [name, \"{0}={1}\".format(key, value)]\n        return command\n\n\nclass SparkRunContext(object):\n", "entropy": 21.372338096371003}
{"candidate": "                command.append(name)\n                command.append('{0}={1}'.format(prop, value))\n        return command\n\n    def _dict_arg_ex(self, name, value):\n        command = []\n        if value and isinstance(value, dict):\n            for prop, value in value.items():\n                command.append(name)\n                command.append('{0}:{1}'.format(prop,", "entropy": 21.625164933524015}
{"candidate": "                command.append(name)\n                command.append('{0}={1}'.format(prop, value))\n        return command\n\n    def _config_arg(self, name, value):\n        if value and isinstance(value, dict):\n            return [name, ','.join(['{0}={1}'.format(key, value[key]) for key in sorted(value)])]\n        return []\n\n    def", "entropy": 21.902431941245997}
{"candidate": "                command.extend([name, '{0}={1}'.format(prop, value)])\n        return command", "entropy": 6.922459046466}
{"candidate": "                if value is False:\n                    command.extend(['--conf', '%s=false' % prop])\n                elif value is True:\n                    command.extend(['--conf', '%s=true' % prop])\n                elif value is None:\n                    continue\n                else:\n                    command.extend(['--conf', '%s=%s' % (prop, value)])\n        return command\n\n", "entropy": 23.84660792495799}
{"candidate": "                command.append(name)\n                command.append('{0}={1}'.format(prop, value))\n        return command\n\n    def _copy_arg(self, name, value):\n        if value:\n            return [name, value]\n        return []\n\n    def _copy_file_arg(self, name, value):\n        if value:\n            return [name, self._upload_file(value)]\n        return", "entropy": 27.765254213255997}
{"candidate": "                command.append(name)\n                command.append(prop + '=' + value)\n        return command\n\n    def _flag_arg(self, name, value):\n        if value:\n            return [name]\n        return []\n\n    def get_spark_command(self):\n        return self._spark_command\n\n    def get_spark_home(self):\n        return self._spark_home\n\n    def get", "entropy": 29.885189834965995}
{"candidate": "                command.append('{0}={1}'.format(prop, value))\n        if command:\n            return [name, '|'.join(command)]\n        return []\n\n    def get_proxy_user(self):\n        return self.proxy_user\n\n    def get_environment(self):\n        env = os.environ.copy()\n        env.update(self.env_vars)\n        if self.proxy_", "entropy": 32.86642818485599}
{"candidate": "                command.append('--conf')\n                command.append('%s=%s' % (prop, value))\n        return command\n\n    def _add_standard_args(self, command, args):\n        command.append('--name')\n        command.append(args.name)\n        command.append('--master')\n        command.append(args.master)\n        command.append('--deploy-mode')\n        command", "entropy": 33.21503359456601}
{"candidate": "                if value and isinstance(value, six.string_types):\n                    command.append('--conf')\n                    command.append('{0}={1}'.format(prop, value))\n        return command\n\n    def _app_name_arg(self, name, value):\n        if value:\n            return [name, value]\n        return []\n\n    def _command_args(self, config):\n        return self._text_", "entropy": 39.23750562508901}
{"candidate": "                command.extend([name, '{0}={1}'.format(prop, value)])\n        return command\n\n    def _jar_dependencies_arg(self, jar_args, jar_dependencies):\n        jar_deps = []\n        if jar_dependencies and isinstance(jar_dependencies, (list, tuple)):\n            for jar_dependency in jar_dependencies:\n                if jar_dependency", "entropy": 40.317569186669}
{"candidate": "                if isinstance(value, six.string_types):\n                    command += ['--conf', '{0}={1}'.format(prop, value)]\n                else:\n                    command += ['--conf', '{0}={1}'.format(prop, json.dumps(value))]\n        return command\n\n    def _parse_config(self, conf, conf_name, arg_name, arg_type=str):\n       ", "entropy": 43.19671242963001}
{"candidate": "                command.extend(['--conf', '{0}={1}'.format(prop, value)])\n        return command\n\n    def _dict_mask(self, value):\n        if value and isinstance(value, dict):\n            return dict(map(lambda i: i[0], value.items()))\n\n    @property\n    def jar(self):\n        return self._jar\n\n    @jar.setter\n    def", "entropy": 43.512803501886005}
{"candidate": "                command.extend([name, '%s=%s' % (prop, value)])\n        return command\n\n    def build_arguments(self):\n        args = [\n            self.java_home and os.path.join(self.java_home, 'bin', 'java'),\n            '-jar', self.spark_home and os.path.join(self.spark_home, 'spark-class'),", "entropy": 44.488802521724985}
{"candidate": "                command.append(\"{0} {1} {2}\".format(name, prop, value))\n            return command\n        return []\n\n    def _files_arg(self, name, value, working_dir=None):\n        if value is None:\n            return []\n        files = []\n        if isinstance(value, (list, tuple)):\n            files = list(map(lambda x: os.path.join(working", "entropy": 45.93377017504302}
{"candidate": "                command.append(name)\n                command.append('{0}={1}'.format(prop, value))\n        return command\n\n    def spark_run(self, jar, class_name, main_class=DEFAULT_SPARK_MAIN_CLASS,\n                  args=[], config=[]):\n        command = [self.get_spark_cmd(), 'submit']\n        command.extend(self._list_arg('", "entropy": 53.57994667511198}
{"candidate": "                command.extend([name, '{0}={1}'.format(prop, value)])\n        return command\n\n    def _build_command(self):\n        import click\n\n        command = [self.spark_submit, self.application]\n\n        # Add master.\n        if self.master:\n            command.extend(['--master', self.master])\n\n        # Add spark-submit options.\n        command.ext", "entropy": 56.42497235978599}
{"candidate": "                if value is not None:\n                    command.extend([name, '%s=%s' % (prop, value)])\n        return command\n\n    def _spark_submit(self, command, **kwargs):\n        config = self._app_config(**kwargs)\n\n        spark_submit = self.spark_config.spark_submit\n        if spark_submit is None or spark_submit == 'default':\n", "entropy": 61.836428780033046}
