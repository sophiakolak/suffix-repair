{"prefix": "\ndef month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    ENGLISH_NAMES = [\n        u'January', u'February', u'March', u'April', u'May', u'June',\n        u'July', u'August', u'September', u'October', u'November', u'December']\n    try:\n        return ENGLISH_NAMES.index(name) + 1\n    except ValueError:\n        return None\n\n\ndef fix_xml_all_ampersand(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return xml_str.replace(u'&', u'&amp;')\n\n\ndef setproctitle(title):\n    assert isinstance(title, type(u''))\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title = title\n    buf = ctypes.create_string_buffer(len(title) + 1)\n    buf.value = title.encode('utf-8')\n    try:\n        libc.prctl(15, ctypes.byref(buf), 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this\n\n\ndef remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s\n\n\ndef url_basename(url):\n", "suffix": "    if not m:\n        return u''\n    return m.group(1)\n", "long_prefix": ["    url, _, sdata = smug_url.rpartition(u'#')\n    jsond = compat_parse_qs(sdata)[u'__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data\n\n\ndef format_bytes(bytes):\n    if bytes is None:\n        return u'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = [u'B', u'KiB', u'MiB', u'GiB', u'TiB', u'PiB', u'EiB', u'ZiB', u'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return u'%.2f%s' % (converted, suffix)\n\n\ndef str_to_int(int_str):\n    int_str = re.sub(r'[,\\.]', u'', int_str)\n    return int(int_str)\n\n\ndef get_term_width():\n    columns = os.environ.get('COLUMNS', None)\n    if columns:\n        return int(columns)\n\n    try:\n        sp = subprocess.Popen(\n            ['stty', 'size'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = sp.communicate()\n        return int(out.split()[1])\n    except:\n        pass\n    return None\n\n\ndef month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    ENGLISH_NAMES = [\n        u'January', u'February', u'March', u'April', u'May', u'June',\n        u'July', u'August', u'September', u'October', u'November', u'December']\n    try:\n        return ENGLISH_NAMES.index(name) + 1\n    except ValueError:\n        return None\n\n\ndef fix_xml_all_ampersand(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return xml_str.replace(u'&', u'&amp;')\n\n\ndef setproctitle(title):\n    assert isinstance(title, type(u''))\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title = title\n    buf = ctypes.create_string_buffer(len(title) + 1)\n    buf.value = title.encode('utf-8')\n    try:\n        libc.prctl(15, ctypes.byref(buf), 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this\n\n\ndef remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s\n\n\ndef url_basename(url):\n", "    if not m:\n        return u''\n    return m.group(1)\n"]}