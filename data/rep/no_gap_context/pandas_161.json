{"prefix": "            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled.\n\n        Returns\n        -------\n        filled : Categorical with NA/NaN filled\n        \"\"\"\n        value, method = validate_fillna_kwargs(\n            value, method, validate_scalar_dict_value=False\n        )\n\n        if value is None:\n            value = np.nan\n        if limit is not None:\n            raise NotImplementedError(\n                \"specifying a limit for fillna has not been implemented yet\"\n            )\n\n        codes = self._codes\n\n        # pad / bfill\n        if method is not None:\n\n            values = self.to_dense().reshape(-1, len(self))\n            values = interpolate_2d(values, method, 0, None, value).astype(\n                self.categories.dtype\n            )[0]\n            codes = _get_codes_for_values(values, self.categories)\n\n        else:\n\n            # If value is a dict or a Series (a dict value has already\n            # been converted to a Series)\n            if isinstance(value, ABCSeries):\n                if not value[~value.isin(self.categories)].isna().all():\n                    raise ValueError(\"fill value must be in categories\")\n\n                values_codes = _get_codes_for_values(value, self.categories)\n", "suffix": "\n            # If value is not a dict or Series it should be a scalar\n            elif is_hashable(value):\n                if not isna(value) and value not in self.categories:\n                    raise ValueError(\"fill value must be in categories\")\n\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    if isna(value):\n                        codes[mask] = -1\n                    else:\n                        codes[mask] = self.categories.get_loc(value)\n\n            else:\n                raise TypeError(\n                    '\"value\" parameter must be a scalar, dict '\n                    \"or Series, but you passed a \"\n                    '\"{0}\"'.format(type(value).__name__)\n                )\n\n        return self._constructor(codes, dtype=self.dtype, fastpath=True)\n\n    def take_nd(self, indexer, allow_fill=None, fill_value=None):\n        \"\"\"\n        Take elements from the Categorical.\n\n        Parameters\n        ----------\n        indexer : sequence of int\n            The indices in `self` to take. The meaning of negative values in\n            `indexer` depends on the value of `allow_fill`.\n        allow_fill : bool, default None\n            How to handle negative values in `indexer`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right. This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate missing values\n", "long_prefix": ["        return np.array(self)\n\n    def view(self, dtype=None):\n        if dtype is not None:\n            raise NotImplementedError(dtype)\n        return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)\n\n    def to_dense(self):\n        \"\"\"\n        Return my 'dense' representation\n\n        For internal compatibility with numpy arrays.\n\n        Returns\n        -------\n        dense : array\n        \"\"\"\n        return np.asarray(self)\n\n    @deprecate_kwarg(old_arg_name=\"fill_value\", new_arg_name=\"value\")\n    def fillna(self, value=None, method=None, limit=None):\n        \"\"\"\n        Fill NA/NaN values using the specified method.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series\n            If a scalar value is passed it is used to fill all missing values.\n            Alternatively, a Series or dict can be used to fill in different\n            values for each index. The value should not be a list. The\n            value(s) passed should either be in the categories or should be\n            NaN.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use NEXT valid observation to fill gap\n        limit : int, default None\n            (Not implemented yet for Categorical!)\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled.\n\n        Returns\n        -------\n        filled : Categorical with NA/NaN filled\n        \"\"\"\n        value, method = validate_fillna_kwargs(\n            value, method, validate_scalar_dict_value=False\n        )\n\n        if value is None:\n            value = np.nan\n        if limit is not None:\n            raise NotImplementedError(\n                \"specifying a limit for fillna has not been implemented yet\"\n            )\n\n        codes = self._codes\n\n        # pad / bfill\n        if method is not None:\n\n            values = self.to_dense().reshape(-1, len(self))\n            values = interpolate_2d(values, method, 0, None, value).astype(\n                self.categories.dtype\n            )[0]\n            codes = _get_codes_for_values(values, self.categories)\n\n        else:\n\n            # If value is a dict or a Series (a dict value has already\n            # been converted to a Series)\n            if isinstance(value, ABCSeries):\n                if not value[~value.isin(self.categories)].isna().all():\n                    raise ValueError(\"fill value must be in categories\")\n\n                values_codes = _get_codes_for_values(value, self.categories)\n", "\n            # If value is not a dict or Series it should be a scalar\n            elif is_hashable(value):\n                if not isna(value) and value not in self.categories:\n                    raise ValueError(\"fill value must be in categories\")\n\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    if isna(value):\n                        codes[mask] = -1\n                    else:\n                        codes[mask] = self.categories.get_loc(value)\n\n            else:\n                raise TypeError(\n                    '\"value\" parameter must be a scalar, dict '\n                    \"or Series, but you passed a \"\n                    '\"{0}\"'.format(type(value).__name__)\n                )\n\n        return self._constructor(codes, dtype=self.dtype, fastpath=True)\n\n    def take_nd(self, indexer, allow_fill=None, fill_value=None):\n        \"\"\"\n        Take elements from the Categorical.\n\n        Parameters\n        ----------\n        indexer : sequence of int\n            The indices in `self` to take. The meaning of negative values in\n            `indexer` depends on the value of `allow_fill`.\n        allow_fill : bool, default None\n            How to handle negative values in `indexer`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right. This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate missing values\n"]}