{"prefix": "\"\"\"\nThin wrappers around common functions.\n\nSubpackages contain potentially unstable extensions.\n\"\"\"\nfrom tqdm import tqdm\nfrom tqdm.auto import tqdm as tqdm_auto\nfrom tqdm.utils import ObjectWrapper\nfrom copy import deepcopy\nimport functools\nimport sys\n__author__ = {\"github.com/\": [\"casperdcl\"]}\n__all__ = ['tenumerate', 'tzip', 'tmap']\n\n\nclass DummyTqdmFile(ObjectWrapper):\n    \"\"\"Dummy file-like that will write to tqdm\"\"\"\n    def write(self, x, nolock=False):\n        # Avoid print() second call (useless \\n)\n        if len(x.rstrip()) > 0:\n            tqdm.write(x, file=self._wrapped, nolock=nolock)\n\n\ndef tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n               **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable),\n                              total=total or len(iterable), **tqdm_kwargs)\n", "suffix": "\n\ndef _tzip(iter1, *iter2plus, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `zip`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = deepcopy(tqdm_kwargs)\n    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)\n    for i in zip(tqdm_class(iter1, **tqdm_kwargs), *iter2plus):\n        yield i\n\n\ndef _tmap(function, *sequences, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `map`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    for i in _tzip(*sequences, **tqdm_kwargs):\n        yield function(*i)\n\n\nif sys.version_info[:1] < (3,):\n    @functools.wraps(_tzip)\n    def tzip(*args, **kwargs):\n        return list(_tzip(*args, **kwargs))\n\n    @functools.wraps(_tmap)\n    def tmap(*args, **kwargs):\n        return list(_tmap(*args, **kwargs))\nelse:\n    tzip = _tzip\n    tmap = _tmap\n", "long_prefix": ["\"\"\"\nThin wrappers around common functions.\n\nSubpackages contain potentially unstable extensions.\n\"\"\"\nfrom tqdm import tqdm\nfrom tqdm.auto import tqdm as tqdm_auto\nfrom tqdm.utils import ObjectWrapper\nfrom copy import deepcopy\nimport functools\nimport sys\n__author__ = {\"github.com/\": [\"casperdcl\"]}\n__all__ = ['tenumerate', 'tzip', 'tmap']\n\n\nclass DummyTqdmFile(ObjectWrapper):\n    \"\"\"Dummy file-like that will write to tqdm\"\"\"\n    def write(self, x, nolock=False):\n        # Avoid print() second call (useless \\n)\n        if len(x.rstrip()) > 0:\n            tqdm.write(x, file=self._wrapped, nolock=nolock)\n\n\ndef tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n               **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable),\n                              total=total or len(iterable), **tqdm_kwargs)\n", "\n\ndef _tzip(iter1, *iter2plus, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `zip`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = deepcopy(tqdm_kwargs)\n    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)\n    for i in zip(tqdm_class(iter1, **tqdm_kwargs), *iter2plus):\n        yield i\n\n\ndef _tmap(function, *sequences, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `map`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    for i in _tzip(*sequences, **tqdm_kwargs):\n        yield function(*i)\n\n\nif sys.version_info[:1] < (3,):\n    @functools.wraps(_tzip)\n    def tzip(*args, **kwargs):\n        return list(_tzip(*args, **kwargs))\n\n    @functools.wraps(_tmap)\n    def tmap(*args, **kwargs):\n        return list(_tmap(*args, **kwargs))\nelse:\n    tzip = _tzip\n    tmap = _tmap\n"]}