{"prefix": "    type=str,\n    default=DEFAULT_EXCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"excluded on recursive searches.  An empty value means no paths are excluded. \"\n        \"Use forward slashes for directories on all platforms (Windows, too).  \"\n        \"Exclusions are calculated first, inclusions later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"-q\",\n    \"--quiet\",\n    is_flag=True,\n    help=(\n        \"Don't emit non-error messages to stderr. Errors are still emitted; \"\n        \"silence those with 2>/dev/null.\"\n    ),\n)\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    is_flag=True,\n    help=(\n        \"Also emit messages to stderr about files that were not changed or were \"\n        \"ignored due to --exclude=.\"\n    ),\n)\n@click.version_option(version=__version__)\n@click.argument(\n    \"src\",\n    nargs=-1,\n    type=click.Path(\n        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    is_eager=True,\n)\n@click.option(\n    \"--config\",\n    type=click.Path(\n", "suffix": "    ),\n    is_eager=True,\n    callback=read_pyproject_toml,\n    help=\"Read configuration from PATH.\",\n)\n@click.pass_context\ndef main(\n    ctx: click.Context,\n    code: Optional[str],\n    line_length: int,\n    target_version: List[TargetVersion],\n    check: bool,\n    diff: bool,\n    fast: bool,\n    pyi: bool,\n    py36: bool,\n    skip_string_normalization: bool,\n    quiet: bool,\n    verbose: bool,\n    include: str,\n    exclude: str,\n    src: Tuple[str, ...],\n    config: Optional[str],\n) -> None:\n    \"\"\"The uncompromising code formatter.\"\"\"\n    write_back = WriteBack.from_configuration(check=check, diff=diff)\n    if target_version:\n        if py36:\n            err(\"Cannot use both --target-version and --py36\")\n            ctx.exit(2)\n        else:\n            versions = set(target_version)\n    elif py36:\n        err(\n            \"--py36 is deprecated and will be removed in a future version. \"\n            \"Use --target-version py36 instead.\"\n        )\n        versions = PY36_VERSIONS\n    else:\n        # We'll autodetect later.\n", "long_prefix": ["@click.option(\n    \"-S\",\n    \"--skip-string-normalization\",\n    is_flag=True,\n    help=\"Don't normalize string quotes or prefixes.\",\n)\n@click.option(\n    \"--check\",\n    is_flag=True,\n    help=(\n        \"Don't write the files back, just return the status.  Return code 0 \"\n        \"means nothing would change.  Return code 1 means some files would be \"\n        \"reformatted.  Return code 123 means there was an internal error.\"\n    ),\n)\n@click.option(\n    \"--diff\",\n    is_flag=True,\n    help=\"Don't write the files back, just output a diff for each file on stdout.\",\n)\n@click.option(\n    \"--fast/--safe\",\n    is_flag=True,\n    help=\"If --fast given, skip temporary sanity checks. [default: --safe]\",\n)\n@click.option(\n    \"--include\",\n    type=str,\n    default=DEFAULT_INCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"included on recursive searches.  An empty value means all files are \"\n        \"included regardless of the name.  Use forward slashes for directories on \"\n        \"all platforms (Windows, too).  Exclusions are calculated first, inclusions \"\n        \"later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"--exclude\",\n    type=str,\n    default=DEFAULT_EXCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"excluded on recursive searches.  An empty value means no paths are excluded. \"\n        \"Use forward slashes for directories on all platforms (Windows, too).  \"\n        \"Exclusions are calculated first, inclusions later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"-q\",\n    \"--quiet\",\n    is_flag=True,\n    help=(\n        \"Don't emit non-error messages to stderr. Errors are still emitted; \"\n        \"silence those with 2>/dev/null.\"\n    ),\n)\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    is_flag=True,\n    help=(\n        \"Also emit messages to stderr about files that were not changed or were \"\n        \"ignored due to --exclude=.\"\n    ),\n)\n@click.version_option(version=__version__)\n@click.argument(\n    \"src\",\n    nargs=-1,\n    type=click.Path(\n        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    is_eager=True,\n)\n@click.option(\n    \"--config\",\n    type=click.Path(\n", "    ),\n    is_eager=True,\n    callback=read_pyproject_toml,\n    help=\"Read configuration from PATH.\",\n)\n@click.pass_context\ndef main(\n    ctx: click.Context,\n    code: Optional[str],\n    line_length: int,\n    target_version: List[TargetVersion],\n    check: bool,\n    diff: bool,\n    fast: bool,\n    pyi: bool,\n    py36: bool,\n    skip_string_normalization: bool,\n    quiet: bool,\n    verbose: bool,\n    include: str,\n    exclude: str,\n    src: Tuple[str, ...],\n    config: Optional[str],\n) -> None:\n    \"\"\"The uncompromising code formatter.\"\"\"\n    write_back = WriteBack.from_configuration(check=check, diff=diff)\n    if target_version:\n        if py36:\n            err(\"Cannot use both --target-version and --py36\")\n            ctx.exit(2)\n        else:\n            versions = set(target_version)\n    elif py36:\n        err(\n            \"--py36 is deprecated and will be removed in a future version. \"\n            \"Use --target-version py36 instead.\"\n        )\n        versions = PY36_VERSIONS\n    else:\n        # We'll autodetect later.\n"]}