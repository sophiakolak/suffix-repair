{"prefix": "            upcast_cls = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            upcast_cls = \"timedelta\"\n        elif is_sparse(dtype):\n            upcast_cls = dtype.subtype.name\n        elif is_extension_array_dtype(dtype):\n            upcast_cls = \"object\"\n        elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n            upcast_cls = dtype.name\n        else:\n            upcast_cls = \"float\"\n\n        # Null blocks should not influence upcast class selection, unless there\n        # are only null blocks, when same upcasting rules must be applied to\n        # null upcast classes.\n        if unit.is_na:\n            null_upcast_classes[upcast_cls].append(dtype)\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    # TODO: de-duplicate with maybe_promote?\n    # create the result\n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetimetz\" in upcast_classes:\n        # GH-25014. We use NaT instead of iNaT, since this eventually\n        # ends up in DatetimeArray.take, which does not allow iNaT.\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], tslibs.NaT\n    elif \"datetime\" in upcast_classes:\n", "suffix": "    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    else:  # pragma\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray\n            return np.dtype(np.object_), np.nan\n        else:\n            if is_float_dtype(g):\n                return g, g.type(np.nan)\n            elif is_numeric_dtype(g):\n                if has_none_blocks:\n                    return np.float64, np.nan\n                else:\n                    return g, None\n\n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)\n\n\ndef is_uniform_join_units(join_units):\n    \"\"\"\n    Check if the join units consist of blocks of uniform type that can\n    be concatenated using Block.concat_same_type instead of the generic\n    concatenate_join_units (which uses `concat_compat`).\n\n    \"\"\"\n    return (\n        # all blocks need to have the same type\n        all(type(ju.block) is type(join_units[0].block) for ju in join_units)\n        and  # noqa\n        # no blocks that would get missing values (can lead to type upcasts)\n        # unless we're an extension dtype.\n        all(not ju.is_na or ju.block.is_extension for ju in join_units)\n        and\n        # no blocks with indexers (as then the dimensions do not fit)\n        all(not ju.indexers for ju in join_units)\n        and\n        # only use this path when there is something to concatenate\n", "long_prefix": ["\n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n\n    if _is_uniform_reindex(join_units):\n        # FIXME: integrate property\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n\n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n\n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n\n        if is_categorical_dtype(dtype):\n            upcast_cls = \"category\"\n        elif is_datetime64tz_dtype(dtype):\n            upcast_cls = \"datetimetz\"\n        elif issubclass(dtype.type, np.bool_):\n            upcast_cls = \"bool\"\n        elif issubclass(dtype.type, np.object_):\n            upcast_cls = \"object\"\n        elif is_datetime64_dtype(dtype):\n            upcast_cls = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            upcast_cls = \"timedelta\"\n        elif is_sparse(dtype):\n            upcast_cls = dtype.subtype.name\n        elif is_extension_array_dtype(dtype):\n            upcast_cls = \"object\"\n        elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n            upcast_cls = dtype.name\n        else:\n            upcast_cls = \"float\"\n\n        # Null blocks should not influence upcast class selection, unless there\n        # are only null blocks, when same upcasting rules must be applied to\n        # null upcast classes.\n        if unit.is_na:\n            null_upcast_classes[upcast_cls].append(dtype)\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    # TODO: de-duplicate with maybe_promote?\n    # create the result\n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetimetz\" in upcast_classes:\n        # GH-25014. We use NaT instead of iNaT, since this eventually\n        # ends up in DatetimeArray.take, which does not allow iNaT.\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], tslibs.NaT\n    elif \"datetime\" in upcast_classes:\n", "    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    else:  # pragma\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray\n            return np.dtype(np.object_), np.nan\n        else:\n            if is_float_dtype(g):\n                return g, g.type(np.nan)\n            elif is_numeric_dtype(g):\n                if has_none_blocks:\n                    return np.float64, np.nan\n                else:\n                    return g, None\n\n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)\n\n\ndef is_uniform_join_units(join_units):\n    \"\"\"\n    Check if the join units consist of blocks of uniform type that can\n    be concatenated using Block.concat_same_type instead of the generic\n    concatenate_join_units (which uses `concat_compat`).\n\n    \"\"\"\n    return (\n        # all blocks need to have the same type\n        all(type(ju.block) is type(join_units[0].block) for ju in join_units)\n        and  # noqa\n        # no blocks that would get missing values (can lead to type upcasts)\n        # unless we're an extension dtype.\n        all(not ju.is_na or ju.block.is_extension for ju in join_units)\n        and\n        # no blocks with indexers (as then the dimensions do not fit)\n        all(not ju.indexers for ju in join_units)\n        and\n        # only use this path when there is something to concatenate\n"]}