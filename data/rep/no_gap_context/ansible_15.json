{"prefix": "        if 'management api http-commands' not in commands:\n            commands.insert(0, 'management api http-commands')\n        commands.append(cmd)\n\n    if any((needs_update('http'), needs_update('http_port'))):\n        if want['http'] is False:\n            add('no protocol http')\n        else:\n            if have['http'] is False and want['http'] in (False, None):\n                warnings.append('protocol http is not enabled, not configuring http port value')\n            else:\n                port = want['http_port'] or 80\n                add('protocol http port %s' % port)\n\n    if any((needs_update('https'), needs_update('https_port'))):\n        if want['https'] is False:\n            add('no protocol https')\n        else:\n            if have['https'] is False and want['https'] in (False, None):\n                warnings.append('protocol https is not enabled, not configuring https port value')\n            else:\n                port = want['https_port'] or 443\n                add('protocol https port %s' % port)\n\n    if any((needs_update('local_http'), needs_update('local_http_port'))):\n        if want['local_http'] is False:\n            add('no protocol http localhost')\n        else:\n            if have['local_http'] is False and want['local_http'] in (False, None):\n                warnings.append('protocol local_http is not enabled, not configuring local_http port value')\n            else:\n                port = want['local_http_port'] or 8080\n                add('protocol http localhost port %s' % port)\n\n    if any((needs_update('socket'), needs_update('socket'))):\n        if want['socket'] is False:\n            add('no protocol unix-socket')\n        else:\n            add('protocol unix-socket')\n\n", "suffix": "        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n\n    if needs_update('vrf'):\n        add('vrf %s' % want['vrf'])\n        # switching operational vrfs here\n        # need to add the desired state as well\n        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n\n    return commands\n\n\ndef parse_state(data):\n    if data[0]['enabled']:\n        return 'started'\n    else:\n        return 'stopped'\n\n\ndef map_config_to_obj(module):\n    out = run_commands(module, ['show management api http-commands | json'])\n    return {\n        'http': out[0]['httpServer']['configured'],\n        'http_port': out[0]['httpServer']['port'],\n        'https': out[0]['httpsServer']['configured'],\n        'https_port': out[0]['httpsServer']['port'],\n        'local_http': out[0]['localHttpServer']['configured'],\n        'local_http_port': out[0]['localHttpServer']['port'],\n        'socket': out[0]['unixSocketServer']['configured'],\n        'vrf': out[0]['vrf'] or \"default\",\n        'state': parse_state(out)\n    }\n\n\ndef map_params_to_obj(module):\n", "long_prefix": ["\ndef validate_http_port(value, module):\n    if not 1 <= value <= 65535:\n        module.fail_json(msg='http_port must be between 1 and 65535')\n\n\ndef validate_https_port(value, module):\n    if not 1 <= value <= 65535:\n        module.fail_json(msg='http_port must be between 1 and 65535')\n\n\ndef validate_local_http_port(value, module):\n    if not 1 <= value <= 65535:\n        module.fail_json(msg='http_port must be between 1 and 65535')\n\n\ndef validate_vrf(value, module):\n    out = run_commands(module, ['show vrf'])\n    configured_vrfs = []\n    lines = out[0].strip().splitlines()[3:]\n    for l in lines:\n        if not l:\n            continue\n        splitted_line = re.split(r'\\s{2,}', l.strip())\n        if len(splitted_line) > 2:\n            configured_vrfs.append(splitted_line[0])\n\n    configured_vrfs.append('default')\n    if value not in configured_vrfs:\n        module.fail_json(msg='vrf `%s` is not configured on the system' % value)\n\n\ndef map_obj_to_commands(updates, module, warnings):\n    commands = list()\n    want, have = updates\n\n    def needs_update(x):\n        return want.get(x) is not None and (want.get(x) != have.get(x))\n\n    def add(cmd):\n        if 'management api http-commands' not in commands:\n            commands.insert(0, 'management api http-commands')\n        commands.append(cmd)\n\n    if any((needs_update('http'), needs_update('http_port'))):\n        if want['http'] is False:\n            add('no protocol http')\n        else:\n            if have['http'] is False and want['http'] in (False, None):\n                warnings.append('protocol http is not enabled, not configuring http port value')\n            else:\n                port = want['http_port'] or 80\n                add('protocol http port %s' % port)\n\n    if any((needs_update('https'), needs_update('https_port'))):\n        if want['https'] is False:\n            add('no protocol https')\n        else:\n            if have['https'] is False and want['https'] in (False, None):\n                warnings.append('protocol https is not enabled, not configuring https port value')\n            else:\n                port = want['https_port'] or 443\n                add('protocol https port %s' % port)\n\n    if any((needs_update('local_http'), needs_update('local_http_port'))):\n        if want['local_http'] is False:\n            add('no protocol http localhost')\n        else:\n            if have['local_http'] is False and want['local_http'] in (False, None):\n                warnings.append('protocol local_http is not enabled, not configuring local_http port value')\n            else:\n                port = want['local_http_port'] or 8080\n                add('protocol http localhost port %s' % port)\n\n    if any((needs_update('socket'), needs_update('socket'))):\n        if want['socket'] is False:\n            add('no protocol unix-socket')\n        else:\n            add('protocol unix-socket')\n\n", "        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n\n    if needs_update('vrf'):\n        add('vrf %s' % want['vrf'])\n        # switching operational vrfs here\n        # need to add the desired state as well\n        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n\n    return commands\n\n\ndef parse_state(data):\n    if data[0]['enabled']:\n        return 'started'\n    else:\n        return 'stopped'\n\n\ndef map_config_to_obj(module):\n    out = run_commands(module, ['show management api http-commands | json'])\n    return {\n        'http': out[0]['httpServer']['configured'],\n        'http_port': out[0]['httpServer']['port'],\n        'https': out[0]['httpsServer']['configured'],\n        'https_port': out[0]['httpsServer']['port'],\n        'local_http': out[0]['localHttpServer']['configured'],\n        'local_http_port': out[0]['localHttpServer']['port'],\n        'socket': out[0]['unixSocketServer']['configured'],\n        'vrf': out[0]['vrf'] or \"default\",\n        'state': parse_state(out)\n    }\n\n\ndef map_params_to_obj(module):\n"]}