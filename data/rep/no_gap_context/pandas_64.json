{"prefix": "        This is only called for body cells.\n    \"\"\"\n\n    max_rows = 2 ** 20\n    max_cols = 2 ** 14\n\n    def __init__(\n        self,\n        df,\n        na_rep: str = \"\",\n        float_format: Optional[str] = None,\n        cols: Optional[Sequence[Label]] = None,\n        header: Union[Sequence[Label], bool] = True,\n        index: bool = True,\n        index_label: Optional[Union[Label, Sequence[Label]]] = None,\n        merge_cells: bool = False,\n        inf_rep: str = \"inf\",\n        style_converter: Optional[Callable] = None,\n    ):\n        self.rowcounter = 0\n        self.na_rep = na_rep\n        if hasattr(df, \"render\"):\n            self.styler = df\n            df = df.data\n            if style_converter is None:\n                style_converter = CSSToExcelConverter()\n            self.style_converter = style_converter\n        else:\n            self.styler = None\n        self.df = df\n        if cols is not None:\n\n            # all missing, raise\n            if not len(Index(cols) & df.columns):\n                raise KeyError(\"passes columns are not ALL present dataframe\")\n\n            if len(Index(cols) & df.columns) != len(cols):\n                # Deprecated in GH#17295, enforced in 1.0.0\n                raise KeyError(\"Not all names specified in 'columns' are found\")\n\n", "suffix": "\n        self.columns = self.df.columns\n        self.float_format = float_format\n        self.index = index\n        self.index_label = index_label\n        self.header = header\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n    @property\n    def header_style(self):\n        return {\n            \"font\": {\"bold\": True},\n            \"borders\": {\n                \"top\": \"thin\",\n                \"right\": \"thin\",\n                \"bottom\": \"thin\",\n                \"left\": \"thin\",\n            },\n            \"alignment\": {\"horizontal\": \"center\", \"vertical\": \"top\"},\n        }\n\n    def _format_value(self, val):\n        if is_scalar(val) and missing.isna(val):\n            val = self.na_rep\n        elif is_float(val):\n            if missing.isposinf_scalar(val):\n                val = self.inf_rep\n            elif missing.isneginf_scalar(val):\n                val = f\"-{self.inf_rep}\"\n            elif self.float_format is not None:\n                val = float(self.float_format % val)\n        if getattr(val, \"tzinfo\", None) is not None:\n            raise ValueError(\n                \"Excel does not support datetimes with \"\n                \"timezones. Please ensure that datetimes \"\n                \"are timezone unaware before writing to Excel.\"\n            )\n        return val\n\n", "long_prefix": ["            return (val[1] * 2 + val[2] * 2 + val[3] * 2).upper()\n        try:\n            return self.NAMED_COLORS[val]\n        except KeyError:\n            warnings.warn(f\"Unhandled color format: {repr(val)}\", CSSWarning)\n\n    def build_number_format(self, props: Dict) -> Dict[str, Optional[str]]:\n        return {\"format_code\": props.get(\"number-format\")}\n\n\nclass ExcelFormatter:\n    \"\"\"\n    Class for formatting a DataFrame to a list of ExcelCells,\n\n    Parameters\n    ----------\n    df : DataFrame or Styler\n    na_rep: na representation\n    float_format : string, default None\n            Format string for floating point numbers\n    cols : sequence, optional\n        Columns to write\n    header : boolean or list of string, default True\n        Write out column names. If a list of string is given it is\n        assumed to be aliases for the column names\n    index : boolean, default True\n        output row names (index)\n    index_label : string or sequence, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.\n    merge_cells : boolean, default False\n            Format MultiIndex and Hierarchical Rows as merged cells.\n    inf_rep : string, default `'inf'`\n        representation for np.inf values (which aren't representable in Excel)\n        A `'-'` sign will be added in front of -inf.\n    style_converter : callable, optional\n        This translates Styler styles (CSS) into ExcelWriter styles.\n        Defaults to ``CSSToExcelConverter()``.\n        It should have signature css_declarations string -> excel style.\n        This is only called for body cells.\n    \"\"\"\n\n    max_rows = 2 ** 20\n    max_cols = 2 ** 14\n\n    def __init__(\n        self,\n        df,\n        na_rep: str = \"\",\n        float_format: Optional[str] = None,\n        cols: Optional[Sequence[Label]] = None,\n        header: Union[Sequence[Label], bool] = True,\n        index: bool = True,\n        index_label: Optional[Union[Label, Sequence[Label]]] = None,\n        merge_cells: bool = False,\n        inf_rep: str = \"inf\",\n        style_converter: Optional[Callable] = None,\n    ):\n        self.rowcounter = 0\n        self.na_rep = na_rep\n        if hasattr(df, \"render\"):\n            self.styler = df\n            df = df.data\n            if style_converter is None:\n                style_converter = CSSToExcelConverter()\n            self.style_converter = style_converter\n        else:\n            self.styler = None\n        self.df = df\n        if cols is not None:\n\n            # all missing, raise\n            if not len(Index(cols) & df.columns):\n                raise KeyError(\"passes columns are not ALL present dataframe\")\n\n            if len(Index(cols) & df.columns) != len(cols):\n                # Deprecated in GH#17295, enforced in 1.0.0\n                raise KeyError(\"Not all names specified in 'columns' are found\")\n\n", "\n        self.columns = self.df.columns\n        self.float_format = float_format\n        self.index = index\n        self.index_label = index_label\n        self.header = header\n        self.merge_cells = merge_cells\n        self.inf_rep = inf_rep\n\n    @property\n    def header_style(self):\n        return {\n            \"font\": {\"bold\": True},\n            \"borders\": {\n                \"top\": \"thin\",\n                \"right\": \"thin\",\n                \"bottom\": \"thin\",\n                \"left\": \"thin\",\n            },\n            \"alignment\": {\"horizontal\": \"center\", \"vertical\": \"top\"},\n        }\n\n    def _format_value(self, val):\n        if is_scalar(val) and missing.isna(val):\n            val = self.na_rep\n        elif is_float(val):\n            if missing.isposinf_scalar(val):\n                val = self.inf_rep\n            elif missing.isneginf_scalar(val):\n                val = f\"-{self.inf_rep}\"\n            elif self.float_format is not None:\n                val = float(self.float_format % val)\n        if getattr(val, \"tzinfo\", None) is not None:\n            raise ValueError(\n                \"Excel does not support datetimes with \"\n                \"timezones. Please ensure that datetimes \"\n                \"are timezone unaware before writing to Excel.\"\n            )\n        return val\n\n"]}