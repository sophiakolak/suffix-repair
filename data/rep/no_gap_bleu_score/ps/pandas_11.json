{"rank": 1, "bleu_score": 0.179633008915526, "candidate": "                i = level.get_indexer(key)\n                if (i == -1).any():\n                    # This key was missing, so just extend by all level values\n                    # (this will be the nan code)\n"}
{"rank": 2, "bleu_score": 0.08359849184263615, "candidate": "                i = level.get_loc(key)\n                if is_integer(i):\n                    i = [i]\n"}
{"rank": 3, "bleu_score": 0.3307688525642015, "candidate": "                i = level.get_indexer(key)\n                if (i == -1).any():\n                    raise KeyError(\n                        f\"Key length ({len(level)}) differs from index depth ({len(key)})\"\n"}
{"rank": 4, "bleu_score": 0.05674797011616284, "candidate": "                try:\n                    codes = level.get_indexer(key)\n                except Exception:\n                    raise ValueError(\n"}
{"rank": 5, "bleu_score": 0.001431108236452693, "candidate": "                i = level.get_indexer(key)\n"}
{"rank": 6, "bleu_score": 0.21613618316368063, "candidate": "                # we must be an index here\n                i = level.get_indexer([key])\n                if (i == -1).any():\n                    raise ValueError(\n"}
{"rank": 7, "bleu_score": 0.001431108236452693, "candidate": "                i = level.get_indexer(key)\n"}
{"rank": 8, "bleu_score": 0.001431108236452693, "candidate": "                i = level.get_indexer(key)\n"}
{"rank": 9, "bleu_score": 0.23552894511327024, "candidate": "                if key not in level:\n                    # have a new category\n                    level = level.insert(len(level), key)\n                i = level.get_loc(key)\n"}
{"rank": 10, "bleu_score": 0.001431108236452693, "candidate": "                i = level.get_indexer(key)\n"}
{"rank": 11, "bleu_score": 0.001431108236452693, "candidate": "                i = level.get_indexer(key)\n"}
{"rank": 12, "bleu_score": 0.00808706047844288, "candidate": "                i = np.searchsorted(level, key)\n"}
{"rank": 13, "bleu_score": 0.21217409004530027, "candidate": "                if key not in level:\n                    # TODO: better error message\n                    raise AssertionError(\"Key length mismatch\")\n                i = level.get_loc(key)\n"}
{"rank": 14, "bleu_score": 0.05849909138366237, "candidate": "                codes, categories = factorize_from_iterable(key)\n                to_concat.append(codes)\n            codes_list.append(np.concatenate(to_concat))\n        # these go at the end\n"}
{"rank": 15, "bleu_score": 0.18593782916046384, "candidate": "                # if we have a nan key and non-unique index, then we have a\n                # problem\n                if isna(key) and not index.is_unique:\n                    raise ValueError(\"Key/index pairs must be unique.\")\n"}
{"rank": 16, "bleu_score": 0.10614086454636311, "candidate": "                codes, categories = factorize_from_iterable(key)\n                to_concat.append(codes.take(index.get_indexer(level)))\n            codes_list.append(np.concatenate(to_concat))\n        zipped_codes = list(zip(*codes_list))\n"}
{"rank": 17, "bleu_score": 0.1760346682386096, "candidate": "                i = level.get_indexer(key)\n                if (i == -1).any():\n                    if isinstance(key, tuple):\n                        key = list(key)\n"}
{"rank": 18, "bleu_score": 0.36524719952617296, "candidate": "                i = level.get_indexer(key)\n                if (i == -1).any():\n                    raise ValueError(\n                        f\"Key length ({len(key)}) exceeded Index depth ({index.nlevels})\"\n"}
{"rank": 19, "bleu_score": 0.0635925783432521, "candidate": "                codes = ensure_int64(level.get_indexer(key))\n                to_concat.append(codes)\n            codes_list.append(np.concatenate(to_concat))\n        concat_index = _concat_indexes(indexes)\n"}
{"rank": 20, "bleu_score": 0.14519159360922199, "candidate": "                if not is_list_like(key):\n                    key = [key]\n                try:\n                    codes = com.get_level_codes(level, key)\n"}
