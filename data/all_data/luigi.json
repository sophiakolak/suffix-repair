{"project": "luigi", "bug": 1, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/server.py", "buggy_commit_id": "1164eb6b85b8a70f596dbb99452bec513e72c12e", "fixed_commit_id": "aec5dc2ed8db53fc282a0bd24aabe59031b6d1ba", "lines_deleted": {"281": "        metrics = self._scheduler._state._metrics_collector.generate_latest()\n", "283": "            metrics.configure_http_handler(self)\n"}, "lines_added": {"281": "        metrics_collector = self._scheduler._state._metrics_collector\n", "282": "        metrics = metrics_collector.generate_latest()\n", "284": "            metrics_collector.configure_http_handler(self)\n"}}
{"project": "luigi", "bug": 3, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/parameter.py", "buggy_commit_id": "a0f1db01ddab5b4b2bda3fbe58bad09a6d94a7b4", "fixed_commit_id": "3a0bfbff69addfb3be1107adab3d4914bcae3e4b", "lines_deleted": {"1116": "        except ValueError:\n", "1117": "            return literal_eval(x)  # if this causes an error, let that error be raised.\n"}, "lines_added": {"1116": "        except (ValueError, TypeError):\n", "1117": "            return tuple(literal_eval(x))  # if this causes an error, let that error be raised.\n"}}
{"project": "luigi", "bug": 4, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "ffa51b50103a3adaf3c4d0569fdb037a7ba01e8e", "fixed_commit_id": "8501e5dbb8d3040453a89bb0d3562526086d51e5", "lines_deleted": {"355": "        if len(self.columns) > 0:\n"}, "lines_added": {"355": "        if self.columns and len(self.columns) > 0:\n"}}
{"project": "luigi", "bug": 7, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "dd1f2ce0061e7787166522a3c75339ba4755dd2c", "fixed_commit_id": "daf9ce99a3a7ed4227d1564570c5fce8848357e5", "lines_deleted": {"825": "        if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n", "826": "            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n"}, "lines_added": {"825": "        if not (task.status in (RUNNING, BATCH_RUNNING) and (status not in (DONE, FAILED, RUNNING) or task.worker_running != worker_id)) or new_deps:\n", "826": "            # don't allow re-scheduling of task while it is running, it must either fail or succeed on the worker actually running it\n"}}
{"project": "luigi", "bug": 8, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "61ee32e9968978c32be12a6af0affa3a5750e87e", "fixed_commit_id": "8874b93165953c4f6bbe7b747804654d13290018", "lines_deleted": {"334": "                     \"where table_schema = %s and table_name = %s limit 1\")\n", "338": "                     \"where tablename = %s limit 1\")\n"}, "lines_added": {"334": "                     \"where table_schema = lower(%s) and table_name = lower(%s) limit 1\")\n", "338": "                     \"where tablename = lower(%s) limit 1\")\n"}}
{"project": "luigi", "bug": 10, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "f538d1b3d473d542a19d508e5f7e0809b1dfe5ef", "fixed_commit_id": "3c55acd2cd5cf9c6c760bec5bb3159e0bc48a614", "lines_deleted": {"304": "            return state.get_pending_tasks()\n"}, "lines_added": {"304": "            return six.moves.filter(lambda task: self.id in task.workers, state.get_pending_tasks())\n"}}
{"project": "luigi", "bug": 11, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "bf8b5cba573d5d6cd11f7f10a03b458aeaf955c1", "fixed_commit_id": "70d8734d60e168389f425082b41b1936d63c028e", "lines_deleted": {"896": "                    task.params.get(name) == value for name, value in unbatched_params.items())):\n"}, "lines_added": {"896": "                    task.params.get(name) == value for name, value in unbatched_params.items()) and\n", "897": "                    self._schedulable(task)):\n"}}
{"project": "luigi", "bug": 12, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hdfs/clients.py", "buggy_commit_id": "c3119757c9ad4141fb446554109fa09cbd31173c", "fixed_commit_id": "b3e9ad57f8502a390686957b69070105fddcfd49", "lines_deleted": {"21": "\n", "28": "import logging\n", "33": "def get_autoconfig_client():\n", "37": "    configured_client = hdfs_config.get_configured_hdfs_client()\n", "38": "    if configured_client == \"webhdfs\":\n", "39": "        return hdfs_webhdfs_client.WebHdfsClient()\n", "40": "    if configured_client == \"snakebite\":\n", "41": "        return hdfs_snakebite_client.SnakebiteHdfsClient()\n", "42": "    if configured_client == \"snakebite_with_hadoopcli_fallback\":\n", "43": "        return luigi.contrib.target.CascadingClient([hdfs_snakebite_client.SnakebiteHdfsClient(),\n", "44": "                                                     hdfs_hadoopcli_clients.create_hadoopcli_client()])\n", "45": "    if configured_client == \"hadoopcli\":\n", "46": "        return hdfs_hadoopcli_clients.create_hadoopcli_client()\n", "47": "    raise Exception(\"Unknown hdfs client \" + configured_client)\n"}, "lines_added": {"21": "import logging\n", "22": "import threading\n", "32": "_AUTOCONFIG_CLIENT = threading.local()\n", "33": "\n", "35": "def get_autoconfig_client(client_cache=_AUTOCONFIG_CLIENT):\n", "39": "    try:\n", "40": "        return client_cache.client\n", "41": "    except AttributeError:\n", "42": "        configured_client = hdfs_config.get_configured_hdfs_client()\n", "43": "        if configured_client == \"webhdfs\":\n", "44": "            client_cache.client = hdfs_webhdfs_client.WebHdfsClient()\n", "45": "        elif configured_client == \"snakebite\":\n", "46": "            client_cache.client = hdfs_snakebite_client.SnakebiteHdfsClient()\n", "47": "        elif configured_client == \"snakebite_with_hadoopcli_fallback\":\n", "48": "            client_cache.client = luigi.contrib.target.CascadingClient([\n", "49": "                hdfs_snakebite_client.SnakebiteHdfsClient(),\n", "50": "                hdfs_hadoopcli_clients.create_hadoopcli_client(),\n", "51": "            ])\n", "52": "        elif configured_client == \"hadoopcli\":\n", "53": "            client_cache.client = hdfs_hadoopcli_clients.create_hadoopcli_client()\n", "54": "        else:\n", "55": "            raise Exception(\"Unknown hdfs client \" + configured_client)\n", "56": "        return client_cache.client\n"}}
{"project": "luigi", "bug": 13, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/file.py", "buggy_commit_id": "3c90bcdac63d978dbdaeae408420e22b963c9863", "fixed_commit_id": "a8e64fe7f83d69702166a44c7e8cb9470ff31040", "lines_deleted": {"90": "            self.fs.mkdir(d)\n"}, "lines_added": {"90": "            self.mkdir(d)\n"}}
{"project": "luigi", "bug": 15, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "a822f55d4d7c5adf5b9e3b64f23189d8305e9bf9", "fixed_commit_id": "736c0f1352463c20ece84f2f651bcd37fd2b88ae", "lines_deleted": {"484": "            if task.status not in (DONE, DISABLED) or \\\n", "485": "                    getattr(task, 'scheduler_disable_time', None) is not None:\n"}, "lines_added": {"484": "            if task.status not in (DONE, DISABLED, UNKNOWN) or \\\n", "485": "                    task.scheduler_disable_time is not None:\n"}}
{"project": "luigi", "bug": 16, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "e38392a1381dd8daee0f180f0ac7f651edb88e0c", "fixed_commit_id": "96f2b5a97c2cc5f63bea0f422c57f93dcec0ebac", "lines_deleted": {"569": "            if task.id not in necessary_tasks and self._state.prune(task, self._config):\n"}, "lines_added": {"569": "            removed = self._state.prune(task, self._config)\n", "570": "            if removed and task.id not in necessary_tasks:\n"}}
{"project": "luigi", "bug": 17, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/interface.py", "buggy_commit_id": "c39922350cba3a93c96c2ed223283bf8cf315a7d", "fixed_commit_id": "e38392a1381dd8daee0f180f0ac7f651edb88e0c", "lines_deleted": {"133": "        return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\n"}, "lines_added": {"133": "        return scheduler.CentralPlannerScheduler(prune_on_get_work=True, record_task_history=False)\n"}}
{"project": "luigi", "bug": 18, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "6cffbf438d023441f7f42c2019a51c62eecd9018", "fixed_commit_id": "c521d59c5eacf6c19ce3c17a62f73e042fa0556e", "lines_deleted": {"404": "            elif task.scheduler_disable_time is not None:\n"}, "lines_added": {"404": "            elif task.scheduler_disable_time is not None and new_status != DISABLED:\n"}}
{"project": "luigi", "bug": 19, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "3d2f75224c7649402927a5ef57558d8c3717cd94", "fixed_commit_id": "6cffbf438d023441f7f42c2019a51c62eecd9018", "lines_deleted": {"407": "        if new_status == FAILED and task.can_disable():\n"}, "lines_added": {"407": "        if new_status == FAILED and task.can_disable() and task.status != DISABLED:\n"}}
{"project": "luigi", "bug": 20, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task.py", "buggy_commit_id": "b958140c2ec838e590a5be02dbac7414d5d0bf17", "fixed_commit_id": "c3d685e2b03369aab6f4d86ed1c95169c1c2c217", "lines_deleted": {"308": "            if params[param_name].significant:\n", "309": "                params_str[param_name] = params[param_name].serialize(param_value)\n"}, "lines_added": {"308": "            params_str[param_name] = params[param_name].serialize(param_value)\n"}}
{"project": "luigi", "bug": 21, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/interface.py", "buggy_commit_id": "b7768da963570bd2223d97c1035f811c2eaf30b4", "fixed_commit_id": "1a6a89d8b510089392bb407d4ec660451deb1f23", "lines_deleted": {}, "lines_added": {"339": "    if cmdline_args is None:\n", "340": "        cmdline_args = sys.argv[1:]\n", "341": "\n"}}
{"project": "luigi", "bug": 22, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "9c4c47ae449593c55fb67ce51115d0be1fecb163", "fixed_commit_id": "2db9768958c9665c2bb78f040054a25534205fc4", "lines_deleted": {"226": "    def __init__(self, worker_id, last_active=None):\n"}, "lines_added": {"226": "    def __init__(self, worker_id, last_active=time.time()):\n"}}
{"project": "luigi", "bug": 24, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/spark.py", "buggy_commit_id": "572fce617a3b8133983cdee2b2cc336a65af5abe", "fixed_commit_id": "8a4f73296f237fcf8182c342e62c2cb201c717df", "lines_deleted": {"271": "                command += [name, '\"{0}={1}\"'.format(prop, value)]\n"}, "lines_added": {"271": "                command += [name, '{0}={1}'.format(prop, value)]\n"}}
{"project": "luigi", "bug": 25, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "d7ec31609c88503391d12d65b6037f397feff816", "fixed_commit_id": "040bbc9ef8d1703b64d13c60f271fded63e13601", "lines_deleted": {"165": "        path = self.s3_load_path()\n"}, "lines_added": {"165": "        path = self.s3_load_path\n"}}
{"project": "luigi", "bug": 26, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hadoop_jar.py", "buggy_commit_id": "ed351ca3c3baf3657de584db08dfe0414fa000a3", "fixed_commit_id": "13673fd488c25325db633b1d49e664fb937fabc2", "lines_deleted": {"85": "            if not job.jar() or not os.path.exists(job.jar()):\n"}, "lines_added": {"85": "            if not job.jar():\n", "86": "                raise HadoopJarJobError(\"Jar not defined\")\n", "87": "            if not os.path.exists(job.jar()):\n"}}
{"project": "luigi", "bug": 28, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hive.py", "buggy_commit_id": "e37cb0ea1d97e6340840128a68c8d59bd05c28c3", "fixed_commit_id": "e2be971226c34a193d7029c51206e488b6a037cd", "lines_deleted": {"140": "            return stdout and table in stdout\n"}, "lines_added": {"140": "            return stdout and table.lower() in stdout\n"}}
{"project": "luigi", "bug": 30, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/worker.py", "buggy_commit_id": "97fa4afea3748f0d714482d2c97990bb467bc9d1", "fixed_commit_id": "f1e3fb48fe9877e511a2d079636fd75eaaba4573", "lines_deleted": {"187": "            try:\n", "188": "                new_deps = self._run_get_new_deps()\n", "189": "                if new_deps is None:\n", "190": "                    status = RUNNING\n", "191": "                else:\n", "192": "                    status = SUSPENDED\n", "193": "                    logger.info(\n", "194": "                        '[pid %s] Worker %s new requirements      %s',\n", "195": "                        os.getpid(), self.worker_id, self.task.task_id)\n", "196": "                    return\n", "197": "            finally:\n", "198": "                if status != SUSPENDED:\n", "199": "                    self.task.trigger_event(\n", "200": "                        Event.PROCESSING_TIME, self.task, time.time() - t0)\n", "201": "                    error_message = json.dumps(self.task.on_success())\n", "202": "                    logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n", "203": "                                self.worker_id, self.task.task_id)\n", "204": "                    self.task.trigger_event(Event.SUCCESS, self.task)\n", "205": "                    status = DONE\n"}, "lines_added": {"187": "\n", "188": "            new_deps = self._run_get_new_deps()\n", "189": "\n", "190": "            if new_deps is None:\n", "191": "                status = DONE\n", "192": "                self.task.trigger_event(\n", "193": "                    Event.PROCESSING_TIME, self.task, time.time() - t0)\n", "194": "                error_message = json.dumps(self.task.on_success())\n", "195": "                logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n", "196": "                            self.worker_id, self.task.task_id)\n", "197": "                self.task.trigger_event(Event.SUCCESS, self.task)\n", "198": "\n", "199": "            else:\n", "200": "                status = SUSPENDED\n", "201": "                logger.info(\n", "202": "                    '[pid %s] Worker %s new requirements      %s',\n", "203": "                    os.getpid(), self.worker_id, self.task.task_id)\n"}}
{"project": "luigi", "bug": 31, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "554850f32784537796383db5ee188d0455863ca9", "fixed_commit_id": "c0857e9e06012b696017e0a353ae74f4f621d066", "lines_deleted": {"655": "            in_workers = assistant or worker in task.workers\n"}, "lines_added": {"655": "            in_workers = (assistant and task.workers) or worker in task.workers\n"}}
{"project": "luigi", "bug": 32, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task_register.py", "buggy_commit_id": "7233a0cc3e34c7c14259b1fa046f66332914f410", "fixed_commit_id": "027ac3fbcf66d5d21554c9ac6da26eee5c2e0f3d", "lines_deleted": {}, "lines_added": {"27": "import logging\n", "28": "logger = logging.getLogger('luigi-interface')\n"}}
{"project": "luigi", "bug": 33, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task.py", "buggy_commit_id": "a7c0662eab78fd226fd7ef6b4461d7199336cbb1", "fixed_commit_id": "fccb631a14e1d52138d39f06004be14ca8f3337d", "lines_deleted": {"333": "        positional_params = [(n, p) for n, p in params if p.significant]\n"}, "lines_added": {"333": "        positional_params = [(n, p) for n, p in params if not p.is_global]\n"}}
{"project": "luigi", "bug": 1, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/server.py", "buggy_commit_id": "1164eb6b85b8a70f596dbb99452bec513e72c12e", "fixed_commit_id": "aec5dc2ed8db53fc282a0bd24aabe59031b6d1ba", "lines_deleted": {"281": "        metrics = self._scheduler._state._metrics_collector.generate_latest()\n", "283": "            metrics.configure_http_handler(self)\n"}, "lines_added": {"281": "        metrics_collector = self._scheduler._state._metrics_collector\n", "282": "        metrics = metrics_collector.generate_latest()\n", "284": "            metrics_collector.configure_http_handler(self)\n"}}
{"project": "luigi", "bug": 3, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/parameter.py", "buggy_commit_id": "a0f1db01ddab5b4b2bda3fbe58bad09a6d94a7b4", "fixed_commit_id": "3a0bfbff69addfb3be1107adab3d4914bcae3e4b", "lines_deleted": {"1116": "        except ValueError:\n", "1117": "            return literal_eval(x)  # if this causes an error, let that error be raised.\n"}, "lines_added": {"1116": "        except (ValueError, TypeError):\n", "1117": "            return tuple(literal_eval(x))  # if this causes an error, let that error be raised.\n"}}
{"project": "luigi", "bug": 4, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "ffa51b50103a3adaf3c4d0569fdb037a7ba01e8e", "fixed_commit_id": "8501e5dbb8d3040453a89bb0d3562526086d51e5", "lines_deleted": {"355": "        if len(self.columns) > 0:\n"}, "lines_added": {"355": "        if self.columns and len(self.columns) > 0:\n"}}
{"project": "luigi", "bug": 7, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "dd1f2ce0061e7787166522a3c75339ba4755dd2c", "fixed_commit_id": "daf9ce99a3a7ed4227d1564570c5fce8848357e5", "lines_deleted": {"825": "        if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n", "826": "            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n"}, "lines_added": {"825": "        if not (task.status in (RUNNING, BATCH_RUNNING) and (status not in (DONE, FAILED, RUNNING) or task.worker_running != worker_id)) or new_deps:\n", "826": "            # don't allow re-scheduling of task while it is running, it must either fail or succeed on the worker actually running it\n"}}
{"project": "luigi", "bug": 8, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "61ee32e9968978c32be12a6af0affa3a5750e87e", "fixed_commit_id": "8874b93165953c4f6bbe7b747804654d13290018", "lines_deleted": {"334": "                     \"where table_schema = %s and table_name = %s limit 1\")\n", "338": "                     \"where tablename = %s limit 1\")\n"}, "lines_added": {"334": "                     \"where table_schema = lower(%s) and table_name = lower(%s) limit 1\")\n", "338": "                     \"where tablename = lower(%s) limit 1\")\n"}}
{"project": "luigi", "bug": 10, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "f538d1b3d473d542a19d508e5f7e0809b1dfe5ef", "fixed_commit_id": "3c55acd2cd5cf9c6c760bec5bb3159e0bc48a614", "lines_deleted": {"304": "            return state.get_pending_tasks()\n"}, "lines_added": {"304": "            return six.moves.filter(lambda task: self.id in task.workers, state.get_pending_tasks())\n"}}
{"project": "luigi", "bug": 11, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "bf8b5cba573d5d6cd11f7f10a03b458aeaf955c1", "fixed_commit_id": "70d8734d60e168389f425082b41b1936d63c028e", "lines_deleted": {"896": "                    task.params.get(name) == value for name, value in unbatched_params.items())):\n"}, "lines_added": {"896": "                    task.params.get(name) == value for name, value in unbatched_params.items()) and\n", "897": "                    self._schedulable(task)):\n"}}
{"project": "luigi", "bug": 12, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hdfs/clients.py", "buggy_commit_id": "c3119757c9ad4141fb446554109fa09cbd31173c", "fixed_commit_id": "b3e9ad57f8502a390686957b69070105fddcfd49", "lines_deleted": {"21": "\n", "28": "import logging\n", "33": "def get_autoconfig_client():\n", "37": "    configured_client = hdfs_config.get_configured_hdfs_client()\n", "38": "    if configured_client == \"webhdfs\":\n", "39": "        return hdfs_webhdfs_client.WebHdfsClient()\n", "40": "    if configured_client == \"snakebite\":\n", "41": "        return hdfs_snakebite_client.SnakebiteHdfsClient()\n", "42": "    if configured_client == \"snakebite_with_hadoopcli_fallback\":\n", "43": "        return luigi.contrib.target.CascadingClient([hdfs_snakebite_client.SnakebiteHdfsClient(),\n", "44": "                                                     hdfs_hadoopcli_clients.create_hadoopcli_client()])\n", "45": "    if configured_client == \"hadoopcli\":\n", "46": "        return hdfs_hadoopcli_clients.create_hadoopcli_client()\n", "47": "    raise Exception(\"Unknown hdfs client \" + configured_client)\n"}, "lines_added": {"21": "import logging\n", "22": "import threading\n", "32": "_AUTOCONFIG_CLIENT = threading.local()\n", "33": "\n", "35": "def get_autoconfig_client(client_cache=_AUTOCONFIG_CLIENT):\n", "39": "    try:\n", "40": "        return client_cache.client\n", "41": "    except AttributeError:\n", "42": "        configured_client = hdfs_config.get_configured_hdfs_client()\n", "43": "        if configured_client == \"webhdfs\":\n", "44": "            client_cache.client = hdfs_webhdfs_client.WebHdfsClient()\n", "45": "        elif configured_client == \"snakebite\":\n", "46": "            client_cache.client = hdfs_snakebite_client.SnakebiteHdfsClient()\n", "47": "        elif configured_client == \"snakebite_with_hadoopcli_fallback\":\n", "48": "            client_cache.client = luigi.contrib.target.CascadingClient([\n", "49": "                hdfs_snakebite_client.SnakebiteHdfsClient(),\n", "50": "                hdfs_hadoopcli_clients.create_hadoopcli_client(),\n", "51": "            ])\n", "52": "        elif configured_client == \"hadoopcli\":\n", "53": "            client_cache.client = hdfs_hadoopcli_clients.create_hadoopcli_client()\n", "54": "        else:\n", "55": "            raise Exception(\"Unknown hdfs client \" + configured_client)\n", "56": "        return client_cache.client\n"}}
{"project": "luigi", "bug": 13, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/file.py", "buggy_commit_id": "3c90bcdac63d978dbdaeae408420e22b963c9863", "fixed_commit_id": "a8e64fe7f83d69702166a44c7e8cb9470ff31040", "lines_deleted": {"90": "            self.fs.mkdir(d)\n"}, "lines_added": {"90": "            self.mkdir(d)\n"}}
{"project": "luigi", "bug": 15, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "a822f55d4d7c5adf5b9e3b64f23189d8305e9bf9", "fixed_commit_id": "736c0f1352463c20ece84f2f651bcd37fd2b88ae", "lines_deleted": {"484": "            if task.status not in (DONE, DISABLED) or \\\n", "485": "                    getattr(task, 'scheduler_disable_time', None) is not None:\n"}, "lines_added": {"484": "            if task.status not in (DONE, DISABLED, UNKNOWN) or \\\n", "485": "                    task.scheduler_disable_time is not None:\n"}}
{"project": "luigi", "bug": 16, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "e38392a1381dd8daee0f180f0ac7f651edb88e0c", "fixed_commit_id": "96f2b5a97c2cc5f63bea0f422c57f93dcec0ebac", "lines_deleted": {"569": "            if task.id not in necessary_tasks and self._state.prune(task, self._config):\n"}, "lines_added": {"569": "            removed = self._state.prune(task, self._config)\n", "570": "            if removed and task.id not in necessary_tasks:\n"}}
{"project": "luigi", "bug": 17, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/interface.py", "buggy_commit_id": "c39922350cba3a93c96c2ed223283bf8cf315a7d", "fixed_commit_id": "e38392a1381dd8daee0f180f0ac7f651edb88e0c", "lines_deleted": {"133": "        return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\n"}, "lines_added": {"133": "        return scheduler.CentralPlannerScheduler(prune_on_get_work=True, record_task_history=False)\n"}}
{"project": "luigi", "bug": 18, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "6cffbf438d023441f7f42c2019a51c62eecd9018", "fixed_commit_id": "c521d59c5eacf6c19ce3c17a62f73e042fa0556e", "lines_deleted": {"404": "            elif task.scheduler_disable_time is not None:\n"}, "lines_added": {"404": "            elif task.scheduler_disable_time is not None and new_status != DISABLED:\n"}}
{"project": "luigi", "bug": 19, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "3d2f75224c7649402927a5ef57558d8c3717cd94", "fixed_commit_id": "6cffbf438d023441f7f42c2019a51c62eecd9018", "lines_deleted": {"407": "        if new_status == FAILED and task.can_disable():\n"}, "lines_added": {"407": "        if new_status == FAILED and task.can_disable() and task.status != DISABLED:\n"}}
{"project": "luigi", "bug": 20, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task.py", "buggy_commit_id": "b958140c2ec838e590a5be02dbac7414d5d0bf17", "fixed_commit_id": "c3d685e2b03369aab6f4d86ed1c95169c1c2c217", "lines_deleted": {"308": "            if params[param_name].significant:\n", "309": "                params_str[param_name] = params[param_name].serialize(param_value)\n"}, "lines_added": {"308": "            params_str[param_name] = params[param_name].serialize(param_value)\n"}}
{"project": "luigi", "bug": 21, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/interface.py", "buggy_commit_id": "b7768da963570bd2223d97c1035f811c2eaf30b4", "fixed_commit_id": "1a6a89d8b510089392bb407d4ec660451deb1f23", "lines_deleted": {}, "lines_added": {"339": "    if cmdline_args is None:\n", "340": "        cmdline_args = sys.argv[1:]\n", "341": "\n"}}
{"project": "luigi", "bug": 22, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "9c4c47ae449593c55fb67ce51115d0be1fecb163", "fixed_commit_id": "2db9768958c9665c2bb78f040054a25534205fc4", "lines_deleted": {"226": "    def __init__(self, worker_id, last_active=None):\n"}, "lines_added": {"226": "    def __init__(self, worker_id, last_active=time.time()):\n"}}
{"project": "luigi", "bug": 24, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/spark.py", "buggy_commit_id": "572fce617a3b8133983cdee2b2cc336a65af5abe", "fixed_commit_id": "8a4f73296f237fcf8182c342e62c2cb201c717df", "lines_deleted": {"271": "                command += [name, '\"{0}={1}\"'.format(prop, value)]\n"}, "lines_added": {"271": "                command += [name, '{0}={1}'.format(prop, value)]\n"}}
{"project": "luigi", "bug": 25, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "d7ec31609c88503391d12d65b6037f397feff816", "fixed_commit_id": "040bbc9ef8d1703b64d13c60f271fded63e13601", "lines_deleted": {"165": "        path = self.s3_load_path()\n"}, "lines_added": {"165": "        path = self.s3_load_path\n"}}
{"project": "luigi", "bug": 26, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hadoop_jar.py", "buggy_commit_id": "ed351ca3c3baf3657de584db08dfe0414fa000a3", "fixed_commit_id": "13673fd488c25325db633b1d49e664fb937fabc2", "lines_deleted": {"85": "            if not job.jar() or not os.path.exists(job.jar()):\n"}, "lines_added": {"85": "            if not job.jar():\n", "86": "                raise HadoopJarJobError(\"Jar not defined\")\n", "87": "            if not os.path.exists(job.jar()):\n"}}
{"project": "luigi", "bug": 28, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hive.py", "buggy_commit_id": "e37cb0ea1d97e6340840128a68c8d59bd05c28c3", "fixed_commit_id": "e2be971226c34a193d7029c51206e488b6a037cd", "lines_deleted": {"140": "            return stdout and table in stdout\n"}, "lines_added": {"140": "            return stdout and table.lower() in stdout\n"}}
{"project": "luigi", "bug": 30, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/worker.py", "buggy_commit_id": "97fa4afea3748f0d714482d2c97990bb467bc9d1", "fixed_commit_id": "f1e3fb48fe9877e511a2d079636fd75eaaba4573", "lines_deleted": {"187": "            try:\n", "188": "                new_deps = self._run_get_new_deps()\n", "189": "                if new_deps is None:\n", "190": "                    status = RUNNING\n", "191": "                else:\n", "192": "                    status = SUSPENDED\n", "193": "                    logger.info(\n", "194": "                        '[pid %s] Worker %s new requirements      %s',\n", "195": "                        os.getpid(), self.worker_id, self.task.task_id)\n", "196": "                    return\n", "197": "            finally:\n", "198": "                if status != SUSPENDED:\n", "199": "                    self.task.trigger_event(\n", "200": "                        Event.PROCESSING_TIME, self.task, time.time() - t0)\n", "201": "                    error_message = json.dumps(self.task.on_success())\n", "202": "                    logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n", "203": "                                self.worker_id, self.task.task_id)\n", "204": "                    self.task.trigger_event(Event.SUCCESS, self.task)\n", "205": "                    status = DONE\n"}, "lines_added": {"187": "\n", "188": "            new_deps = self._run_get_new_deps()\n", "189": "\n", "190": "            if new_deps is None:\n", "191": "                status = DONE\n", "192": "                self.task.trigger_event(\n", "193": "                    Event.PROCESSING_TIME, self.task, time.time() - t0)\n", "194": "                error_message = json.dumps(self.task.on_success())\n", "195": "                logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n", "196": "                            self.worker_id, self.task.task_id)\n", "197": "                self.task.trigger_event(Event.SUCCESS, self.task)\n", "198": "\n", "199": "            else:\n", "200": "                status = SUSPENDED\n", "201": "                logger.info(\n", "202": "                    '[pid %s] Worker %s new requirements      %s',\n", "203": "                    os.getpid(), self.worker_id, self.task.task_id)\n"}}
{"project": "luigi", "bug": 31, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "554850f32784537796383db5ee188d0455863ca9", "fixed_commit_id": "c0857e9e06012b696017e0a353ae74f4f621d066", "lines_deleted": {"655": "            in_workers = assistant or worker in task.workers\n"}, "lines_added": {"655": "            in_workers = (assistant and task.workers) or worker in task.workers\n"}}
{"project": "luigi", "bug": 32, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task_register.py", "buggy_commit_id": "7233a0cc3e34c7c14259b1fa046f66332914f410", "fixed_commit_id": "027ac3fbcf66d5d21554c9ac6da26eee5c2e0f3d", "lines_deleted": {}, "lines_added": {"27": "import logging\n", "28": "logger = logging.getLogger('luigi-interface')\n"}}
{"project": "luigi", "bug": 33, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task.py", "buggy_commit_id": "a7c0662eab78fd226fd7ef6b4461d7199336cbb1", "fixed_commit_id": "fccb631a14e1d52138d39f06004be14ca8f3337d", "lines_deleted": {"333": "        positional_params = [(n, p) for n, p in params if p.significant]\n"}, "lines_added": {"333": "        positional_params = [(n, p) for n, p in params if not p.is_global]\n"}}
{"project": "luigi", "bug": 1, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/server.py", "buggy_commit_id": "1164eb6b85b8a70f596dbb99452bec513e72c12e", "fixed_commit_id": "aec5dc2ed8db53fc282a0bd24aabe59031b6d1ba", "lines_deleted": {"281": "        metrics = self._scheduler._state._metrics_collector.generate_latest()\n", "283": "            metrics.configure_http_handler(self)\n"}, "lines_added": {"281": "        metrics_collector = self._scheduler._state._metrics_collector\n", "282": "        metrics = metrics_collector.generate_latest()\n", "284": "            metrics_collector.configure_http_handler(self)\n"}}
{"project": "luigi", "bug": 3, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/parameter.py", "buggy_commit_id": "a0f1db01ddab5b4b2bda3fbe58bad09a6d94a7b4", "fixed_commit_id": "3a0bfbff69addfb3be1107adab3d4914bcae3e4b", "lines_deleted": {"1116": "        except ValueError:\n", "1117": "            return literal_eval(x)  # if this causes an error, let that error be raised.\n"}, "lines_added": {"1116": "        except (ValueError, TypeError):\n", "1117": "            return tuple(literal_eval(x))  # if this causes an error, let that error be raised.\n"}}
{"project": "luigi", "bug": 4, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "ffa51b50103a3adaf3c4d0569fdb037a7ba01e8e", "fixed_commit_id": "8501e5dbb8d3040453a89bb0d3562526086d51e5", "lines_deleted": {"355": "        if len(self.columns) > 0:\n"}, "lines_added": {"355": "        if self.columns and len(self.columns) > 0:\n"}}
{"project": "luigi", "bug": 7, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "dd1f2ce0061e7787166522a3c75339ba4755dd2c", "fixed_commit_id": "daf9ce99a3a7ed4227d1564570c5fce8848357e5", "lines_deleted": {"825": "        if not (task.status in (RUNNING, BATCH_RUNNING) and status == PENDING) or new_deps:\n", "826": "            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n"}, "lines_added": {"825": "        if not (task.status in (RUNNING, BATCH_RUNNING) and (status not in (DONE, FAILED, RUNNING) or task.worker_running != worker_id)) or new_deps:\n", "826": "            # don't allow re-scheduling of task while it is running, it must either fail or succeed on the worker actually running it\n"}}
{"project": "luigi", "bug": 8, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "61ee32e9968978c32be12a6af0affa3a5750e87e", "fixed_commit_id": "8874b93165953c4f6bbe7b747804654d13290018", "lines_deleted": {"334": "                     \"where table_schema = %s and table_name = %s limit 1\")\n", "338": "                     \"where tablename = %s limit 1\")\n"}, "lines_added": {"334": "                     \"where table_schema = lower(%s) and table_name = lower(%s) limit 1\")\n", "338": "                     \"where tablename = lower(%s) limit 1\")\n"}}
{"project": "luigi", "bug": 10, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "f538d1b3d473d542a19d508e5f7e0809b1dfe5ef", "fixed_commit_id": "3c55acd2cd5cf9c6c760bec5bb3159e0bc48a614", "lines_deleted": {"304": "            return state.get_pending_tasks()\n"}, "lines_added": {"304": "            return six.moves.filter(lambda task: self.id in task.workers, state.get_pending_tasks())\n"}}
{"project": "luigi", "bug": 11, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "bf8b5cba573d5d6cd11f7f10a03b458aeaf955c1", "fixed_commit_id": "70d8734d60e168389f425082b41b1936d63c028e", "lines_deleted": {"896": "                    task.params.get(name) == value for name, value in unbatched_params.items())):\n"}, "lines_added": {"896": "                    task.params.get(name) == value for name, value in unbatched_params.items()) and\n", "897": "                    self._schedulable(task)):\n"}}
{"project": "luigi", "bug": 12, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hdfs/clients.py", "buggy_commit_id": "c3119757c9ad4141fb446554109fa09cbd31173c", "fixed_commit_id": "b3e9ad57f8502a390686957b69070105fddcfd49", "lines_deleted": {"21": "\n", "28": "import logging\n", "33": "def get_autoconfig_client():\n", "37": "    configured_client = hdfs_config.get_configured_hdfs_client()\n", "38": "    if configured_client == \"webhdfs\":\n", "39": "        return hdfs_webhdfs_client.WebHdfsClient()\n", "40": "    if configured_client == \"snakebite\":\n", "41": "        return hdfs_snakebite_client.SnakebiteHdfsClient()\n", "42": "    if configured_client == \"snakebite_with_hadoopcli_fallback\":\n", "43": "        return luigi.contrib.target.CascadingClient([hdfs_snakebite_client.SnakebiteHdfsClient(),\n", "44": "                                                     hdfs_hadoopcli_clients.create_hadoopcli_client()])\n", "45": "    if configured_client == \"hadoopcli\":\n", "46": "        return hdfs_hadoopcli_clients.create_hadoopcli_client()\n", "47": "    raise Exception(\"Unknown hdfs client \" + configured_client)\n"}, "lines_added": {"21": "import logging\n", "22": "import threading\n", "32": "_AUTOCONFIG_CLIENT = threading.local()\n", "33": "\n", "35": "def get_autoconfig_client(client_cache=_AUTOCONFIG_CLIENT):\n", "39": "    try:\n", "40": "        return client_cache.client\n", "41": "    except AttributeError:\n", "42": "        configured_client = hdfs_config.get_configured_hdfs_client()\n", "43": "        if configured_client == \"webhdfs\":\n", "44": "            client_cache.client = hdfs_webhdfs_client.WebHdfsClient()\n", "45": "        elif configured_client == \"snakebite\":\n", "46": "            client_cache.client = hdfs_snakebite_client.SnakebiteHdfsClient()\n", "47": "        elif configured_client == \"snakebite_with_hadoopcli_fallback\":\n", "48": "            client_cache.client = luigi.contrib.target.CascadingClient([\n", "49": "                hdfs_snakebite_client.SnakebiteHdfsClient(),\n", "50": "                hdfs_hadoopcli_clients.create_hadoopcli_client(),\n", "51": "            ])\n", "52": "        elif configured_client == \"hadoopcli\":\n", "53": "            client_cache.client = hdfs_hadoopcli_clients.create_hadoopcli_client()\n", "54": "        else:\n", "55": "            raise Exception(\"Unknown hdfs client \" + configured_client)\n", "56": "        return client_cache.client\n"}}
{"project": "luigi", "bug": 13, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/file.py", "buggy_commit_id": "3c90bcdac63d978dbdaeae408420e22b963c9863", "fixed_commit_id": "a8e64fe7f83d69702166a44c7e8cb9470ff31040", "lines_deleted": {"90": "            self.fs.mkdir(d)\n"}, "lines_added": {"90": "            self.mkdir(d)\n"}}
{"project": "luigi", "bug": 15, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "a822f55d4d7c5adf5b9e3b64f23189d8305e9bf9", "fixed_commit_id": "736c0f1352463c20ece84f2f651bcd37fd2b88ae", "lines_deleted": {"484": "            if task.status not in (DONE, DISABLED) or \\\n", "485": "                    getattr(task, 'scheduler_disable_time', None) is not None:\n"}, "lines_added": {"484": "            if task.status not in (DONE, DISABLED, UNKNOWN) or \\\n", "485": "                    task.scheduler_disable_time is not None:\n"}}
{"project": "luigi", "bug": 16, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "e38392a1381dd8daee0f180f0ac7f651edb88e0c", "fixed_commit_id": "96f2b5a97c2cc5f63bea0f422c57f93dcec0ebac", "lines_deleted": {"569": "            if task.id not in necessary_tasks and self._state.prune(task, self._config):\n"}, "lines_added": {"569": "            removed = self._state.prune(task, self._config)\n", "570": "            if removed and task.id not in necessary_tasks:\n"}}
{"project": "luigi", "bug": 17, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/interface.py", "buggy_commit_id": "c39922350cba3a93c96c2ed223283bf8cf315a7d", "fixed_commit_id": "e38392a1381dd8daee0f180f0ac7f651edb88e0c", "lines_deleted": {"133": "        return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\n"}, "lines_added": {"133": "        return scheduler.CentralPlannerScheduler(prune_on_get_work=True, record_task_history=False)\n"}}
{"project": "luigi", "bug": 18, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "6cffbf438d023441f7f42c2019a51c62eecd9018", "fixed_commit_id": "c521d59c5eacf6c19ce3c17a62f73e042fa0556e", "lines_deleted": {"404": "            elif task.scheduler_disable_time is not None:\n"}, "lines_added": {"404": "            elif task.scheduler_disable_time is not None and new_status != DISABLED:\n"}}
{"project": "luigi", "bug": 19, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "3d2f75224c7649402927a5ef57558d8c3717cd94", "fixed_commit_id": "6cffbf438d023441f7f42c2019a51c62eecd9018", "lines_deleted": {"407": "        if new_status == FAILED and task.can_disable():\n"}, "lines_added": {"407": "        if new_status == FAILED and task.can_disable() and task.status != DISABLED:\n"}}
{"project": "luigi", "bug": 20, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task.py", "buggy_commit_id": "b958140c2ec838e590a5be02dbac7414d5d0bf17", "fixed_commit_id": "c3d685e2b03369aab6f4d86ed1c95169c1c2c217", "lines_deleted": {"308": "            if params[param_name].significant:\n", "309": "                params_str[param_name] = params[param_name].serialize(param_value)\n"}, "lines_added": {"308": "            params_str[param_name] = params[param_name].serialize(param_value)\n"}}
{"project": "luigi", "bug": 21, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/interface.py", "buggy_commit_id": "b7768da963570bd2223d97c1035f811c2eaf30b4", "fixed_commit_id": "1a6a89d8b510089392bb407d4ec660451deb1f23", "lines_deleted": {}, "lines_added": {"339": "    if cmdline_args is None:\n", "340": "        cmdline_args = sys.argv[1:]\n", "341": "\n"}}
{"project": "luigi", "bug": 22, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "9c4c47ae449593c55fb67ce51115d0be1fecb163", "fixed_commit_id": "2db9768958c9665c2bb78f040054a25534205fc4", "lines_deleted": {"226": "    def __init__(self, worker_id, last_active=None):\n"}, "lines_added": {"226": "    def __init__(self, worker_id, last_active=time.time()):\n"}}
{"project": "luigi", "bug": 24, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/spark.py", "buggy_commit_id": "572fce617a3b8133983cdee2b2cc336a65af5abe", "fixed_commit_id": "8a4f73296f237fcf8182c342e62c2cb201c717df", "lines_deleted": {"271": "                command += [name, '\"{0}={1}\"'.format(prop, value)]\n"}, "lines_added": {"271": "                command += [name, '{0}={1}'.format(prop, value)]\n"}}
{"project": "luigi", "bug": 25, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/redshift.py", "buggy_commit_id": "d7ec31609c88503391d12d65b6037f397feff816", "fixed_commit_id": "040bbc9ef8d1703b64d13c60f271fded63e13601", "lines_deleted": {"165": "        path = self.s3_load_path()\n"}, "lines_added": {"165": "        path = self.s3_load_path\n"}}
{"project": "luigi", "bug": 26, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hadoop_jar.py", "buggy_commit_id": "ed351ca3c3baf3657de584db08dfe0414fa000a3", "fixed_commit_id": "13673fd488c25325db633b1d49e664fb937fabc2", "lines_deleted": {"85": "            if not job.jar() or not os.path.exists(job.jar()):\n"}, "lines_added": {"85": "            if not job.jar():\n", "86": "                raise HadoopJarJobError(\"Jar not defined\")\n", "87": "            if not os.path.exists(job.jar()):\n"}}
{"project": "luigi", "bug": 28, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/contrib/hive.py", "buggy_commit_id": "e37cb0ea1d97e6340840128a68c8d59bd05c28c3", "fixed_commit_id": "e2be971226c34a193d7029c51206e488b6a037cd", "lines_deleted": {"140": "            return stdout and table in stdout\n"}, "lines_added": {"140": "            return stdout and table.lower() in stdout\n"}}
{"project": "luigi", "bug": 30, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/worker.py", "buggy_commit_id": "97fa4afea3748f0d714482d2c97990bb467bc9d1", "fixed_commit_id": "f1e3fb48fe9877e511a2d079636fd75eaaba4573", "lines_deleted": {"187": "            try:\n", "188": "                new_deps = self._run_get_new_deps()\n", "189": "                if new_deps is None:\n", "190": "                    status = RUNNING\n", "191": "                else:\n", "192": "                    status = SUSPENDED\n", "193": "                    logger.info(\n", "194": "                        '[pid %s] Worker %s new requirements      %s',\n", "195": "                        os.getpid(), self.worker_id, self.task.task_id)\n", "196": "                    return\n", "197": "            finally:\n", "198": "                if status != SUSPENDED:\n", "199": "                    self.task.trigger_event(\n", "200": "                        Event.PROCESSING_TIME, self.task, time.time() - t0)\n", "201": "                    error_message = json.dumps(self.task.on_success())\n", "202": "                    logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n", "203": "                                self.worker_id, self.task.task_id)\n", "204": "                    self.task.trigger_event(Event.SUCCESS, self.task)\n", "205": "                    status = DONE\n"}, "lines_added": {"187": "\n", "188": "            new_deps = self._run_get_new_deps()\n", "189": "\n", "190": "            if new_deps is None:\n", "191": "                status = DONE\n", "192": "                self.task.trigger_event(\n", "193": "                    Event.PROCESSING_TIME, self.task, time.time() - t0)\n", "194": "                error_message = json.dumps(self.task.on_success())\n", "195": "                logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n", "196": "                            self.worker_id, self.task.task_id)\n", "197": "                self.task.trigger_event(Event.SUCCESS, self.task)\n", "198": "\n", "199": "            else:\n", "200": "                status = SUSPENDED\n", "201": "                logger.info(\n", "202": "                    '[pid %s] Worker %s new requirements      %s',\n", "203": "                    os.getpid(), self.worker_id, self.task.task_id)\n"}}
{"project": "luigi", "bug": 31, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/scheduler.py", "buggy_commit_id": "554850f32784537796383db5ee188d0455863ca9", "fixed_commit_id": "c0857e9e06012b696017e0a353ae74f4f621d066", "lines_deleted": {"655": "            in_workers = assistant or worker in task.workers\n"}, "lines_added": {"655": "            in_workers = (assistant and task.workers) or worker in task.workers\n"}}
{"project": "luigi", "bug": 32, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task_register.py", "buggy_commit_id": "7233a0cc3e34c7c14259b1fa046f66332914f410", "fixed_commit_id": "027ac3fbcf66d5d21554c9ac6da26eee5c2e0f3d", "lines_deleted": {}, "lines_added": {"27": "import logging\n", "28": "logger = logging.getLogger('luigi-interface')\n"}}
{"project": "luigi", "bug": 33, "project_url": "https://github.com/spotify/luigi", "file_changed": "luigi/task.py", "buggy_commit_id": "a7c0662eab78fd226fd7ef6b4461d7199336cbb1", "fixed_commit_id": "fccb631a14e1d52138d39f06004be14ca8f3337d", "lines_deleted": {"333": "        positional_params = [(n, p) for n, p in params if p.significant]\n"}, "lines_added": {"333": "        positional_params = [(n, p) for n, p in params if not p.is_global]\n"}}
